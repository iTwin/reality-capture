# trigger:
# - main

# pr:
#   drafts: false
#   branches:
#     include:
#       - main
trigger: none
pr: none

resources:
  repositories:
    - repository: build-pipeline-scripts
      type: git
      ref: master
      name: iModelTechnologies/imodeljs-build-pipeline-scripts

stages:
- stage: Build
  displayName: Build
  jobs:
    - job: BuildPackage
      strategy:
        matrix:
          windows:
            imageName: 'windows-latest'
          linux:
            imageName: 'ubuntu-latest'
          mac:
            imageName: 'macos-latest'
      pool:
        vmImage: $(imageName)
      variables:
      - group: "Reality Capture Integration Test Variables"

      steps:
      - checkout: self
        lfs: true
      
      - task: NodeTool@0
        inputs:
          versionSpec: 16.x
        displayName: Use node 16

      # Build SDK
      - script: npm ci
        displayName: Install SDK
        workingDirectory: $(Build.SourcesDirectory)/typescript/sdk

      - script: npm run build
        displayName: Typescript compiler (SDK)
        workingDirectory: $(Build.SourcesDirectory)/typescript/sdk

      # Build SDK Node support
      - script: npm ci
        displayName: Install SDK Node support
        workingDirectory: $(Build.SourcesDirectory)/typescript/sdk-node

      - script: npm run build
        displayName: Typescript compiler (SDK Node support)
        workingDirectory: $(Build.SourcesDirectory)/typescript/sdk-node

      # Build WebApp
      - script: npm ci
        displayName: Install WebApp
        workingDirectory: $(Build.SourcesDirectory)/typescript/web-app

      - script: npm run build
        displayName: Typescript compiler (WebApp)
        workingDirectory: $(Build.SourcesDirectory)/typescript/web-app

      - script: npm run lint
        displayName: EsLint
        workingDirectory: $(Build.SourcesDirectory)/typescript/web-app

      # Build examples
      - script: npm ci
        displayName: Install Examples
        workingDirectory: $(Build.SourcesDirectory)/typescript/examples

      - script: npm run build
        displayName: Typescript compiler (Examples)
        workingDirectory: $(Build.SourcesDirectory)/typescript/examples

      # Build integration tests
      - script: npm ci
        displayName: Install Integration Tests
        workingDirectory: $(Build.SourcesDirectory)/typescript/integration-tests

      - script: npm run build
        displayName: Typescript compiler (Integration Tests)
        workingDirectory: $(Build.SourcesDirectory)/typescript/integration-tests

      - script: npm run test:integration
        displayName: Run SDK Integration Tests
        workingDirectory: $(Build.SourcesDirectory)/typescript/integration-tests
        env:
          IMJS_PROJECT_ID: $(PROJECT_ID)
          IMJS_CLIENT_ID: $(CLIENT_ID)
          IMJS_SECRET: $(CLIENT_SECRET)

      # Publish Reality Capture SDK artifact
      - bash: |
          sdkVersion=$(node -p "require('./package.json').version")
          sdkName=$(node -p "require('./package.json').name")
          checkVer() {
            localVer=$1
            name=$2
            remoteVer=$(npm view $name version)
            if [ -z "$remoteVer" ]; then
              remoteVer=0.0.0
            fi
            olderVer=$(printf '%s\n' "$localVer" "$remoteVer" | sort -V | head -n1)
            if [ "$localVer" != "$remoteVer" ] && [ "$remoteVer" = "$olderVer" ]; then
              echo true
            else
              echo false
            fi
          }
          isUpdated=$(checkVer $sdkVersion $sdkName)
          if [ "$isUpdated" = "true" ]; then
            echo "package publishing conditions are met."
            shouldPublish=true
          else
            echo "package publishing conditions not met."
            shouldPublish=false
          fi
          echo "##vso[task.setvariable variable=shouldPublish;isOutput=true]$shouldPublishSDK"
          echo "##vso[task.setvariable variable=sdkVersion;isOutput=true]$sdkVersion"
          echo "##vso[task.setvariable variable=sdkName;isOutput=true]$sdkName"
        displayName: Check SDK version
        workingDirectory: $(Build.SourcesDirectory)/typescript/sdk
        name: info_sdk
        condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Manual'), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Agent.OS'], 'Linux'))

      - script: npm pack
        workingDirectory: $(Build.SourcesDirectory)/typescript/sdk
        displayName: Package Reality Capture SDK
        condition: and(succeeded(), eq(variables['info_sdk.shouldPublishSDK'], 'true'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/typescript/sdk/$(info_sdk.sdkName)-$(info_sdk.sdkVersion).tgz
          artifactName: RealityCaptureSDK
        displayName: Publish Reality Capture SDK
        condition: and(succeeded(), eq(variables['info_sdk.shouldPublishSDK'], 'true'))

      # Publish SDK node support
      - bash: |
          sdkNodeVersion=$(node -p "require('./package.json').version")
          sdkNodeName=$(node -p "require('./package.json').name")
          checkVer() {
            localVer=$1
            name=$2
            remoteVer=$(npm view $name version)
            if [ -z "$remoteVer" ]; then
              remoteVer=0.0.0
            fi
            olderVer=$(printf '%s\n' "$localVer" "$remoteVer" | sort -V | head -n1)
            if [ "$localVer" != "$remoteVer" ] && [ "$remoteVer" = "$olderVer" ]; then
              echo true
            else
              echo false
            fi
          }
          isUpdated=$(checkVer $sdkNodeVersion $sdkNodeName)
          if [ "$isUpdated" = "true" ]; then
            echo "package publishing conditions are met."
            shouldPublish=true
          else
            echo "package publishing conditions not met."
            shouldPublish=false
          fi
          echo "##vso[task.setvariable variable=shouldPublish;isOutput=true]$shouldPublishSDKNode"
          echo "##vso[task.setvariable variable=sdkNodeVersion;isOutput=true]$sdkNodeVersion"
          echo "##vso[task.setvariable variable=sdkNodeName;isOutput=true]$sdkNodeName"
        displayName: Check SDK Node version
        workingDirectory: $(Build.SourcesDirectory)/typescript/sdk-node
        name: info_sdk_node
        condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Manual'), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Agent.OS'], 'Linux'))

      - script: npm pack
        workingDirectory: $(Build.SourcesDirectory)/typescript/sdkNode
        displayName: Package Reality Capture SDK Node
        condition: and(succeeded(), eq(variables['info_sdk_node.shouldPublishSDKNode'], 'true'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/typescript/sdk-node/$(info_sdk_node.sdkNodeName)-$(info_sdk_node.sdkNodeVersion).tgz
          artifactName: RealityCaptureSDKNode
        displayName: Publish Reality Capture SDK Node
        condition: and(succeeded(), eq(variables['info_sdk_node.shouldPublishSDKNode'], 'true'))

# - stage: PublishSDK
#   displayName: Publish Reality Data SDK
#   condition: and(succeeded(), eq(dependencies.Build.outputs['BuildPackages.linux.info_sdk.shouldPublishSDK'], 'true'))
#   dependsOn: Build
#   jobs:
#     - template: templates/npmjs-publish-deployment.yaml@build-pipeline-scripts
#       parameters:
#         path: '*.tgz'
#         artifactName: RealityCaptureSDK
#         name: RealityCaptureSDK
#         dryrun: true

# - stage: PublishSDKNode
#   displayName: Publish Reality Data SDK Node
#   condition: and(succeeded(), eq(dependencies.Build.outputs['BuildPackages.linux.info_sdk_node.shouldPublishSDKNode'], 'true'))
#   dependsOn: Build
#   jobs:
#     - template: templates/npmjs-publish-deployment.yaml@build-pipeline-scripts
#       parameters:
#         path: '*.tgz'
#         artifactName: RealityCaptureSDKNode
#         name: RealityCaptureSDKNode
#         dryrun: true
