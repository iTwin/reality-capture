{"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\reality-capture.js":{"path":"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\reality-capture.js","statementMap":{"0":{"start":{"line":6,"column":22},"end":{"line":16,"column":3}},"1":{"start":{"line":7,"column":4},"end":{"line":7,"column":33}},"2":{"start":{"line":7,"column":26},"end":{"line":7,"column":33}},"3":{"start":{"line":8,"column":15},"end":{"line":8,"column":52}},"4":{"start":{"line":9,"column":4},"end":{"line":11,"column":5}},"5":{"start":{"line":10,"column":6},"end":{"line":10,"column":68}},"6":{"start":{"line":10,"column":51},"end":{"line":10,"column":63}},"7":{"start":{"line":12,"column":4},"end":{"line":12,"column":39}},"8":{"start":{"line":14,"column":4},"end":{"line":14,"column":33}},"9":{"start":{"line":14,"column":26},"end":{"line":14,"column":33}},"10":{"start":{"line":15,"column":4},"end":{"line":15,"column":17}},"11":{"start":{"line":17,"column":25},"end":{"line":21,"column":2}},"12":{"start":{"line":18,"column":4},"end":{"line":18,"column":72}},"13":{"start":{"line":20,"column":4},"end":{"line":20,"column":21}},"14":{"start":{"line":22,"column":19},"end":{"line":28,"column":1}},"15":{"start":{"line":23,"column":4},"end":{"line":23,"column":42}},"16":{"start":{"line":23,"column":31},"end":{"line":23,"column":42}},"17":{"start":{"line":24,"column":17},"end":{"line":24,"column":19}},"18":{"start":{"line":25,"column":4},"end":{"line":25,"column":141}},"19":{"start":{"line":25,"column":21},"end":{"line":25,"column":141}},"20":{"start":{"line":25,"column":40},"end":{"line":25,"column":141}},"21":{"start":{"line":25,"column":109},"end":{"line":25,"column":141}},"22":{"start":{"line":26,"column":4},"end":{"line":26,"column":36}},"23":{"start":{"line":27,"column":4},"end":{"line":27,"column":18}},"24":{"start":{"line":29,"column":0},"end":{"line":29,"column":62}},"25":{"start":{"line":30,"column":0},"end":{"line":30,"column":255}},"26":{"start":{"line":31,"column":32},"end":{"line":31,"column":71}},"27":{"start":{"line":32,"column":0},"end":{"line":32,"column":154}},"28":{"start":{"line":32,"column":95},"end":{"line":32,"column":148}},"29":{"start":{"line":33,"column":16},"end":{"line":33,"column":53}},"30":{"start":{"line":34,"column":0},"end":{"line":34,"column":26}},"31":{"start":{"line":35,"column":37},"end":{"line":35,"column":81}},"32":{"start":{"line":36,"column":0},"end":{"line":36,"column":169}},"33":{"start":{"line":36,"column":100},"end":{"line":36,"column":163}},"34":{"start":{"line":37,"column":20},"end":{"line":37,"column":60}},"35":{"start":{"line":38,"column":0},"end":{"line":38,"column":34}},"36":{"start":{"line":39,"column":17},"end":{"line":39,"column":54}},"37":{"start":{"line":40,"column":0},"end":{"line":40,"column":28}},"38":{"start":{"line":41,"column":37},"end":{"line":41,"column":82}},"39":{"start":{"line":42,"column":0},"end":{"line":42,"column":155}},"40":{"start":{"line":42,"column":93},"end":{"line":42,"column":149}},"41":{"start":{"line":43,"column":0},"end":{"line":43,"column":169}},"42":{"start":{"line":43,"column":100},"end":{"line":43,"column":163}},"43":{"start":{"line":44,"column":32},"end":{"line":44,"column":72}},"44":{"start":{"line":45,"column":0},"end":{"line":45,"column":154}},"45":{"start":{"line":45,"column":95},"end":{"line":45,"column":148}},"46":{"start":{"line":46,"column":19},"end":{"line":46,"column":56}},"47":{"start":{"line":47,"column":0},"end":{"line":47,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":74},"end":{"line":6,"column":75}},"loc":{"start":{"line":6,"column":96},"end":{"line":13,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":38},"end":{"line":10,"column":39}},"loc":{"start":{"line":10,"column":49},"end":{"line":10,"column":65}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":13,"column":6},"end":{"line":13,"column":7}},"loc":{"start":{"line":13,"column":28},"end":{"line":16,"column":1}},"line":13},"3":{"name":"(anonymous_3)","decl":{"start":{"line":17,"column":80},"end":{"line":17,"column":81}},"loc":{"start":{"line":17,"column":95},"end":{"line":19,"column":1}},"line":17},"4":{"name":"(anonymous_4)","decl":{"start":{"line":19,"column":5},"end":{"line":19,"column":6}},"loc":{"start":{"line":19,"column":20},"end":{"line":21,"column":1}},"line":19},"5":{"name":"(anonymous_5)","decl":{"start":{"line":22,"column":50},"end":{"line":22,"column":51}},"loc":{"start":{"line":22,"column":65},"end":{"line":28,"column":1}},"line":22},"6":{"name":"(anonymous_6)","decl":{"start":{"line":32,"column":81},"end":{"line":32,"column":82}},"loc":{"start":{"line":32,"column":93},"end":{"line":32,"column":150}},"line":32},"7":{"name":"(anonymous_7)","decl":{"start":{"line":36,"column":86},"end":{"line":36,"column":87}},"loc":{"start":{"line":36,"column":98},"end":{"line":36,"column":165}},"line":36},"8":{"name":"(anonymous_8)","decl":{"start":{"line":42,"column":79},"end":{"line":42,"column":80}},"loc":{"start":{"line":42,"column":91},"end":{"line":42,"column":151}},"line":42},"9":{"name":"(anonymous_9)","decl":{"start":{"line":43,"column":86},"end":{"line":43,"column":87}},"loc":{"start":{"line":43,"column":98},"end":{"line":43,"column":165}},"line":43},"10":{"name":"(anonymous_10)","decl":{"start":{"line":45,"column":81},"end":{"line":45,"column":82}},"loc":{"start":{"line":45,"column":93},"end":{"line":45,"column":150}},"line":45}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":22},"end":{"line":16,"column":3}},"type":"binary-expr","locations":[{"start":{"line":6,"column":23},"end":{"line":6,"column":27}},{"start":{"line":6,"column":31},"end":{"line":6,"column":51}},{"start":{"line":6,"column":57},"end":{"line":16,"column":2}}],"line":6},"1":{"loc":{"start":{"line":6,"column":57},"end":{"line":16,"column":2}},"type":"cond-expr","locations":[{"start":{"line":6,"column":74},"end":{"line":13,"column":1}},{"start":{"line":13,"column":6},"end":{"line":16,"column":1}}],"line":6},"2":{"loc":{"start":{"line":7,"column":4},"end":{"line":7,"column":33}},"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":7,"column":33}},{"start":{"line":7,"column":4},"end":{"line":7,"column":33}}],"line":7},"3":{"loc":{"start":{"line":9,"column":4},"end":{"line":11,"column":5}},"type":"if","locations":[{"start":{"line":9,"column":4},"end":{"line":11,"column":5}},{"start":{"line":9,"column":4},"end":{"line":11,"column":5}}],"line":9},"4":{"loc":{"start":{"line":9,"column":8},"end":{"line":9,"column":85}},"type":"binary-expr","locations":[{"start":{"line":9,"column":8},"end":{"line":9,"column":13}},{"start":{"line":9,"column":18},"end":{"line":9,"column":84}}],"line":9},"5":{"loc":{"start":{"line":9,"column":18},"end":{"line":9,"column":84}},"type":"cond-expr","locations":[{"start":{"line":9,"column":34},"end":{"line":9,"column":47}},{"start":{"line":9,"column":50},"end":{"line":9,"column":84}}],"line":9},"6":{"loc":{"start":{"line":9,"column":50},"end":{"line":9,"column":84}},"type":"binary-expr","locations":[{"start":{"line":9,"column":50},"end":{"line":9,"column":63}},{"start":{"line":9,"column":67},"end":{"line":9,"column":84}}],"line":9},"7":{"loc":{"start":{"line":14,"column":4},"end":{"line":14,"column":33}},"type":"if","locations":[{"start":{"line":14,"column":4},"end":{"line":14,"column":33}},{"start":{"line":14,"column":4},"end":{"line":14,"column":33}}],"line":14},"8":{"loc":{"start":{"line":17,"column":25},"end":{"line":21,"column":2}},"type":"binary-expr","locations":[{"start":{"line":17,"column":26},"end":{"line":17,"column":30}},{"start":{"line":17,"column":34},"end":{"line":17,"column":57}},{"start":{"line":17,"column":63},"end":{"line":21,"column":1}}],"line":17},"9":{"loc":{"start":{"line":17,"column":63},"end":{"line":21,"column":1}},"type":"cond-expr","locations":[{"start":{"line":17,"column":80},"end":{"line":19,"column":1}},{"start":{"line":19,"column":5},"end":{"line":21,"column":1}}],"line":17},"10":{"loc":{"start":{"line":22,"column":19},"end":{"line":28,"column":1}},"type":"binary-expr","locations":[{"start":{"line":22,"column":20},"end":{"line":22,"column":24}},{"start":{"line":22,"column":28},"end":{"line":22,"column":45}},{"start":{"line":22,"column":50},"end":{"line":28,"column":1}}],"line":22},"11":{"loc":{"start":{"line":23,"column":4},"end":{"line":23,"column":42}},"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":42}},{"start":{"line":23,"column":4},"end":{"line":23,"column":42}}],"line":23},"12":{"loc":{"start":{"line":23,"column":8},"end":{"line":23,"column":29}},"type":"binary-expr","locations":[{"start":{"line":23,"column":8},"end":{"line":23,"column":11}},{"start":{"line":23,"column":15},"end":{"line":23,"column":29}}],"line":23},"13":{"loc":{"start":{"line":25,"column":4},"end":{"line":25,"column":141}},"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":141}},{"start":{"line":25,"column":4},"end":{"line":25,"column":141}}],"line":25},"14":{"loc":{"start":{"line":25,"column":40},"end":{"line":25,"column":141}},"type":"if","locations":[{"start":{"line":25,"column":40},"end":{"line":25,"column":141}},{"start":{"line":25,"column":40},"end":{"line":25,"column":141}}],"line":25},"15":{"loc":{"start":{"line":25,"column":44},"end":{"line":25,"column":107}},"type":"binary-expr","locations":[{"start":{"line":25,"column":44},"end":{"line":25,"column":59}},{"start":{"line":25,"column":63},"end":{"line":25,"column":107}}],"line":25}},"s":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":1,"15":4,"16":4,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":1,"26":1,"27":1,"28":2,"29":1,"30":1,"31":1,"32":1,"33":0,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":0,"41":1,"42":0,"43":1,"44":1,"45":0,"46":1,"47":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":4,"6":2,"7":0,"8":0,"9":0,"10":0},"b":{"0":[1,1,1],"1":[1,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[1,1,1],"9":[1,0],"10":[1,1,1],"11":[4,0],"12":[4,4],"13":[0,0],"14":[0,0],"15":[0,0]},"inputSourceMap":{"version":3,"file":"reality-capture.js","sourceRoot":"","sources":["../src/reality-capture.ts"],"names":[],"mappings":";AAAA;;;+FAG+F;;;;;;;;;;;;;;;;;;;;;;;;;;AAE/F,wEAAqE;AAUjE,sGAVK,6CAAqB,OAUL;AATzB,sDAAwC;AASb,0BAAO;AARlC,kFAA+E;AAS3E,2GATK,uDAA0B,OASL;AAR9B,6DAA+C;AAQf,kCAAW;AAP3C,uDAAyC;AAOI,4BAAQ;AANrD,mFAAqG;AAOjG,oGAPK,gDAAmB,OAOL;AAAE,2GAPK,uDAA0B,OAOL;AANnD,yEAAsE;AAOlE,sGAPK,6CAAqB,OAOL;AANzB,yDAA2C;AAOvC,gCAAU","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { ContextCaptureService } from \"./cccs/ContextCaptureService\";\r\nimport * as CCUtils from \"./cccs/Utils\";\r\nimport { RealityDataAnalysisService } from \"./rdas/RealityDataAnalysisService\";\r\nimport * as RDASettings from \"./rdas/Settings\";\r\nimport * as RDAUtils from \"./rdas/Utils\";\r\nimport { defaultProgressHook, RealityDataTransferBrowser } from \"./utils/RealityDataTransferBrowser\";\r\nimport { ReferenceTableBrowser } from \"./utils/ReferenceTableBrowser\";\r\nimport * as CommonData from \"./CommonData\";\r\n\r\nexport {\r\n    ContextCaptureService, CCUtils,\r\n    RealityDataAnalysisService, RDASettings, RDAUtils,\r\n    defaultProgressHook, RealityDataTransferBrowser,\r\n    ReferenceTableBrowser,\r\n    CommonData,\r\n};\r\n\r\n\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"eb825e9daac184d9076aff20b834e712899b53f7","contentHash":"f59522414956b69b4c11b562c9910ea1b56b9f5d0140d2573b7b06df5571fb10"},"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\cccs\\ContextCaptureService.js":{"path":"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\cccs\\ContextCaptureService.js","statementMap":{"0":{"start":{"line":6,"column":22},"end":{"line":8,"column":1}},"1":{"start":{"line":7,"column":4},"end":{"line":7,"column":62}},"2":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"3":{"start":{"line":10,"column":0},"end":{"line":10,"column":39}},"4":{"start":{"line":11,"column":16},"end":{"line":11,"column":34}},"5":{"start":{"line":12,"column":23},"end":{"line":12,"column":53}},"6":{"start":{"line":13,"column":16},"end":{"line":13,"column":49}},"7":{"start":{"line":25,"column":8},"end":{"line":25,"column":67}},"8":{"start":{"line":26,"column":8},"end":{"line":26,"column":55}},"9":{"start":{"line":27,"column":8},"end":{"line":28,"column":82}},"10":{"start":{"line":28,"column":12},"end":{"line":28,"column":82}},"11":{"start":{"line":39,"column":8},"end":{"line":78,"column":9}},"12":{"start":{"line":41,"column":24},"end":{"line":41,"column":63}},"13":{"start":{"line":42,"column":28},"end":{"line":46,"column":13}},"14":{"start":{"line":47,"column":12},"end":{"line":56,"column":131}},"15":{"start":{"line":48,"column":16},"end":{"line":48,"column":84}},"16":{"start":{"line":49,"column":17},"end":{"line":56,"column":131}},"17":{"start":{"line":50,"column":16},"end":{"line":50,"column":87}},"18":{"start":{"line":51,"column":17},"end":{"line":56,"column":131}},"19":{"start":{"line":52,"column":16},"end":{"line":52,"column":94}},"20":{"start":{"line":53,"column":17},"end":{"line":56,"column":131}},"21":{"start":{"line":54,"column":16},"end":{"line":54,"column":95}},"22":{"start":{"line":56,"column":16},"end":{"line":56,"column":131}},"23":{"start":{"line":57,"column":12},"end":{"line":59,"column":13}},"24":{"start":{"line":58,"column":16},"end":{"line":58,"column":93}},"25":{"start":{"line":60,"column":12},"end":{"line":60,"column":33}},"26":{"start":{"line":63,"column":25},"end":{"line":63,"column":28}},"27":{"start":{"line":64,"column":26},"end":{"line":64,"column":83}},"28":{"start":{"line":65,"column":12},"end":{"line":76,"column":13}},"29":{"start":{"line":66,"column":38},"end":{"line":66,"column":52}},"30":{"start":{"line":67,"column":16},"end":{"line":67,"column":46}},"31":{"start":{"line":68,"column":16},"end":{"line":68,"column":153}},"32":{"start":{"line":71,"column":37},"end":{"line":71,"column":42}},"33":{"start":{"line":72,"column":16},"end":{"line":75,"column":17}},"34":{"start":{"line":73,"column":20},"end":{"line":73,"column":54}},"35":{"start":{"line":74,"column":20},"end":{"line":74,"column":51}},"36":{"start":{"line":77,"column":12},"end":{"line":77,"column":84}},"37":{"start":{"line":85,"column":8},"end":{"line":85,"column":73}},"38":{"start":{"line":95,"column":19},"end":{"line":98,"column":9}},"39":{"start":{"line":99,"column":8},"end":{"line":100,"column":66}},"40":{"start":{"line":100,"column":12},"end":{"line":100,"column":66}},"41":{"start":{"line":101,"column":8},"end":{"line":107,"column":9}},"42":{"start":{"line":102,"column":29},"end":{"line":102,"column":88}},"43":{"start":{"line":103,"column":12},"end":{"line":103,"column":47}},"44":{"start":{"line":106,"column":12},"end":{"line":106,"column":41}},"45":{"start":{"line":114,"column":8},"end":{"line":114,"column":86}},"46":{"start":{"line":122,"column":25},"end":{"line":122,"column":92}},"47":{"start":{"line":123,"column":8},"end":{"line":129,"column":10}},"48":{"start":{"line":140,"column":29},"end":{"line":140,"column":46}},"49":{"start":{"line":141,"column":8},"end":{"line":141,"column":49}},"50":{"start":{"line":142,"column":21},"end":{"line":148,"column":9}},"51":{"start":{"line":149,"column":25},"end":{"line":149,"column":79}},"52":{"start":{"line":150,"column":8},"end":{"line":150,"column":37}},"53":{"start":{"line":157,"column":21},"end":{"line":157,"column":42}},"54":{"start":{"line":158,"column":8},"end":{"line":158,"column":79}},"55":{"start":{"line":165,"column":21},"end":{"line":167,"column":9}},"56":{"start":{"line":168,"column":8},"end":{"line":168,"column":76}},"57":{"start":{"line":175,"column":8},"end":{"line":175,"column":71}},"58":{"start":{"line":183,"column":25},"end":{"line":183,"column":91}},"59":{"start":{"line":184,"column":25},"end":{"line":184,"column":48}},"60":{"start":{"line":185,"column":22},"end":{"line":185,"column":53}},"61":{"start":{"line":186,"column":8},"end":{"line":186,"column":102}},"62":{"start":{"line":194,"column":25},"end":{"line":194,"column":77}},"63":{"start":{"line":195,"column":20},"end":{"line":195,"column":35}},"64":{"start":{"line":196,"column":30},"end":{"line":207,"column":9}},"65":{"start":{"line":208,"column":25},"end":{"line":208,"column":66}},"66":{"start":{"line":209,"column":8},"end":{"line":209,"column":42}},"67":{"start":{"line":210,"column":8},"end":{"line":223,"column":9}},"68":{"start":{"line":211,"column":12},"end":{"line":216,"column":14}},"69":{"start":{"line":217,"column":12},"end":{"line":217,"column":88}},"70":{"start":{"line":220,"column":12},"end":{"line":222,"column":14}},"71":{"start":{"line":224,"column":8},"end":{"line":230,"column":9}},"72":{"start":{"line":225,"column":12},"end":{"line":229,"column":14}},"73":{"start":{"line":231,"column":8},"end":{"line":231,"column":29}},"74":{"start":{"line":239,"column":21},"end":{"line":245,"column":9}},"75":{"start":{"line":246,"column":25},"end":{"line":246,"column":85}},"76":{"start":{"line":247,"column":8},"end":{"line":247,"column":38}},"77":{"start":{"line":250,"column":0},"end":{"line":250,"column":54}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":56},"end":{"line":6,"column":57}},"loc":{"start":{"line":6,"column":71},"end":{"line":8,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":42},"end":{"line":29,"column":5}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":65},"end":{"line":79,"column":5}},"line":37},"3":{"name":"(anonymous_3)","decl":{"start":{"line":84,"column":4},"end":{"line":84,"column":5}},"loc":{"start":{"line":84,"column":23},"end":{"line":86,"column":5}},"line":84},"4":{"name":"(anonymous_4)","decl":{"start":{"line":94,"column":4},"end":{"line":94,"column":5}},"loc":{"start":{"line":94,"column":64},"end":{"line":108,"column":5}},"line":94},"5":{"name":"(anonymous_5)","decl":{"start":{"line":113,"column":4},"end":{"line":113,"column":5}},"loc":{"start":{"line":113,"column":39},"end":{"line":115,"column":5}},"line":113},"6":{"name":"(anonymous_6)","decl":{"start":{"line":121,"column":4},"end":{"line":121,"column":5}},"loc":{"start":{"line":121,"column":36},"end":{"line":130,"column":5}},"line":121},"7":{"name":"(anonymous_7)","decl":{"start":{"line":139,"column":4},"end":{"line":139,"column":5}},"loc":{"start":{"line":139,"column":55},"end":{"line":151,"column":5}},"line":139},"8":{"name":"(anonymous_8)","decl":{"start":{"line":156,"column":4},"end":{"line":156,"column":5}},"loc":{"start":{"line":156,"column":27},"end":{"line":159,"column":5}},"line":156},"9":{"name":"(anonymous_9)","decl":{"start":{"line":164,"column":4},"end":{"line":164,"column":5}},"loc":{"start":{"line":164,"column":24},"end":{"line":169,"column":5}},"line":164},"10":{"name":"(anonymous_10)","decl":{"start":{"line":174,"column":4},"end":{"line":174,"column":5}},"loc":{"start":{"line":174,"column":24},"end":{"line":176,"column":5}},"line":174},"11":{"name":"(anonymous_11)","decl":{"start":{"line":182,"column":4},"end":{"line":182,"column":5}},"loc":{"start":{"line":182,"column":29},"end":{"line":187,"column":5}},"line":182},"12":{"name":"(anonymous_12)","decl":{"start":{"line":193,"column":4},"end":{"line":193,"column":5}},"loc":{"start":{"line":193,"column":31},"end":{"line":232,"column":5}},"line":193},"13":{"name":"(anonymous_13)","decl":{"start":{"line":238,"column":4},"end":{"line":238,"column":5}},"loc":{"start":{"line":238,"column":50},"end":{"line":248,"column":5}},"line":238}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":22},"end":{"line":8,"column":1}},"type":"binary-expr","locations":[{"start":{"line":6,"column":23},"end":{"line":6,"column":27}},{"start":{"line":6,"column":31},"end":{"line":6,"column":51}},{"start":{"line":6,"column":56},"end":{"line":8,"column":1}}],"line":6},"1":{"loc":{"start":{"line":7,"column":11},"end":{"line":7,"column":61}},"type":"cond-expr","locations":[{"start":{"line":7,"column":37},"end":{"line":7,"column":40}},{"start":{"line":7,"column":43},"end":{"line":7,"column":61}}],"line":7},"2":{"loc":{"start":{"line":7,"column":12},"end":{"line":7,"column":33}},"type":"binary-expr","locations":[{"start":{"line":7,"column":12},"end":{"line":7,"column":15}},{"start":{"line":7,"column":19},"end":{"line":7,"column":33}}],"line":7},"3":{"loc":{"start":{"line":27,"column":8},"end":{"line":28,"column":82}},"type":"if","locations":[{"start":{"line":27,"column":8},"end":{"line":28,"column":82}},{"start":{"line":27,"column":8},"end":{"line":28,"column":82}}],"line":27},"4":{"loc":{"start":{"line":47,"column":12},"end":{"line":56,"column":131}},"type":"if","locations":[{"start":{"line":47,"column":12},"end":{"line":56,"column":131}},{"start":{"line":47,"column":12},"end":{"line":56,"column":131}}],"line":47},"5":{"loc":{"start":{"line":49,"column":17},"end":{"line":56,"column":131}},"type":"if","locations":[{"start":{"line":49,"column":17},"end":{"line":56,"column":131}},{"start":{"line":49,"column":17},"end":{"line":56,"column":131}}],"line":49},"6":{"loc":{"start":{"line":51,"column":17},"end":{"line":56,"column":131}},"type":"if","locations":[{"start":{"line":51,"column":17},"end":{"line":56,"column":131}},{"start":{"line":51,"column":17},"end":{"line":56,"column":131}}],"line":51},"7":{"loc":{"start":{"line":53,"column":17},"end":{"line":56,"column":131}},"type":"if","locations":[{"start":{"line":53,"column":17},"end":{"line":56,"column":131}},{"start":{"line":53,"column":17},"end":{"line":56,"column":131}}],"line":53},"8":{"loc":{"start":{"line":57,"column":12},"end":{"line":59,"column":13}},"type":"if","locations":[{"start":{"line":57,"column":12},"end":{"line":59,"column":13}},{"start":{"line":57,"column":12},"end":{"line":59,"column":13}}],"line":57},"9":{"loc":{"start":{"line":65,"column":12},"end":{"line":76,"column":13}},"type":"if","locations":[{"start":{"line":65,"column":12},"end":{"line":76,"column":13}},{"start":{"line":65,"column":12},"end":{"line":76,"column":13}}],"line":65},"10":{"loc":{"start":{"line":68,"column":26},"end":{"line":68,"column":152}},"type":"cond-expr","locations":[{"start":{"line":68,"column":133},"end":{"line":68,"column":139}},{"start":{"line":68,"column":142},"end":{"line":68,"column":152}}],"line":68},"11":{"loc":{"start":{"line":68,"column":26},"end":{"line":68,"column":130}},"type":"binary-expr","locations":[{"start":{"line":68,"column":26},"end":{"line":68,"column":113}},{"start":{"line":68,"column":117},"end":{"line":68,"column":130}}],"line":68},"12":{"loc":{"start":{"line":68,"column":32},"end":{"line":68,"column":103}},"type":"cond-expr","locations":[{"start":{"line":68,"column":86},"end":{"line":68,"column":92}},{"start":{"line":68,"column":95},"end":{"line":68,"column":103}}],"line":68},"13":{"loc":{"start":{"line":68,"column":32},"end":{"line":68,"column":83}},"type":"binary-expr","locations":[{"start":{"line":68,"column":32},"end":{"line":68,"column":66}},{"start":{"line":68,"column":70},"end":{"line":68,"column":83}}],"line":68},"14":{"loc":{"start":{"line":72,"column":16},"end":{"line":75,"column":17}},"type":"if","locations":[{"start":{"line":72,"column":16},"end":{"line":75,"column":17}},{"start":{"line":72,"column":16},"end":{"line":75,"column":17}}],"line":72},"15":{"loc":{"start":{"line":99,"column":8},"end":{"line":100,"column":66}},"type":"if","locations":[{"start":{"line":99,"column":8},"end":{"line":100,"column":66}},{"start":{"line":99,"column":8},"end":{"line":100,"column":66}}],"line":99},"16":{"loc":{"start":{"line":210,"column":8},"end":{"line":223,"column":9}},"type":"if","locations":[{"start":{"line":210,"column":8},"end":{"line":223,"column":9}},{"start":{"line":210,"column":8},"end":{"line":223,"column":9}}],"line":210},"17":{"loc":{"start":{"line":224,"column":8},"end":{"line":230,"column":9}},"type":"if","locations":[{"start":{"line":224,"column":8},"end":{"line":230,"column":9}},{"start":{"line":224,"column":8},"end":{"line":230,"column":9}}],"line":224}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":1,"13":1,"14":1,"15":0,"16":1,"17":0,"18":1,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":0,"33":0,"34":0,"35":0,"36":1,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":1,"50":1,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[0,1],"4":[0,1],"5":[0,1],"6":[1,0],"7":[0,0],"8":[0,0],"9":[1,0],"10":[1,0],"11":[1,1],"12":[1,0],"13":[1,1],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0]},"inputSourceMap":{"version":3,"file":"ContextCaptureService.js","sourceRoot":"","sources":["../../src/cccs/ContextCaptureService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { JobProgress, JobState } from \"../CommonData\";\r\nimport { CCCostParameters, CCJobProperties, CCJobSettings, CCJobType, CCWorkspaceProperties } from \"./Utils\";\r\nimport { BentleyError, BentleyStatus } from \"@itwin/core-bentley\";\r\nimport { AuthorizationClient } from \"@itwin/core-common\";\r\nimport axios from \"axios\";\r\n\r\n/**\r\n * Service handling communication with Context Capture Service\r\n */\r\nexport class ContextCaptureService {\r\n    /** Authorization client to generate access token. */\r\n    private authorizationClient: AuthorizationClient;\r\n\r\n    /** Target service url. */\r\n    private serviceUrl = \"https://api.bentley.com/contextcapture\";\r\n\r\n    /**\r\n     * Create a new ContextCaptureService.\r\n     * @param {AuthorizationClient} authorizationClient Authorization client to generate access token.\r\n     * @param {string} env (optional) Target environment.\r\n     */\r\n    constructor(authorizationClient: AuthorizationClient, env?: string) {\r\n        this.authorizationClient = authorizationClient;\r\n        if(env)\r\n            this.serviceUrl = \"https://\" + env + \"api.bentley.com/contextcapture\";\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {string} apiOperationUrl API operation url.\r\n     * @param {string} method HTTP method.\r\n     * @param {unknown} payload (optional) Request body.\r\n     * @returns {any} Request response.\r\n     */\r\n    private async submitRequest(apiOperationUrl: string, method: string, okRet: number[], payload?: unknown): Promise<any> {\r\n        try {\r\n            let response;\r\n            const url = this.serviceUrl + \"/\" + apiOperationUrl;\r\n            const headers =\r\n            {\r\n                \"content-type\": \"application/json\",\r\n                \"accept\": \"application/vnd.bentley.v1+json\",\r\n                \"authorization\": await this.authorizationClient.getAccessToken(),\r\n            };\r\n\r\n            if(method === \"GET\")\r\n                response = await axios.get(url, {headers, url, method});\r\n            else if(method === \"DELETE\")\r\n                response = await axios.delete(url, {headers, url, method});\r\n            else if(method === \"POST\")\r\n                response = await axios.post(url, payload, {headers, url, method});\r\n            else if(method === \"PATCH\")\r\n                response = await axios.patch(url, payload, {headers, url, method});\r\n            else \r\n                return Promise.reject(new BentleyError(BentleyStatus.ERROR, \"Wrong request method\"));\r\n\r\n            if (!okRet.includes(response.status)) {\r\n                return new BentleyError(response.status, response.statusText);\r\n            }\r\n\r\n            return response.data;\r\n\r\n        }\r\n        catch (error: any) {\r\n            let status = 422;\r\n            let message = \"Unknown error. Please ensure that the request is valid.\";\r\n\r\n            if (axios.isAxiosError(error)) {\r\n                const axiosResponse = error.response!;\r\n                status = axiosResponse.status;\r\n                message = axiosResponse.data?.error?.message;\r\n            } \r\n            else {\r\n                const bentleyError = error as BentleyError;\r\n                if (bentleyError !== undefined) {\r\n                    status = bentleyError.errorNumber;\r\n                    message = bentleyError.message;\r\n                }\r\n            }\r\n            return Promise.reject(new BentleyError(status, message));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get scopes required for this service.\r\n     * @returns {Set<string>} Set of required minimal scopes.\r\n     */\r\n    public static getScopes(): Set<string> {\r\n        return new Set([\"contextcapture:read\", \"contextcapture:modify\"]);\r\n    }\r\n\r\n    /**\r\n     * Create a workspace corresponding to the given parameters.\r\n     * @param {string} name Workspace name.\r\n     * @param {string} iTwinId iTwinId associated to the workspace.\r\n     * @param {string} contextCaptureVersion (optional) Version of ContextCapture to be used for this workspace.\r\n     * @returns {string} created workspace id.\r\n     */\r\n    public async createWorkspace(name: string, iTwinId: string, contextCaptureVersion?: string): Promise<string> {\r\n        let body: any = {\r\n            \"name\": name,\r\n            \"iTwinId\": iTwinId           \r\n        };\r\n        if(contextCaptureVersion)\r\n            body[\"contextCaptureVersion\"] = contextCaptureVersion;\r\n        \r\n        try {\r\n            const response = await this.submitRequest(\"workspaces\", \"POST\", [201], body);\r\n            return response[\"workspace\"][\"id\"];\r\n        }\r\n        catch (error: any) {\r\n            return Promise.reject(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a workspace.\r\n     * @param {string} workspaceId The ID of the relevant workspace.\r\n     */\r\n    public async deleteWorkspace(workspaceId: string): Promise<void> {\r\n        return await this.submitRequest(\"workspaces/\" + workspaceId, \"DELETE\", [204]);\r\n    }\r\n\r\n    /**\r\n     * Get a workspace.\r\n     * @param {string} workspaceId The ID of the relevant workspace.\r\n     * @returns {CCWorkspaceProperties} Workspace properties.\r\n     */\r\n    public async getWorkspace(workspaceId: string): Promise<CCWorkspaceProperties> {\r\n        const response = await this.submitRequest(\"workspaces/\" + workspaceId, \"GET\", [200]);\r\n        return {\r\n            id: response[\"workspace\"][\"id\"],\r\n            createdDateTime: response[\"workspace\"][\"createdDateTime\"],\r\n            name: response[\"workspace\"][\"name\"],\r\n            iTwinId: response[\"workspace\"][\"iTwinId\"],\r\n            contextCaptureVersion: response[\"workspace\"][\"contextCaptureVersion\"],\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Create a job corresponding to the given settings.\r\n     * @param {CCJobType} type Job type.\r\n     * @param {CCJobSettings} settings Settings for the job.\r\n     * @param {string} name Name for the job.\r\n     * @param {string} workspaceId Workspace associated to this job.\r\n     * @returns {string} Created job id.\r\n     */\r\n    public async createJob(type: CCJobType, settings: CCJobSettings, name: string, workspaceId: string): Promise<string> {\r\n        const settingsJson = settings.toJson();\r\n        console.log(\"settings : \", settingsJson);\r\n        const body = {\r\n            \"type\": type,\r\n            \"name\": name,\r\n            \"inputs\": settingsJson.inputs,\r\n            \"settings\": settingsJson.settings,\r\n            \"workspaceId\": workspaceId,\r\n        };\r\n\r\n        const response = await this.submitRequest(\"jobs/\", \"POST\", [201], body);\r\n        return response[\"job\"][\"id\"];\r\n    }\r\n\r\n    /**\r\n     * Submit a job.\r\n     * @param {string} jobId The ID of the relevant job.\r\n     */\r\n    public async submitJob(jobId: string): Promise<void> {\r\n        const body = { \"state\": \"active\" };\r\n        return await this.submitRequest(\"jobs/\" + jobId, \"PATCH\", [200], body);\r\n    }\r\n\r\n    /**\r\n     * Cancel a job.\r\n     * @param {string} id The ID of the relevant job.\r\n     */\r\n    public async cancelJob(id: string): Promise<void> {\r\n        const body = {\r\n            \"state\": \"cancelled\",\r\n        };\r\n        return await this.submitRequest(\"jobs/\" + id, \"PATCH\", [200], body);\r\n    }\r\n\r\n    /**\r\n     * Delete a job.\r\n     * @param {string} id The ID of the relevant job.\r\n     */\r\n    public async deleteJob(id: string): Promise<void> {\r\n        return await this.submitRequest(\"jobs/\" + id, \"DELETE\", [204]);\r\n    }\r\n\r\n    /**\r\n     * Get progress for a given job.\r\n     * @param {string} id The ID of the relevant job.\r\n     * @returns {JobProgress} The progress for the job.\r\n     */\r\n    public async getJobProgress(id: string): Promise<JobProgress> {\r\n        const response = await this.submitRequest(\"jobs/\" + id + \"/progress\", \"GET\", [200]);\r\n        const progress = response[\"jobProgress\"];\r\n        const state = (progress[\"state\"] as string).toLowerCase();\r\n        return { state: state as JobState, progress: JSON.parse(progress[\"percentage\"]), step: progress[\"step\"] };\r\n    }\r\n\r\n    /**\r\n     * Get all properties for a given job.\r\n     * @param {string} id The ID of the relevant job.\r\n     * @returns {RDAJobProperties} The job properties.\r\n     */\r\n    public async getJobProperties(id: string): Promise<CCJobProperties> {\r\n        const response = await this.submitRequest(\"jobs/\" + id, \"GET\", [200]);\r\n        const job = response[\"job\"];\r\n        const jobProperties: CCJobProperties = {\r\n            name: job[\"name\"],\r\n            type: job[\"type\"],\r\n            iTwinId: job[\"iTwinId\"],\r\n            settings: new CCJobSettings(),\r\n            workspaceId: job[\"workspaceId\"],\r\n            id: job[\"id\"],\r\n            email: job[\"email\"],\r\n            state: job[\"state\"],\r\n            location: job[\"dataCenter\"],\r\n            estimatedCost: job[\"estimatedCost\"],\r\n        };\r\n\r\n        const settings = await CCJobSettings.fromJson(job);\r\n        jobProperties.settings = settings;\r\n\r\n        if (job[\"executionInformation\"]) {\r\n            jobProperties.dates = {\r\n                createdDateTime: job[\"createdDateTime\"],\r\n                submissionDateTime: job[\"executionInformation\"][\"submittedDateTime\"],\r\n                startedDateTime: job[\"executionInformation\"][\"startedDateTime\"],\r\n                endedDateTime: job[\"executionInformation\"][\"endedDateTime\"],\r\n            };\r\n            jobProperties.executionCost = job[\"executionInformation\"][\"estimatedUnits\"];\r\n        }\r\n        else {\r\n            jobProperties.dates = {\r\n                createdDateTime: job[\"createdDateTime\"]\r\n            };\r\n        }\r\n\r\n        if (job[\"costEstimationParameters\"]) {\r\n            jobProperties.costEstimationParameters = {\r\n                gigaPixels: job[\"costEstimationParameters\"][\"gigaPixels\"],\r\n                megaPoints: job[\"costEstimationParameters\"][\"megaPoints\"],\r\n                meshQuality: job[\"costEstimationParameters\"][\"meshQuality\"],\r\n            };\r\n        }\r\n\r\n        return jobProperties;\r\n    }\r\n\r\n    /**\r\n     * Get the estimated cost of a given job.\r\n     * @param {string} id The ID of the relevant job.\r\n     * @returns {number} The job cost estimation.\r\n     */\r\n    public async getJobEstimatedCost(id: string, costParameters: CCCostParameters): Promise<number> {\r\n        const body = {\r\n            costEstimationParameters: {\r\n                gigaPixels: costParameters.gigaPixels,\r\n                megaPoints: costParameters.megaPoints,\r\n                meshQuality: costParameters.meshQuality,\r\n            }\r\n        };\r\n        const response = await this.submitRequest(\"jobs/\" + id, \"PATCH\", [200], body);\r\n        return response.estimatedCost;\r\n    }\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"457d240cf406e3a78c322e08fd4ff87413e27ef6","contentHash":"43293638815f9ed2590b13f11bf572562c10fbf0662dceef54b4073d8fb524e7"},"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\cccs\\Utils.js":{"path":"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\cccs\\Utils.js","statementMap":{"0":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":74}},"2":{"start":{"line":8,"column":23},"end":{"line":8,"column":53}},"3":{"start":{"line":11,"column":0},"end":{"line":16,"column":62}},"4":{"start":{"line":12,"column":4},"end":{"line":12,"column":41}},"5":{"start":{"line":13,"column":4},"end":{"line":13,"column":45}},"6":{"start":{"line":14,"column":4},"end":{"line":14,"column":51}},"7":{"start":{"line":15,"column":4},"end":{"line":15,"column":31}},"8":{"start":{"line":19,"column":0},"end":{"line":24,"column":71}},"9":{"start":{"line":20,"column":4},"end":{"line":20,"column":40}},"10":{"start":{"line":21,"column":4},"end":{"line":21,"column":36}},"11":{"start":{"line":22,"column":4},"end":{"line":22,"column":38}},"12":{"start":{"line":23,"column":4},"end":{"line":23,"column":36}},"13":{"start":{"line":34,"column":8},"end":{"line":34,"column":31}},"14":{"start":{"line":39,"column":8},"end":{"line":39,"column":31}},"15":{"start":{"line":44,"column":8},"end":{"line":44,"column":26}},"16":{"start":{"line":49,"column":8},"end":{"line":49,"column":26}},"17":{"start":{"line":54,"column":8},"end":{"line":54,"column":39}},"18":{"start":{"line":59,"column":8},"end":{"line":59,"column":32}},"19":{"start":{"line":64,"column":8},"end":{"line":64,"column":22}},"20":{"start":{"line":69,"column":8},"end":{"line":69,"column":29}},"21":{"start":{"line":74,"column":8},"end":{"line":74,"column":22}},"22":{"start":{"line":79,"column":8},"end":{"line":79,"column":22}},"23":{"start":{"line":84,"column":8},"end":{"line":84,"column":22}},"24":{"start":{"line":89,"column":8},"end":{"line":89,"column":23}},"25":{"start":{"line":94,"column":8},"end":{"line":94,"column":22}},"26":{"start":{"line":99,"column":8},"end":{"line":99,"column":32}},"27":{"start":{"line":104,"column":8},"end":{"line":104,"column":22}},"28":{"start":{"line":109,"column":8},"end":{"line":109,"column":22}},"29":{"start":{"line":114,"column":8},"end":{"line":114,"column":22}},"30":{"start":{"line":124,"column":8},"end":{"line":124,"column":25}},"31":{"start":{"line":130,"column":8},"end":{"line":130,"column":39}},"32":{"start":{"line":135,"column":8},"end":{"line":135,"column":48}},"33":{"start":{"line":140,"column":8},"end":{"line":140,"column":25}},"34":{"start":{"line":147,"column":21},"end":{"line":147,"column":23}},"35":{"start":{"line":148,"column":8},"end":{"line":148,"column":28}},"36":{"start":{"line":149,"column":8},"end":{"line":151,"column":9}},"37":{"start":{"line":150,"column":12},"end":{"line":150,"column":49}},"38":{"start":{"line":152,"column":8},"end":{"line":152,"column":30}},"39":{"start":{"line":153,"column":8},"end":{"line":153,"column":41}},"40":{"start":{"line":154,"column":8},"end":{"line":155,"column":64}},"41":{"start":{"line":155,"column":12},"end":{"line":155,"column":64}},"42":{"start":{"line":156,"column":8},"end":{"line":157,"column":52}},"43":{"start":{"line":157,"column":12},"end":{"line":157,"column":52}},"44":{"start":{"line":158,"column":8},"end":{"line":159,"column":57}},"45":{"start":{"line":159,"column":12},"end":{"line":159,"column":57}},"46":{"start":{"line":160,"column":8},"end":{"line":161,"column":70}},"47":{"start":{"line":161,"column":12},"end":{"line":161,"column":70}},"48":{"start":{"line":162,"column":8},"end":{"line":163,"column":52}},"49":{"start":{"line":163,"column":12},"end":{"line":163,"column":52}},"50":{"start":{"line":164,"column":8},"end":{"line":165,"column":52}},"51":{"start":{"line":165,"column":12},"end":{"line":165,"column":52}},"52":{"start":{"line":166,"column":8},"end":{"line":167,"column":62}},"53":{"start":{"line":167,"column":12},"end":{"line":167,"column":62}},"54":{"start":{"line":168,"column":8},"end":{"line":169,"column":52}},"55":{"start":{"line":169,"column":12},"end":{"line":169,"column":52}},"56":{"start":{"line":170,"column":8},"end":{"line":171,"column":52}},"57":{"start":{"line":171,"column":12},"end":{"line":171,"column":52}},"58":{"start":{"line":172,"column":8},"end":{"line":173,"column":52}},"59":{"start":{"line":173,"column":12},"end":{"line":173,"column":52}},"60":{"start":{"line":174,"column":8},"end":{"line":175,"column":63}},"61":{"start":{"line":175,"column":12},"end":{"line":175,"column":63}},"62":{"start":{"line":176,"column":8},"end":{"line":177,"column":63}},"63":{"start":{"line":177,"column":12},"end":{"line":177,"column":63}},"64":{"start":{"line":178,"column":8},"end":{"line":179,"column":52}},"65":{"start":{"line":179,"column":12},"end":{"line":179,"column":52}},"66":{"start":{"line":180,"column":8},"end":{"line":181,"column":52}},"67":{"start":{"line":181,"column":12},"end":{"line":181,"column":52}},"68":{"start":{"line":182,"column":8},"end":{"line":183,"column":52}},"69":{"start":{"line":183,"column":12},"end":{"line":183,"column":52}},"70":{"start":{"line":184,"column":8},"end":{"line":185,"column":52}},"71":{"start":{"line":185,"column":12},"end":{"line":185,"column":52}},"72":{"start":{"line":186,"column":8},"end":{"line":187,"column":61}},"73":{"start":{"line":187,"column":12},"end":{"line":187,"column":61}},"74":{"start":{"line":188,"column":8},"end":{"line":193,"column":9}},"75":{"start":{"line":189,"column":12},"end":{"line":192,"column":14}},"76":{"start":{"line":194,"column":8},"end":{"line":196,"column":9}},"77":{"start":{"line":195,"column":12},"end":{"line":195,"column":59}},"78":{"start":{"line":197,"column":8},"end":{"line":199,"column":9}},"79":{"start":{"line":198,"column":12},"end":{"line":198,"column":65}},"80":{"start":{"line":200,"column":8},"end":{"line":200,"column":20}},"81":{"start":{"line":208,"column":31},"end":{"line":208,"column":50}},"82":{"start":{"line":209,"column":8},"end":{"line":211,"column":9}},"83":{"start":{"line":210,"column":12},"end":{"line":210,"column":52}},"84":{"start":{"line":212,"column":28},"end":{"line":212,"column":66}},"85":{"start":{"line":213,"column":8},"end":{"line":250,"column":9}},"86":{"start":{"line":214,"column":12},"end":{"line":249,"column":161}},"87":{"start":{"line":215,"column":16},"end":{"line":215,"column":68}},"88":{"start":{"line":216,"column":17},"end":{"line":249,"column":161}},"89":{"start":{"line":217,"column":16},"end":{"line":217,"column":58}},"90":{"start":{"line":218,"column":17},"end":{"line":249,"column":161}},"91":{"start":{"line":219,"column":16},"end":{"line":219,"column":59}},"92":{"start":{"line":220,"column":17},"end":{"line":249,"column":161}},"93":{"start":{"line":221,"column":16},"end":{"line":221,"column":58}},"94":{"start":{"line":222,"column":17},"end":{"line":249,"column":161}},"95":{"start":{"line":223,"column":16},"end":{"line":223,"column":58}},"96":{"start":{"line":224,"column":17},"end":{"line":249,"column":161}},"97":{"start":{"line":225,"column":16},"end":{"line":225,"column":68}},"98":{"start":{"line":226,"column":17},"end":{"line":249,"column":161}},"99":{"start":{"line":227,"column":16},"end":{"line":227,"column":58}},"100":{"start":{"line":228,"column":17},"end":{"line":249,"column":161}},"101":{"start":{"line":229,"column":16},"end":{"line":229,"column":58}},"102":{"start":{"line":230,"column":17},"end":{"line":249,"column":161}},"103":{"start":{"line":231,"column":16},"end":{"line":231,"column":58}},"104":{"start":{"line":232,"column":17},"end":{"line":249,"column":161}},"105":{"start":{"line":233,"column":16},"end":{"line":233,"column":67}},"106":{"start":{"line":234,"column":17},"end":{"line":249,"column":161}},"107":{"start":{"line":235,"column":16},"end":{"line":235,"column":65}},"108":{"start":{"line":236,"column":17},"end":{"line":249,"column":161}},"109":{"start":{"line":237,"column":16},"end":{"line":237,"column":58}},"110":{"start":{"line":238,"column":17},"end":{"line":249,"column":161}},"111":{"start":{"line":239,"column":16},"end":{"line":239,"column":58}},"112":{"start":{"line":240,"column":17},"end":{"line":249,"column":161}},"113":{"start":{"line":241,"column":16},"end":{"line":241,"column":62}},"114":{"start":{"line":242,"column":17},"end":{"line":249,"column":161}},"115":{"start":{"line":243,"column":16},"end":{"line":243,"column":62}},"116":{"start":{"line":244,"column":17},"end":{"line":249,"column":161}},"117":{"start":{"line":245,"column":16},"end":{"line":245,"column":67}},"118":{"start":{"line":246,"column":17},"end":{"line":249,"column":161}},"119":{"start":{"line":247,"column":16},"end":{"line":247,"column":75}},"120":{"start":{"line":249,"column":16},"end":{"line":249,"column":161}},"121":{"start":{"line":251,"column":8},"end":{"line":255,"column":14}},"122":{"start":{"line":252,"column":12},"end":{"line":255,"column":14}},"123":{"start":{"line":256,"column":8},"end":{"line":257,"column":80}},"124":{"start":{"line":257,"column":12},"end":{"line":257,"column":80}},"125":{"start":{"line":258,"column":8},"end":{"line":259,"column":86}},"126":{"start":{"line":259,"column":12},"end":{"line":259,"column":86}},"127":{"start":{"line":260,"column":8},"end":{"line":260,"column":30}},"128":{"start":{"line":263,"column":0},"end":{"line":263,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":1},"end":{"line":11,"column":2}},"loc":{"start":{"line":11,"column":22},"end":{"line":16,"column":1}},"line":11},"1":{"name":"(anonymous_1)","decl":{"start":{"line":19,"column":1},"end":{"line":19,"column":2}},"loc":{"start":{"line":19,"column":25},"end":{"line":24,"column":1}},"line":19},"2":{"name":"(anonymous_2)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":18},"end":{"line":115,"column":5}},"line":29},"3":{"name":"(anonymous_3)","decl":{"start":{"line":119,"column":4},"end":{"line":119,"column":5}},"loc":{"start":{"line":119,"column":18},"end":{"line":141,"column":5}},"line":119},"4":{"name":"(anonymous_4)","decl":{"start":{"line":146,"column":4},"end":{"line":146,"column":5}},"loc":{"start":{"line":146,"column":13},"end":{"line":201,"column":5}},"line":146},"5":{"name":"(anonymous_5)","decl":{"start":{"line":207,"column":4},"end":{"line":207,"column":5}},"loc":{"start":{"line":207,"column":40},"end":{"line":261,"column":5}},"line":207}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":15},"end":{"line":16,"column":60}},"type":"binary-expr","locations":[{"start":{"line":16,"column":15},"end":{"line":16,"column":32}},{"start":{"line":16,"column":37},"end":{"line":16,"column":59}}],"line":16},"1":{"loc":{"start":{"line":24,"column":18},"end":{"line":24,"column":69}},"type":"binary-expr","locations":[{"start":{"line":24,"column":18},"end":{"line":24,"column":38}},{"start":{"line":24,"column":43},"end":{"line":24,"column":68}}],"line":24},"2":{"loc":{"start":{"line":154,"column":8},"end":{"line":155,"column":64}},"type":"if","locations":[{"start":{"line":154,"column":8},"end":{"line":155,"column":64}},{"start":{"line":154,"column":8},"end":{"line":155,"column":64}}],"line":154},"3":{"loc":{"start":{"line":156,"column":8},"end":{"line":157,"column":52}},"type":"if","locations":[{"start":{"line":156,"column":8},"end":{"line":157,"column":52}},{"start":{"line":156,"column":8},"end":{"line":157,"column":52}}],"line":156},"4":{"loc":{"start":{"line":158,"column":8},"end":{"line":159,"column":57}},"type":"if","locations":[{"start":{"line":158,"column":8},"end":{"line":159,"column":57}},{"start":{"line":158,"column":8},"end":{"line":159,"column":57}}],"line":158},"5":{"loc":{"start":{"line":160,"column":8},"end":{"line":161,"column":70}},"type":"if","locations":[{"start":{"line":160,"column":8},"end":{"line":161,"column":70}},{"start":{"line":160,"column":8},"end":{"line":161,"column":70}}],"line":160},"6":{"loc":{"start":{"line":162,"column":8},"end":{"line":163,"column":52}},"type":"if","locations":[{"start":{"line":162,"column":8},"end":{"line":163,"column":52}},{"start":{"line":162,"column":8},"end":{"line":163,"column":52}}],"line":162},"7":{"loc":{"start":{"line":164,"column":8},"end":{"line":165,"column":52}},"type":"if","locations":[{"start":{"line":164,"column":8},"end":{"line":165,"column":52}},{"start":{"line":164,"column":8},"end":{"line":165,"column":52}}],"line":164},"8":{"loc":{"start":{"line":166,"column":8},"end":{"line":167,"column":62}},"type":"if","locations":[{"start":{"line":166,"column":8},"end":{"line":167,"column":62}},{"start":{"line":166,"column":8},"end":{"line":167,"column":62}}],"line":166},"9":{"loc":{"start":{"line":168,"column":8},"end":{"line":169,"column":52}},"type":"if","locations":[{"start":{"line":168,"column":8},"end":{"line":169,"column":52}},{"start":{"line":168,"column":8},"end":{"line":169,"column":52}}],"line":168},"10":{"loc":{"start":{"line":170,"column":8},"end":{"line":171,"column":52}},"type":"if","locations":[{"start":{"line":170,"column":8},"end":{"line":171,"column":52}},{"start":{"line":170,"column":8},"end":{"line":171,"column":52}}],"line":170},"11":{"loc":{"start":{"line":172,"column":8},"end":{"line":173,"column":52}},"type":"if","locations":[{"start":{"line":172,"column":8},"end":{"line":173,"column":52}},{"start":{"line":172,"column":8},"end":{"line":173,"column":52}}],"line":172},"12":{"loc":{"start":{"line":174,"column":8},"end":{"line":175,"column":63}},"type":"if","locations":[{"start":{"line":174,"column":8},"end":{"line":175,"column":63}},{"start":{"line":174,"column":8},"end":{"line":175,"column":63}}],"line":174},"13":{"loc":{"start":{"line":176,"column":8},"end":{"line":177,"column":63}},"type":"if","locations":[{"start":{"line":176,"column":8},"end":{"line":177,"column":63}},{"start":{"line":176,"column":8},"end":{"line":177,"column":63}}],"line":176},"14":{"loc":{"start":{"line":178,"column":8},"end":{"line":179,"column":52}},"type":"if","locations":[{"start":{"line":178,"column":8},"end":{"line":179,"column":52}},{"start":{"line":178,"column":8},"end":{"line":179,"column":52}}],"line":178},"15":{"loc":{"start":{"line":180,"column":8},"end":{"line":181,"column":52}},"type":"if","locations":[{"start":{"line":180,"column":8},"end":{"line":181,"column":52}},{"start":{"line":180,"column":8},"end":{"line":181,"column":52}}],"line":180},"16":{"loc":{"start":{"line":182,"column":8},"end":{"line":183,"column":52}},"type":"if","locations":[{"start":{"line":182,"column":8},"end":{"line":183,"column":52}},{"start":{"line":182,"column":8},"end":{"line":183,"column":52}}],"line":182},"17":{"loc":{"start":{"line":184,"column":8},"end":{"line":185,"column":52}},"type":"if","locations":[{"start":{"line":184,"column":8},"end":{"line":185,"column":52}},{"start":{"line":184,"column":8},"end":{"line":185,"column":52}}],"line":184},"18":{"loc":{"start":{"line":186,"column":8},"end":{"line":187,"column":61}},"type":"if","locations":[{"start":{"line":186,"column":8},"end":{"line":187,"column":61}},{"start":{"line":186,"column":8},"end":{"line":187,"column":61}}],"line":186},"19":{"loc":{"start":{"line":188,"column":8},"end":{"line":193,"column":9}},"type":"if","locations":[{"start":{"line":188,"column":8},"end":{"line":193,"column":9}},{"start":{"line":188,"column":8},"end":{"line":193,"column":9}}],"line":188},"20":{"loc":{"start":{"line":194,"column":8},"end":{"line":196,"column":9}},"type":"if","locations":[{"start":{"line":194,"column":8},"end":{"line":196,"column":9}},{"start":{"line":194,"column":8},"end":{"line":196,"column":9}}],"line":194},"21":{"loc":{"start":{"line":197,"column":8},"end":{"line":199,"column":9}},"type":"if","locations":[{"start":{"line":197,"column":8},"end":{"line":199,"column":9}},{"start":{"line":197,"column":8},"end":{"line":199,"column":9}}],"line":197},"22":{"loc":{"start":{"line":214,"column":12},"end":{"line":249,"column":161}},"type":"if","locations":[{"start":{"line":214,"column":12},"end":{"line":249,"column":161}},{"start":{"line":214,"column":12},"end":{"line":249,"column":161}}],"line":214},"23":{"loc":{"start":{"line":216,"column":17},"end":{"line":249,"column":161}},"type":"if","locations":[{"start":{"line":216,"column":17},"end":{"line":249,"column":161}},{"start":{"line":216,"column":17},"end":{"line":249,"column":161}}],"line":216},"24":{"loc":{"start":{"line":218,"column":17},"end":{"line":249,"column":161}},"type":"if","locations":[{"start":{"line":218,"column":17},"end":{"line":249,"column":161}},{"start":{"line":218,"column":17},"end":{"line":249,"column":161}}],"line":218},"25":{"loc":{"start":{"line":220,"column":17},"end":{"line":249,"column":161}},"type":"if","locations":[{"start":{"line":220,"column":17},"end":{"line":249,"column":161}},{"start":{"line":220,"column":17},"end":{"line":249,"column":161}}],"line":220},"26":{"loc":{"start":{"line":222,"column":17},"end":{"line":249,"column":161}},"type":"if","locations":[{"start":{"line":222,"column":17},"end":{"line":249,"column":161}},{"start":{"line":222,"column":17},"end":{"line":249,"column":161}}],"line":222},"27":{"loc":{"start":{"line":224,"column":17},"end":{"line":249,"column":161}},"type":"if","locations":[{"start":{"line":224,"column":17},"end":{"line":249,"column":161}},{"start":{"line":224,"column":17},"end":{"line":249,"column":161}}],"line":224},"28":{"loc":{"start":{"line":226,"column":17},"end":{"line":249,"column":161}},"type":"if","locations":[{"start":{"line":226,"column":17},"end":{"line":249,"column":161}},{"start":{"line":226,"column":17},"end":{"line":249,"column":161}}],"line":226},"29":{"loc":{"start":{"line":228,"column":17},"end":{"line":249,"column":161}},"type":"if","locations":[{"start":{"line":228,"column":17},"end":{"line":249,"column":161}},{"start":{"line":228,"column":17},"end":{"line":249,"column":161}}],"line":228},"30":{"loc":{"start":{"line":230,"column":17},"end":{"line":249,"column":161}},"type":"if","locations":[{"start":{"line":230,"column":17},"end":{"line":249,"column":161}},{"start":{"line":230,"column":17},"end":{"line":249,"column":161}}],"line":230},"31":{"loc":{"start":{"line":232,"column":17},"end":{"line":249,"column":161}},"type":"if","locations":[{"start":{"line":232,"column":17},"end":{"line":249,"column":161}},{"start":{"line":232,"column":17},"end":{"line":249,"column":161}}],"line":232},"32":{"loc":{"start":{"line":234,"column":17},"end":{"line":249,"column":161}},"type":"if","locations":[{"start":{"line":234,"column":17},"end":{"line":249,"column":161}},{"start":{"line":234,"column":17},"end":{"line":249,"column":161}}],"line":234},"33":{"loc":{"start":{"line":236,"column":17},"end":{"line":249,"column":161}},"type":"if","locations":[{"start":{"line":236,"column":17},"end":{"line":249,"column":161}},{"start":{"line":236,"column":17},"end":{"line":249,"column":161}}],"line":236},"34":{"loc":{"start":{"line":238,"column":17},"end":{"line":249,"column":161}},"type":"if","locations":[{"start":{"line":238,"column":17},"end":{"line":249,"column":161}},{"start":{"line":238,"column":17},"end":{"line":249,"column":161}}],"line":238},"35":{"loc":{"start":{"line":240,"column":17},"end":{"line":249,"column":161}},"type":"if","locations":[{"start":{"line":240,"column":17},"end":{"line":249,"column":161}},{"start":{"line":240,"column":17},"end":{"line":249,"column":161}}],"line":240},"36":{"loc":{"start":{"line":242,"column":17},"end":{"line":249,"column":161}},"type":"if","locations":[{"start":{"line":242,"column":17},"end":{"line":249,"column":161}},{"start":{"line":242,"column":17},"end":{"line":249,"column":161}}],"line":242},"37":{"loc":{"start":{"line":244,"column":17},"end":{"line":249,"column":161}},"type":"if","locations":[{"start":{"line":244,"column":17},"end":{"line":249,"column":161}},{"start":{"line":244,"column":17},"end":{"line":249,"column":161}}],"line":244},"38":{"loc":{"start":{"line":246,"column":17},"end":{"line":249,"column":161}},"type":"if","locations":[{"start":{"line":246,"column":17},"end":{"line":249,"column":161}},{"start":{"line":246,"column":17},"end":{"line":249,"column":161}}],"line":246},"39":{"loc":{"start":{"line":251,"column":8},"end":{"line":255,"column":14}},"type":"if","locations":[{"start":{"line":251,"column":8},"end":{"line":255,"column":14}},{"start":{"line":251,"column":8},"end":{"line":255,"column":14}}],"line":251},"40":{"loc":{"start":{"line":256,"column":8},"end":{"line":257,"column":80}},"type":"if","locations":[{"start":{"line":256,"column":8},"end":{"line":257,"column":80}},{"start":{"line":256,"column":8},"end":{"line":257,"column":80}}],"line":256},"41":{"loc":{"start":{"line":258,"column":8},"end":{"line":259,"column":86}},"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":259,"column":86}},{"start":{"line":258,"column":8},"end":{"line":259,"column":86}}],"line":258}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":4,"14":4,"15":4,"16":4,"17":4,"18":4,"19":4,"20":4,"21":4,"22":4,"23":4,"24":4,"25":4,"26":4,"27":4,"28":4,"29":4,"30":4,"31":4,"32":4,"33":4,"34":2,"35":2,"36":2,"37":4,"38":2,"39":2,"40":2,"41":1,"42":2,"43":1,"44":2,"45":1,"46":2,"47":1,"48":2,"49":1,"50":2,"51":1,"52":2,"53":1,"54":2,"55":1,"56":2,"57":2,"58":2,"59":1,"60":2,"61":2,"62":2,"63":1,"64":2,"65":1,"66":2,"67":1,"68":2,"69":1,"70":2,"71":1,"72":2,"73":1,"74":2,"75":2,"76":2,"77":2,"78":2,"79":2,"80":2,"81":2,"82":2,"83":4,"84":2,"85":2,"86":18,"87":1,"88":17,"89":1,"90":16,"91":1,"92":15,"93":1,"94":14,"95":1,"96":13,"97":1,"98":12,"99":1,"100":11,"101":1,"102":10,"103":1,"104":9,"105":1,"106":8,"107":1,"108":7,"109":1,"110":6,"111":1,"112":5,"113":1,"114":4,"115":1,"116":3,"117":1,"118":2,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1},"f":{"0":1,"1":1,"2":4,"3":4,"4":2,"5":2},"b":{"0":[1,1],"1":[1,1],"2":[1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[2,0],"11":[1,1],"12":[2,0],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1],"18":[1,1],"19":[2,0],"20":[2,0],"21":[2,0],"22":[1,17],"23":[1,16],"24":[1,15],"25":[1,14],"26":[1,13],"27":[1,12],"28":[1,11],"29":[1,10],"30":[1,9],"31":[1,8],"32":[1,7],"33":[1,6],"34":[1,5],"35":[1,4],"36":[1,3],"37":[1,2],"38":[1,1],"39":[1,0],"40":[1,0],"41":[1,0]},"inputSourceMap":{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../../src/cccs/Utils.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { BentleyError, BentleyStatus } from \"@itwin/core-bentley\";\r\nimport { JobDates } from \"../CommonData\";\r\n\r\n/** Possible types of a CCS job. */\r\nexport enum CCJobType {\r\n    NONE = \"not recognized\",\r\n    CALIBRATION = \"Calibration\",\r\n    RECONSTRUCTION = \"Reconstruction\",\r\n    FULL = \"Full\",\r\n}\r\n\r\n/** \r\n * Properties of a workspace.\r\n * Convenience interface to stock all properties of a job in a simple way.\r\n */\r\nexport interface CCWorkspaceProperties {\r\n    id: string;\r\n    createdDateTime: string;\r\n    name: string;\r\n    iTwinId: string;\r\n    contextCaptureVersion?: string;\r\n}\r\n\r\n/**\r\n * Parameters for estimating job cost before its processing.\r\n */\r\nexport interface CCCostParameters {\r\n    gigaPixels?: number;\r\n    megaPoints?: number;\r\n    meshQuality?: CCJobQuality;\r\n}\r\n\r\n/**\r\n * Properties of ContextCapture job.\r\n * Convenience interface to stock all properties of a job in a simple way.\r\n */\r\nexport interface CCJobProperties {\r\n    name: string;\r\n    type: CCJobType;\r\n    settings: CCJobSettings;\r\n    workspaceId: string;\r\n    iTwinId: string;\r\n    id: string;\r\n    location?: string;\r\n    email?: string;\r\n    state?: string;\r\n    dates?: JobDates;\r\n    exitCode?: string;\r\n    executionCost?: string;\r\n    costEstimationParameters?: CCCostParameters;\r\n    estimatedCost?: string;\r\n}\r\n\r\n/** Possible qualities of a ContextCapture job. */\r\nexport enum CCJobQuality {\r\n    UNKNOWN = \"Unknown\",\r\n    DRAFT = \"Draft\",\r\n    MEDIUM = \"Medium\",\r\n    EXTRA = \"Extra\",\r\n}\r\n\r\n/** \r\n * Cache settings for a ContextCapture Job.\r\n */\r\nexport interface CCCacheSettings {\r\n    createCache: boolean;\r\n    useCache: string;\r\n}\r\n\r\n/**\r\n * Possible outputs for a ContextCapture job.\r\n */\r\nclass CCOutputs {\r\n    /** Created context scene id. */\r\n    contextScene: string;\r\n    /** Created ccorientation id. */\r\n    orientations: string;\r\n    /** Created 3MX id. */\r\n    threeMX: string;\r\n    /** Created 3SM id. */\r\n    threeSM: string;\r\n    /** Created web ready scalable mesh id. */\r\n    webReadyScalableMesh: string;\r\n    /** Created cesium 3D tiles id. */\r\n    cesium3DTiles: string;\r\n    /** Created pod id. */\r\n    pod: string;\r\n    /** Created orthophoto id. */\r\n    orthophoto: string;\r\n    /** Created las id. */\r\n    las: string;\r\n    /** Created fbx id. */\r\n    fbx: string;\r\n    /** Created obj id. */\r\n    obj: string;\r\n    /** Created esri i3s id. */\r\n    esri: string;\r\n    /** Created dgn id. */\r\n    dgn: string;\r\n    /** Created load tree export id. */\r\n    lodTreeExport: string;\r\n    /** Created ply id. */\r\n    ply: string;\r\n    /** Created opc id. */\r\n    opc: string;\r\n    /** Created omr id. */\r\n    omr: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * Created context scene id.\r\n         * @type {string}\r\n         */\r\n        this.contextScene = \"\";\r\n        /**\r\n         * Created ccorientation id.\r\n         * @type {string}\r\n         */\r\n        this.orientations = \"\";\r\n        /**\r\n         * Created 3MX id.\r\n         * @type {string}\r\n         */\r\n        this.threeMX = \"\";\r\n        /**\r\n         * Created 3SM id.\r\n         * @type {string}\r\n         */\r\n        this.threeSM = \"\";\r\n        /**\r\n         * Created web ready scalable mesh id.\r\n         * @type {string}\r\n         */\r\n        this.webReadyScalableMesh = \"\";\r\n        /**\r\n         * Created cesium 3D Tiles id.\r\n         * @type {string}\r\n         */\r\n        this.cesium3DTiles = \"\";\r\n        /**\r\n         * Created pod id.\r\n         * @type {string}\r\n         */\r\n        this.pod = \"\";\r\n        /**\r\n         * Created orthophoto id.\r\n         * @type {string}\r\n         */\r\n        this.orthophoto = \"\";\r\n        /**\r\n         * Created las id.\r\n         * @type {string}\r\n         */\r\n        this.las = \"\";\r\n        /**\r\n         * Created fbx id.\r\n         * @type {string}\r\n         */\r\n        this.fbx = \"\";\r\n        /**\r\n         * Created obj id.\r\n         * @type {string}\r\n         */\r\n        this.obj = \"\";\r\n        /**\r\n         * Created esri i3s id.\r\n         * @type {string}\r\n         */\r\n        this.esri = \"\";\r\n        /**\r\n         * Created dgn id.\r\n         * @type {string}\r\n         */\r\n        this.dgn = \"\";\r\n        /**\r\n         * Created load tree export id.\r\n         * @type {string}\r\n         */\r\n        this.lodTreeExport = \"\";\r\n        /**\r\n         * Created ply id.\r\n         * @type {string}\r\n         */\r\n        this.ply = \"\";\r\n        /**\r\n         * Created opc id.\r\n         * @type {string}\r\n         */\r\n        this.opc = \"\";\r\n        /**\r\n         * Created omr id.\r\n         * @type {string}\r\n         */\r\n        this.omr = \"\";\r\n    }\r\n}\r\n\r\n/** Settings for ContextCapture jobs. */\r\nexport class CCJobSettings {\r\n    /** Possible inputs for this job. Should be the ids of the inputs in the cloud. */\r\n    inputs: string[];\r\n    /** \r\n     * Possible outputs for this job. \r\n     * Fill the outputs you want for the job with a string (normally the name of the output) before passing it to createJob. \r\n     */\r\n    outputs: CCOutputs;\r\n\r\n    /** Mesh quality for this job. */\r\n    meshQuality?: CCJobQuality;\r\n\r\n    /** Quantity of engines to be used by the job. If set at 0, CCS will use your engine limit. */\r\n    engines?: number;\r\n\r\n    /** Cache settings for this job. */\r\n    cacheSettings?: CCCacheSettings;\r\n\r\n    constructor() {\r\n        /** \r\n         * Possible inputs for this job. \r\n         * @type {CCInputs}\r\n         */\r\n        this.inputs = [];\r\n        /** \r\n         * Possible outputs for this job. \r\n         * Fill the outputs you want for the job with a string (normally the name of the output) before passing it to createJob. \r\n         * @type {CCOutputs}\r\n         */\r\n        this.outputs = new CCOutputs();\r\n\r\n        /**\r\n         * Mesh quality for this job.\r\n         * @type {CCJobQuality}\r\n         */\r\n        this.meshQuality = CCJobQuality.UNKNOWN;\r\n\r\n        /** \r\n         * Number of engines to be used at most, between 0 and your engine limit. If set at 0, CCCS will use your engine limit. \r\n         * @type {number}\r\n         */\r\n        this.engines = 0;\r\n    }\r\n\r\n    /**\r\n     * Transform settings into json.\r\n     * @returns {any} json with settings values.\r\n     */\r\n    public toJson(): any {\r\n        const json: any = {};\r\n\r\n        json[\"inputs\"] = [];\r\n        for (const input of this.inputs) {\r\n            json[\"inputs\"].push({ \"id\": input });\r\n        }\r\n\r\n        json[\"settings\"] = {};\r\n        json[\"settings\"][\"outputs\"] = [];\r\n        if (this.outputs.cesium3DTiles)\r\n            json[\"settings\"][\"outputs\"].push(\"Cesium 3D Tiles\");\r\n\r\n        if (this.outputs.dgn)\r\n            json[\"settings\"][\"outputs\"].push(\"DGN\");\r\n\r\n        if (this.outputs.esri)\r\n            json[\"settings\"][\"outputs\"].push(\"ESRI i3s\");\r\n\r\n        if (this.outputs.webReadyScalableMesh)\r\n            json[\"settings\"][\"outputs\"].push(\"WebReady ScalableMesh\");\r\n\r\n        if (this.outputs.fbx)\r\n            json[\"settings\"][\"outputs\"].push(\"FBX\");\r\n\r\n        if (this.outputs.las)\r\n            json[\"settings\"][\"outputs\"].push(\"LAS\");\r\n\r\n        if (this.outputs.lodTreeExport)\r\n            json[\"settings\"][\"outputs\"].push(\"LODTreeExport\");\r\n\r\n        if (this.outputs.obj)\r\n            json[\"settings\"][\"outputs\"].push(\"OBJ\");\r\n\r\n        if (this.outputs.opc)\r\n            json[\"settings\"][\"outputs\"].push(\"OPC\");\r\n\r\n        if (this.outputs.omr)\r\n            json[\"settings\"][\"outputs\"].push(\"OMR\");\r\n\r\n        if (this.outputs.orientations)\r\n            json[\"settings\"][\"outputs\"].push(\"CCOrientations\");\r\n\r\n        if (this.outputs.orthophoto)\r\n            json[\"settings\"][\"outputs\"].push(\"Orthophoto/DSM\");\r\n\r\n        if (this.outputs.ply)\r\n            json[\"settings\"][\"outputs\"].push(\"PLY\");\r\n\r\n        if (this.outputs.pod)\r\n            json[\"settings\"][\"outputs\"].push(\"POD\");\r\n\r\n        if (this.outputs.threeMX)\r\n            json[\"settings\"][\"outputs\"].push(\"3MX\");\r\n\r\n        if (this.outputs.threeSM)\r\n            json[\"settings\"][\"outputs\"].push(\"3SM\");\r\n\r\n        if (this.outputs.contextScene)\r\n            json[\"settings\"][\"outputs\"].push(\"ContextScene\");\r\n\r\n        if (this.cacheSettings) {\r\n            json[\"settings\"][\"cacheSettings\"] = {\r\n                \"createCache\": this.cacheSettings.createCache,\r\n                \"useCache\": this.cacheSettings.useCache\r\n            };\r\n        }\r\n\r\n        if (this.meshQuality) {\r\n            json[\"settings\"][\"quality\"] = this.meshQuality;\r\n        }\r\n\r\n        if (this.engines) {\r\n            json[\"settings\"][\"processingEngines\"] = this.engines;\r\n        }\r\n\r\n        return json;\r\n    }\r\n\r\n    /**\r\n     * Transform json received from cloud service into settings.\r\n     * @param {any} jobJson Dictionary with settings received from cloud service.\r\n     * @returns {CCJobSettings} New settings.\r\n     */\r\n    public static async fromJson(settingsJson: any): Promise<CCJobSettings> {\r\n        const newJobSettings = new CCJobSettings();\r\n\r\n        for (const input of settingsJson[\"inputs\"]) {\r\n            newJobSettings.inputs.push(input[\"id\"]);\r\n        }\r\n        const outputsJson = settingsJson[\"jobSettings\"][\"outputs\"];\r\n        for (const output of outputsJson) {\r\n            if (output[\"format\"] === \"Cesium 3D Tiles\")\r\n                newJobSettings.outputs.cesium3DTiles = output[\"id\"];\r\n            else if (output[\"format\"] === \"DGN\")\r\n                newJobSettings.outputs.dgn = output[\"id\"];\r\n            else if (output[\"format\"] === \"ESRI i3s\")\r\n                newJobSettings.outputs.esri = output[\"id\"];\r\n            else if (output[\"format\"] === \"FBX\")\r\n                newJobSettings.outputs.fbx = output[\"id\"];\r\n            else if (output[\"format\"] === \"LAS\")\r\n                newJobSettings.outputs.las = output[\"id\"];\r\n            else if (output[\"format\"] === \"LODTreeExport\")\r\n                newJobSettings.outputs.lodTreeExport = output[\"id\"];\r\n            else if (output[\"format\"] === \"OBJ\")\r\n                newJobSettings.outputs.obj = output[\"id\"];\r\n            else if (output[\"format\"] === \"OPC\")\r\n                newJobSettings.outputs.opc = output[\"id\"];\r\n            else if (output[\"format\"] === \"OMR\")\r\n                newJobSettings.outputs.omr = output[\"id\"];\r\n            else if (output[\"format\"] === \"CCOrientations\")\r\n                newJobSettings.outputs.orientations = output[\"id\"];\r\n            else if (output[\"format\"] === \"Orthophoto/DSM\")\r\n                newJobSettings.outputs.orthophoto = output[\"id\"];\r\n            else if (output[\"format\"] === \"PLY\")\r\n                newJobSettings.outputs.ply = output[\"id\"];\r\n            else if (output[\"format\"] === \"POD\")\r\n                newJobSettings.outputs.pod = output[\"id\"];\r\n            else if (output[\"format\"] === \"3MX\")\r\n                newJobSettings.outputs.threeMX = output[\"id\"];\r\n            else if (output[\"format\"] === \"3SM\")\r\n                newJobSettings.outputs.threeSM = output[\"id\"];\r\n            else if (output[\"format\"] === \"ContextScene\")\r\n                newJobSettings.outputs.contextScene = output[\"id\"];\r\n            else if (output[\"format\"] === \"WebReady ScalableMesh\")\r\n                newJobSettings.outputs.webReadyScalableMesh = output[\"id\"];\r\n            else\r\n                return Promise.reject(new BentleyError(BentleyStatus.ERROR, \"Found unexpected output name : \" + output[\"format\"]));\r\n        }\r\n        if (\"cacheSettings\" in settingsJson[\"jobSettings\"])\r\n            newJobSettings.cacheSettings = {\r\n                useCache: settingsJson[\"jobSettings\"][\"cacheSettings\"][\"useCache\"],\r\n                createCache: settingsJson[\"jobSettings\"][\"cacheSettings\"][\"createCache\"],\r\n            }\r\n\r\n        if (\"quality\" in settingsJson[\"jobSettings\"])\r\n            newJobSettings.meshQuality = settingsJson[\"jobSettings\"][\"quality\"];\r\n\r\n        if (\"processingEngines\" in settingsJson[\"jobSettings\"])\r\n            newJobSettings.engines = settingsJson[\"jobSettings\"][\"processingEngines\"];\r\n\r\n        return newJobSettings;\r\n    }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2f1462b7f5d3f8fd4d83deb599c16362ebcc5c6f","contentHash":"b62d68c16111776ec90fec0bb883b215c5f45aa310fe74ca68d7ccfc1e867c40"},"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\rdas\\RealityDataAnalysisService.js":{"path":"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\rdas\\RealityDataAnalysisService.js","statementMap":{"0":{"start":{"line":6,"column":22},"end":{"line":8,"column":1}},"1":{"start":{"line":7,"column":4},"end":{"line":7,"column":62}},"2":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"3":{"start":{"line":10,"column":0},"end":{"line":10,"column":44}},"4":{"start":{"line":11,"column":19},"end":{"line":11,"column":40}},"5":{"start":{"line":12,"column":23},"end":{"line":12,"column":53}},"6":{"start":{"line":13,"column":16},"end":{"line":13,"column":49}},"7":{"start":{"line":25,"column":8},"end":{"line":25,"column":72}},"8":{"start":{"line":26,"column":8},"end":{"line":26,"column":55}},"9":{"start":{"line":27,"column":8},"end":{"line":28,"column":87}},"10":{"start":{"line":28,"column":12},"end":{"line":28,"column":87}},"11":{"start":{"line":39,"column":8},"end":{"line":78,"column":9}},"12":{"start":{"line":41,"column":24},"end":{"line":41,"column":63}},"13":{"start":{"line":42,"column":28},"end":{"line":46,"column":13}},"14":{"start":{"line":47,"column":12},"end":{"line":56,"column":131}},"15":{"start":{"line":48,"column":16},"end":{"line":48,"column":84}},"16":{"start":{"line":49,"column":17},"end":{"line":56,"column":131}},"17":{"start":{"line":50,"column":16},"end":{"line":50,"column":87}},"18":{"start":{"line":51,"column":17},"end":{"line":56,"column":131}},"19":{"start":{"line":52,"column":16},"end":{"line":52,"column":94}},"20":{"start":{"line":53,"column":17},"end":{"line":56,"column":131}},"21":{"start":{"line":54,"column":16},"end":{"line":54,"column":95}},"22":{"start":{"line":56,"column":16},"end":{"line":56,"column":131}},"23":{"start":{"line":57,"column":12},"end":{"line":59,"column":13}},"24":{"start":{"line":58,"column":16},"end":{"line":58,"column":93}},"25":{"start":{"line":60,"column":12},"end":{"line":60,"column":33}},"26":{"start":{"line":63,"column":25},"end":{"line":63,"column":28}},"27":{"start":{"line":64,"column":26},"end":{"line":64,"column":83}},"28":{"start":{"line":65,"column":12},"end":{"line":76,"column":13}},"29":{"start":{"line":66,"column":38},"end":{"line":66,"column":52}},"30":{"start":{"line":67,"column":16},"end":{"line":67,"column":46}},"31":{"start":{"line":68,"column":16},"end":{"line":68,"column":153}},"32":{"start":{"line":71,"column":37},"end":{"line":71,"column":42}},"33":{"start":{"line":72,"column":16},"end":{"line":75,"column":17}},"34":{"start":{"line":73,"column":20},"end":{"line":73,"column":54}},"35":{"start":{"line":74,"column":20},"end":{"line":74,"column":51}},"36":{"start":{"line":77,"column":12},"end":{"line":77,"column":84}},"37":{"start":{"line":85,"column":8},"end":{"line":85,"column":83}},"38":{"start":{"line":95,"column":21},"end":{"line":100,"column":9}},"39":{"start":{"line":101,"column":25},"end":{"line":101,"column":78}},"40":{"start":{"line":102,"column":8},"end":{"line":102,"column":37}},"41":{"start":{"line":109,"column":21},"end":{"line":109,"column":42}},"42":{"start":{"line":110,"column":8},"end":{"line":110,"column":76}},"43":{"start":{"line":117,"column":21},"end":{"line":119,"column":9}},"44":{"start":{"line":120,"column":8},"end":{"line":120,"column":76}},"45":{"start":{"line":127,"column":8},"end":{"line":127,"column":71}},"46":{"start":{"line":135,"column":25},"end":{"line":135,"column":86}},"47":{"start":{"line":136,"column":25},"end":{"line":136,"column":45}},"48":{"start":{"line":137,"column":22},"end":{"line":137,"column":53}},"49":{"start":{"line":138,"column":8},"end":{"line":138,"column":102}},"50":{"start":{"line":146,"column":25},"end":{"line":146,"column":77}},"51":{"start":{"line":147,"column":20},"end":{"line":147,"column":35}},"52":{"start":{"line":148,"column":30},"end":{"line":157,"column":9}},"53":{"start":{"line":159,"column":8},"end":{"line":181,"column":164}},"54":{"start":{"line":160,"column":12},"end":{"line":160,"column":81}},"55":{"start":{"line":162,"column":13},"end":{"line":181,"column":164}},"56":{"start":{"line":163,"column":12},"end":{"line":163,"column":81}},"57":{"start":{"line":165,"column":13},"end":{"line":181,"column":164}},"58":{"start":{"line":166,"column":12},"end":{"line":166,"column":81}},"59":{"start":{"line":168,"column":13},"end":{"line":181,"column":164}},"60":{"start":{"line":169,"column":12},"end":{"line":169,"column":81}},"61":{"start":{"line":171,"column":13},"end":{"line":181,"column":164}},"62":{"start":{"line":172,"column":12},"end":{"line":172,"column":81}},"63":{"start":{"line":174,"column":13},"end":{"line":181,"column":164}},"64":{"start":{"line":175,"column":12},"end":{"line":175,"column":93}},"65":{"start":{"line":177,"column":13},"end":{"line":181,"column":164}},"66":{"start":{"line":178,"column":12},"end":{"line":178,"column":91}},"67":{"start":{"line":181,"column":12},"end":{"line":181,"column":164}},"68":{"start":{"line":182,"column":8},"end":{"line":182,"column":42}},"69":{"start":{"line":183,"column":8},"end":{"line":197,"column":9}},"70":{"start":{"line":184,"column":12},"end":{"line":189,"column":14}},"71":{"start":{"line":190,"column":12},"end":{"line":190,"column":88}},"72":{"start":{"line":191,"column":12},"end":{"line":191,"column":77}},"73":{"start":{"line":194,"column":12},"end":{"line":196,"column":14}},"74":{"start":{"line":198,"column":8},"end":{"line":209,"column":9}},"75":{"start":{"line":199,"column":12},"end":{"line":208,"column":14}},"76":{"start":{"line":210,"column":8},"end":{"line":210,"column":29}},"77":{"start":{"line":218,"column":21},"end":{"line":228,"column":9}},"78":{"start":{"line":229,"column":25},"end":{"line":229,"column":85}},"79":{"start":{"line":230,"column":8},"end":{"line":230,"column":57}},"80":{"start":{"line":233,"column":0},"end":{"line":233,"column":64}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":56},"end":{"line":6,"column":57}},"loc":{"start":{"line":6,"column":71},"end":{"line":8,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":42},"end":{"line":29,"column":5}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":65},"end":{"line":79,"column":5}},"line":37},"3":{"name":"(anonymous_3)","decl":{"start":{"line":84,"column":4},"end":{"line":84,"column":5}},"loc":{"start":{"line":84,"column":23},"end":{"line":86,"column":5}},"line":84},"4":{"name":"(anonymous_4)","decl":{"start":{"line":94,"column":4},"end":{"line":94,"column":5}},"loc":{"start":{"line":94,"column":45},"end":{"line":103,"column":5}},"line":94},"5":{"name":"(anonymous_5)","decl":{"start":{"line":108,"column":4},"end":{"line":108,"column":5}},"loc":{"start":{"line":108,"column":24},"end":{"line":111,"column":5}},"line":108},"6":{"name":"(anonymous_6)","decl":{"start":{"line":116,"column":4},"end":{"line":116,"column":5}},"loc":{"start":{"line":116,"column":24},"end":{"line":121,"column":5}},"line":116},"7":{"name":"(anonymous_7)","decl":{"start":{"line":126,"column":4},"end":{"line":126,"column":5}},"loc":{"start":{"line":126,"column":24},"end":{"line":128,"column":5}},"line":126},"8":{"name":"(anonymous_8)","decl":{"start":{"line":134,"column":4},"end":{"line":134,"column":5}},"loc":{"start":{"line":134,"column":29},"end":{"line":139,"column":5}},"line":134},"9":{"name":"(anonymous_9)","decl":{"start":{"line":145,"column":4},"end":{"line":145,"column":5}},"loc":{"start":{"line":145,"column":31},"end":{"line":211,"column":5}},"line":145},"10":{"name":"(anonymous_10)","decl":{"start":{"line":217,"column":4},"end":{"line":217,"column":5}},"loc":{"start":{"line":217,"column":50},"end":{"line":231,"column":5}},"line":217}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":22},"end":{"line":8,"column":1}},"type":"binary-expr","locations":[{"start":{"line":6,"column":23},"end":{"line":6,"column":27}},{"start":{"line":6,"column":31},"end":{"line":6,"column":51}},{"start":{"line":6,"column":56},"end":{"line":8,"column":1}}],"line":6},"1":{"loc":{"start":{"line":7,"column":11},"end":{"line":7,"column":61}},"type":"cond-expr","locations":[{"start":{"line":7,"column":37},"end":{"line":7,"column":40}},{"start":{"line":7,"column":43},"end":{"line":7,"column":61}}],"line":7},"2":{"loc":{"start":{"line":7,"column":12},"end":{"line":7,"column":33}},"type":"binary-expr","locations":[{"start":{"line":7,"column":12},"end":{"line":7,"column":15}},{"start":{"line":7,"column":19},"end":{"line":7,"column":33}}],"line":7},"3":{"loc":{"start":{"line":27,"column":8},"end":{"line":28,"column":87}},"type":"if","locations":[{"start":{"line":27,"column":8},"end":{"line":28,"column":87}},{"start":{"line":27,"column":8},"end":{"line":28,"column":87}}],"line":27},"4":{"loc":{"start":{"line":47,"column":12},"end":{"line":56,"column":131}},"type":"if","locations":[{"start":{"line":47,"column":12},"end":{"line":56,"column":131}},{"start":{"line":47,"column":12},"end":{"line":56,"column":131}}],"line":47},"5":{"loc":{"start":{"line":49,"column":17},"end":{"line":56,"column":131}},"type":"if","locations":[{"start":{"line":49,"column":17},"end":{"line":56,"column":131}},{"start":{"line":49,"column":17},"end":{"line":56,"column":131}}],"line":49},"6":{"loc":{"start":{"line":51,"column":17},"end":{"line":56,"column":131}},"type":"if","locations":[{"start":{"line":51,"column":17},"end":{"line":56,"column":131}},{"start":{"line":51,"column":17},"end":{"line":56,"column":131}}],"line":51},"7":{"loc":{"start":{"line":53,"column":17},"end":{"line":56,"column":131}},"type":"if","locations":[{"start":{"line":53,"column":17},"end":{"line":56,"column":131}},{"start":{"line":53,"column":17},"end":{"line":56,"column":131}}],"line":53},"8":{"loc":{"start":{"line":57,"column":12},"end":{"line":59,"column":13}},"type":"if","locations":[{"start":{"line":57,"column":12},"end":{"line":59,"column":13}},{"start":{"line":57,"column":12},"end":{"line":59,"column":13}}],"line":57},"9":{"loc":{"start":{"line":65,"column":12},"end":{"line":76,"column":13}},"type":"if","locations":[{"start":{"line":65,"column":12},"end":{"line":76,"column":13}},{"start":{"line":65,"column":12},"end":{"line":76,"column":13}}],"line":65},"10":{"loc":{"start":{"line":68,"column":26},"end":{"line":68,"column":152}},"type":"cond-expr","locations":[{"start":{"line":68,"column":133},"end":{"line":68,"column":139}},{"start":{"line":68,"column":142},"end":{"line":68,"column":152}}],"line":68},"11":{"loc":{"start":{"line":68,"column":26},"end":{"line":68,"column":130}},"type":"binary-expr","locations":[{"start":{"line":68,"column":26},"end":{"line":68,"column":113}},{"start":{"line":68,"column":117},"end":{"line":68,"column":130}}],"line":68},"12":{"loc":{"start":{"line":68,"column":32},"end":{"line":68,"column":103}},"type":"cond-expr","locations":[{"start":{"line":68,"column":86},"end":{"line":68,"column":92}},{"start":{"line":68,"column":95},"end":{"line":68,"column":103}}],"line":68},"13":{"loc":{"start":{"line":68,"column":32},"end":{"line":68,"column":83}},"type":"binary-expr","locations":[{"start":{"line":68,"column":32},"end":{"line":68,"column":66}},{"start":{"line":68,"column":70},"end":{"line":68,"column":83}}],"line":68},"14":{"loc":{"start":{"line":72,"column":16},"end":{"line":75,"column":17}},"type":"if","locations":[{"start":{"line":72,"column":16},"end":{"line":75,"column":17}},{"start":{"line":72,"column":16},"end":{"line":75,"column":17}}],"line":72},"15":{"loc":{"start":{"line":159,"column":8},"end":{"line":181,"column":164}},"type":"if","locations":[{"start":{"line":159,"column":8},"end":{"line":181,"column":164}},{"start":{"line":159,"column":8},"end":{"line":181,"column":164}}],"line":159},"16":{"loc":{"start":{"line":162,"column":13},"end":{"line":181,"column":164}},"type":"if","locations":[{"start":{"line":162,"column":13},"end":{"line":181,"column":164}},{"start":{"line":162,"column":13},"end":{"line":181,"column":164}}],"line":162},"17":{"loc":{"start":{"line":165,"column":13},"end":{"line":181,"column":164}},"type":"if","locations":[{"start":{"line":165,"column":13},"end":{"line":181,"column":164}},{"start":{"line":165,"column":13},"end":{"line":181,"column":164}}],"line":165},"18":{"loc":{"start":{"line":168,"column":13},"end":{"line":181,"column":164}},"type":"if","locations":[{"start":{"line":168,"column":13},"end":{"line":181,"column":164}},{"start":{"line":168,"column":13},"end":{"line":181,"column":164}}],"line":168},"19":{"loc":{"start":{"line":171,"column":13},"end":{"line":181,"column":164}},"type":"if","locations":[{"start":{"line":171,"column":13},"end":{"line":181,"column":164}},{"start":{"line":171,"column":13},"end":{"line":181,"column":164}}],"line":171},"20":{"loc":{"start":{"line":174,"column":13},"end":{"line":181,"column":164}},"type":"if","locations":[{"start":{"line":174,"column":13},"end":{"line":181,"column":164}},{"start":{"line":174,"column":13},"end":{"line":181,"column":164}}],"line":174},"21":{"loc":{"start":{"line":177,"column":13},"end":{"line":181,"column":164}},"type":"if","locations":[{"start":{"line":177,"column":13},"end":{"line":181,"column":164}},{"start":{"line":177,"column":13},"end":{"line":181,"column":164}}],"line":177},"22":{"loc":{"start":{"line":183,"column":8},"end":{"line":197,"column":9}},"type":"if","locations":[{"start":{"line":183,"column":8},"end":{"line":197,"column":9}},{"start":{"line":183,"column":8},"end":{"line":197,"column":9}}],"line":183},"23":{"loc":{"start":{"line":198,"column":8},"end":{"line":209,"column":9}},"type":"if","locations":[{"start":{"line":198,"column":8},"end":{"line":209,"column":9}},{"start":{"line":198,"column":8},"end":{"line":209,"column":9}}],"line":198}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":14,"12":14,"13":14,"14":14,"15":8,"16":6,"17":1,"18":5,"19":1,"20":4,"21":3,"22":1,"23":12,"24":0,"25":12,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":0,"33":0,"34":0,"35":0,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":4,"47":4,"48":4,"49":4,"50":2,"51":2,"52":2,"53":2,"54":1,"55":1,"56":0,"57":1,"58":0,"59":1,"60":0,"61":1,"62":0,"63":1,"64":0,"65":1,"66":0,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":0,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1},"f":{"0":1,"1":1,"2":14,"3":1,"4":1,"5":1,"6":1,"7":1,"8":4,"9":2,"10":1},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[0,1],"4":[8,6],"5":[1,5],"6":[1,4],"7":[3,1],"8":[0,12],"9":[1,0],"10":[1,0],"11":[1,1],"12":[0,1],"13":[1,1],"14":[0,0],"15":[1,1],"16":[0,1],"17":[0,1],"18":[0,1],"19":[0,1],"20":[0,1],"21":[0,1],"22":[1,0],"23":[1,0]},"inputSourceMap":{"version":3,"file":"RealityDataAnalysisService.js","sourceRoot":"","sources":["../../src/rdas/RealityDataAnalysisService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { ChangeDetectionJobSettings, ExtractGroundJobSettings, JobSettings, L3DJobSettings, O2DJobSettings, O3DJobSettings, RDAJobType, S2DJobSettings, S3DJobSettings } from \"./Settings\";\r\nimport { RDACostParameters, RDAJobProperties } from \"./Utils\";\r\nimport { JobProgress, JobState } from \"../CommonData\";\r\nimport { BentleyError, BentleyStatus } from \"@itwin/core-bentley\";\r\nimport { AuthorizationClient } from \"@itwin/core-common\";\r\nimport axios from \"axios\";\r\n\r\n/**\r\n * Service handling communication with RealityData Analysis Service.\r\n */\r\nexport class RealityDataAnalysisService {\r\n    /** Authorization client to generate access token. */\r\n    private authorizationClient: AuthorizationClient;\r\n\r\n    /** Target service url. */\r\n    private serviceUrl = \"https://api.bentley.com/realitydataanalysis\";\r\n\r\n    /**\r\n     * Create a new RealityDataAnalysisService.\r\n     * @param {AuthorizationClient} authorizationClient Authorization client to generate access token.\r\n     * @param {string} env (optional) Target environment.\r\n     */\r\n    constructor(authorizationClient: AuthorizationClient, env?: string) {\r\n        this.authorizationClient = authorizationClient;\r\n        if(env)\r\n            this.serviceUrl = \"https://\" + env + \"api.bentley.com/realitydataanalysis\";\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {string} apiOperationUrl API operation url.\r\n     * @param {string} method HTTP method.\r\n     * @param {unknown} payload (optional) Request body.\r\n     * @returns {any} Request response.\r\n     */\r\n    private async submitRequest(apiOperationUrl: string, method: string, okRet: number[], payload?: unknown): Promise<any> {\r\n        try {\r\n            let response;\r\n            const url = this.serviceUrl + \"/\" + apiOperationUrl;\r\n            const headers =\r\n            {\r\n                \"content-type\": \"application/json\",\r\n                \"accept\": \"application/vnd.bentley.itwin-platform.v1+json\",\r\n                \"authorization\": await this.authorizationClient.getAccessToken(),\r\n            };\r\n\r\n            if(method === \"GET\")\r\n                response = await axios.get(url, {headers, url, method});\r\n            else if(method === \"DELETE\")\r\n                response = await axios.delete(url, {headers, url, method});\r\n            else if(method === \"POST\")\r\n                response = await axios.post(url, payload, {headers, url, method});\r\n            else if(method === \"PATCH\")\r\n                response = await axios.patch(url, payload, {headers, url, method});\r\n            else\r\n                return Promise.reject(new BentleyError(BentleyStatus.ERROR, \"Wrong request method\"));\r\n\r\n            if (!okRet.includes(response.status)) {\r\n                return new BentleyError(response.status, response.statusText);\r\n            }\r\n\r\n            return response.data;\r\n\r\n        }\r\n        catch (error: any) {\r\n            let status = 422;\r\n            let message = \"Unknown error. Please ensure that the request is valid.\";\r\n\r\n            if (axios.isAxiosError(error)) {\r\n                const axiosResponse = error.response!;\r\n                status = axiosResponse.status;\r\n                message = axiosResponse.data?.error?.message;\r\n            } \r\n            else {\r\n                const bentleyError = error as BentleyError;\r\n                if (bentleyError !== undefined) {\r\n                    status = bentleyError.errorNumber;\r\n                    message = bentleyError.message;\r\n                }\r\n            }\r\n            return Promise.reject(new BentleyError(status, message));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get scopes required for this service.\r\n     * @returns {Set<string>} Set of required minimal scopes.\r\n     */\r\n    public static getScopes(): Set<string> {\r\n        return new Set([\"realitydataanalysis:modify\", \"realitydataanalysis:read\"]);\r\n    }\r\n\r\n    /**\r\n     * Create a job corresponding to the given settings.\r\n     * @param {JobSettings} settings Settings for the job.\r\n     * @param {string} name Name for the job.\r\n     * @param {string} iTwinId iTwin associated to this job.\r\n     * @returns {string} Created job id.\r\n     */\r\n    public async createJob(settings: JobSettings, name: string, iTwinId: string): Promise<string> {\r\n        const body = {\r\n            \"type\": settings.type,\r\n            \"name\": name,\r\n            \"iTwinId\": iTwinId,\r\n            \"settings\": settings.toJson()\r\n        };\r\n        const response = await this.submitRequest(\"jobs\", \"POST\", [201], body);\r\n        return response[\"job\"][\"id\"];\r\n    }\r\n\r\n    /**\r\n     * Submit a job.\r\n     * @param {string} id The ID of the relevant job.\r\n     */\r\n    public async submitJob(id: string): Promise<void> {\r\n        const body = { \"state\": \"active\" };\r\n        return await this.submitRequest(\"jobs/\" + id, \"PATCH\", [200], body);\r\n    }\r\n\r\n    /**\r\n     * Cancel a job.\r\n     * @param {string} id The ID of the relevant job.\r\n     */\r\n    public async cancelJob(id: string): Promise<void> {\r\n        const body = {\r\n            \"state\": \"cancelled\",\r\n        };\r\n        return await this.submitRequest(\"jobs/\" + id, \"PATCH\", [200], body);\r\n    }\r\n\r\n    /**\r\n     * Delete a job.\r\n     * @param {string} id The ID of the relevant job.\r\n     */\r\n    public async deleteJob(id: string): Promise<void> {\r\n        return await this.submitRequest(\"jobs/\" + id, \"DELETE\", [204]);\r\n    }\r\n\r\n    /**\r\n     * Get progress for a given job.\r\n     * @param {string} id The ID of the relevant job.\r\n     * @returns {JobProgress} The progress for the job.\r\n     */\r\n    public async getJobProgress(id: string): Promise<JobProgress> {\r\n        const response = await this.submitRequest(`jobs/${id}/progress`, \"GET\", [200]);\r\n        const progress = response[\"progress\"];\r\n        const state = (progress[\"state\"] as string).toLowerCase();\r\n        return { state: state as JobState, progress: JSON.parse(progress[\"percentage\"]), step: progress[\"step\"] };\r\n    }\r\n\r\n    /**\r\n     * Get all properties for a given job.\r\n     * @param {string} id The ID of the relevant job.\r\n     * @returns {RDAJobProperties} The job properties.\r\n     */\r\n    public async getJobProperties(id: string): Promise<RDAJobProperties> {\r\n        const response = await this.submitRequest(\"jobs/\" + id, \"GET\", [200]);\r\n        const job = response[\"job\"];\r\n        const jobProperties: RDAJobProperties = {\r\n            name: job[\"name\"],\r\n            type: job[\"type\"],\r\n            iTwinId: job[\"iTwinId\"],\r\n            settings: new O2DJobSettings(), // dummy settings\r\n            id: job[\"id\"],\r\n            email: job[\"email\"],\r\n            state: job[\"state\"],\r\n            dataCenter: job[\"dataCenter\"],\r\n        };\r\n\r\n        let settings: JobSettings;\r\n        if (job[\"type\"] === RDAJobType.O2D) {\r\n            settings = await O2DJobSettings.fromJson(job[\"settings\"]);\r\n        }\r\n        else if (job[\"type\"] === RDAJobType.S2D) {\r\n            settings = await S2DJobSettings.fromJson(job[\"settings\"]);\r\n        }\r\n        else if (job[\"type\"] === RDAJobType.O3D) {\r\n            settings = await O3DJobSettings.fromJson(job[\"settings\"]);\r\n        }\r\n        else if (job[\"type\"] === RDAJobType.S3D) {\r\n            settings = await S3DJobSettings.fromJson(job[\"settings\"]);\r\n        }\r\n        else if (job[\"type\"] === RDAJobType.L3D) {\r\n            settings = await L3DJobSettings.fromJson(job[\"settings\"]);\r\n        }\r\n        else if (job[\"type\"] === RDAJobType.ChangeDetection) {\r\n            settings = await ChangeDetectionJobSettings.fromJson(job[\"settings\"]);\r\n        }\r\n        else if (job[\"type\"] === RDAJobType.ExtractGround) {\r\n            settings = await ExtractGroundJobSettings.fromJson(job[\"settings\"]);\r\n        }\r\n        else\r\n            return Promise.reject(new BentleyError(BentleyStatus.ERROR,\r\n                \"Can't get job properties of unknown type : \" + job[\"type\"]));\r\n\r\n        jobProperties.settings = settings;\r\n\r\n        if (job[\"executionInformation\"]) {\r\n            jobProperties.dates = {\r\n                createdDateTime: job[\"createdDateTime\"],\r\n                submissionDateTime: job[\"executionInformation\"][\"submissionDateTime\"],\r\n                startedDateTime: job[\"executionInformation\"][\"startedDateTime\"],\r\n                endedDateTime: job[\"executionInformation\"][\"endedDateTime\"],\r\n            };\r\n            jobProperties.executionCost = job[\"executionInformation\"][\"estimatedUnits\"];\r\n            jobProperties.exitCode = job[\"executionInformation\"][\"exitCode\"];\r\n        }\r\n        else {\r\n            jobProperties.dates = {\r\n                createdDateTime: job[\"createdDateTime\"]\r\n            };\r\n        }\r\n\r\n        if (job[\"costEstimation\"]) {\r\n            jobProperties.costEstimation = {\r\n                gigaPixels: job[\"costEstimation\"][\"gigaPixels\"],\r\n                numberOfPhotos: job[\"costEstimation\"][\"numberOfPhotos\"],\r\n                sceneWidth: job[\"costEstimation\"][\"sceneWidth\"],\r\n                sceneHeight: job[\"costEstimation\"][\"sceneHeight\"],\r\n                sceneLength: job[\"costEstimation\"][\"sceneLength\"],\r\n                detectorScale: job[\"costEstimation\"][\"detectorScale\"],\r\n                detectorCost: job[\"costEstimation\"][\"detectorCost\"],\r\n                estimatedCost: job[\"costEstimation\"][\"estimatedCost\"],\r\n            };\r\n        }\r\n\r\n        return jobProperties;\r\n    }\r\n\r\n    /**\r\n     * Get the estimated cost of a given job.\r\n     * @param {string} id The ID of the relevant job.\r\n     * @returns {number} The job cost estimation.\r\n     */\r\n    public async getJobEstimatedCost(id: string, costParameters: RDACostParameters): Promise<number> {\r\n        const body = {\r\n            costEstimationParameters: {\r\n                gigaPixels: costParameters.gigaPixels,\r\n                numberOfPhotos: costParameters.numberOfPhotos,\r\n                sceneWidth: costParameters.sceneWidth,\r\n                sceneHeight: costParameters.sceneHeight,\r\n                sceneLength: costParameters.sceneLength,\r\n                detectorScale: costParameters.detectorScale,\r\n                detectorCost: costParameters.detectorCost,\r\n            }\r\n        };\r\n        const response = await this.submitRequest(\"jobs/\" + id, \"PATCH\", [200], body);\r\n        return response.job.costEstimation.estimatedCost;\r\n    }\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"80c1d66c49bcbd075be2cc1a8ab23b519c19e928","contentHash":"47853a6213c33443546ccb6e04cd86bf8e99ad04902592ff3c78d1ad476104bd"},"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\rdas\\Settings.js":{"path":"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\rdas\\Settings.js","statementMap":{"0":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":225}},"2":{"start":{"line":8,"column":23},"end":{"line":8,"column":53}},"3":{"start":{"line":11,"column":0},"end":{"line":20,"column":65}},"4":{"start":{"line":12,"column":4},"end":{"line":12,"column":42}},"5":{"start":{"line":13,"column":4},"end":{"line":13,"column":36}},"6":{"start":{"line":14,"column":4},"end":{"line":14,"column":41}},"7":{"start":{"line":15,"column":4},"end":{"line":15,"column":36}},"8":{"start":{"line":16,"column":4},"end":{"line":16,"column":41}},"9":{"start":{"line":17,"column":4},"end":{"line":17,"column":54}},"10":{"start":{"line":18,"column":4},"end":{"line":18,"column":34}},"11":{"start":{"line":19,"column":4},"end":{"line":19,"column":50}},"12":{"start":{"line":30,"column":8},"end":{"line":30,"column":25}},"13":{"start":{"line":35,"column":8},"end":{"line":35,"column":38}},"14":{"start":{"line":47,"column":8},"end":{"line":47,"column":28}},"15":{"start":{"line":57,"column":8},"end":{"line":57,"column":35}},"16":{"start":{"line":62,"column":8},"end":{"line":62,"column":38}},"17":{"start":{"line":68,"column":8},"end":{"line":68,"column":40}},"18":{"start":{"line":75,"column":21},"end":{"line":75,"column":23}},"19":{"start":{"line":76,"column":8},"end":{"line":76,"column":28}},"20":{"start":{"line":77,"column":8},"end":{"line":78,"column":91}},"21":{"start":{"line":78,"column":12},"end":{"line":78,"column":91}},"22":{"start":{"line":79,"column":8},"end":{"line":80,"column":117}},"23":{"start":{"line":80,"column":12},"end":{"line":80,"column":117}},"24":{"start":{"line":81,"column":8},"end":{"line":81,"column":29}},"25":{"start":{"line":82,"column":8},"end":{"line":83,"column":46}},"26":{"start":{"line":83,"column":12},"end":{"line":83,"column":46}},"27":{"start":{"line":84,"column":8},"end":{"line":84,"column":20}},"28":{"start":{"line":92,"column":31},"end":{"line":92,"column":51}},"29":{"start":{"line":93,"column":27},"end":{"line":93,"column":49}},"30":{"start":{"line":94,"column":8},"end":{"line":101,"column":9}},"31":{"start":{"line":95,"column":12},"end":{"line":100,"column":157}},"32":{"start":{"line":96,"column":16},"end":{"line":96,"column":70}},"33":{"start":{"line":97,"column":17},"end":{"line":100,"column":157}},"34":{"start":{"line":98,"column":16},"end":{"line":98,"column":83}},"35":{"start":{"line":100,"column":16},"end":{"line":100,"column":157}},"36":{"start":{"line":102,"column":28},"end":{"line":102,"column":51}},"37":{"start":{"line":103,"column":8},"end":{"line":108,"column":9}},"38":{"start":{"line":104,"column":12},"end":{"line":107,"column":159}},"39":{"start":{"line":105,"column":16},"end":{"line":105,"column":75}},"40":{"start":{"line":107,"column":16},"end":{"line":107,"column":159}},"41":{"start":{"line":109,"column":8},"end":{"line":109,"column":30}},"42":{"start":{"line":112,"column":0},"end":{"line":112,"column":40}},"43":{"start":{"line":122,"column":8},"end":{"line":122,"column":25}},"44":{"start":{"line":127,"column":8},"end":{"line":127,"column":44}},"45":{"start":{"line":132,"column":8},"end":{"line":132,"column":29}},"46":{"start":{"line":137,"column":8},"end":{"line":137,"column":49}},"47":{"start":{"line":149,"column":8},"end":{"line":149,"column":33}},"48":{"start":{"line":154,"column":8},"end":{"line":154,"column":29}},"49":{"start":{"line":159,"column":8},"end":{"line":159,"column":40}},"50":{"start":{"line":164,"column":8},"end":{"line":164,"column":26}},"51":{"start":{"line":169,"column":8},"end":{"line":169,"column":34}},"52":{"start":{"line":174,"column":8},"end":{"line":174,"column":37}},"53":{"start":{"line":179,"column":8},"end":{"line":179,"column":37}},"54":{"start":{"line":191,"column":8},"end":{"line":191,"column":35}},"55":{"start":{"line":196,"column":8},"end":{"line":196,"column":38}},"56":{"start":{"line":201,"column":8},"end":{"line":201,"column":40}},"57":{"start":{"line":208,"column":21},"end":{"line":208,"column":23}},"58":{"start":{"line":209,"column":8},"end":{"line":209,"column":28}},"59":{"start":{"line":210,"column":8},"end":{"line":211,"column":91}},"60":{"start":{"line":211,"column":12},"end":{"line":211,"column":91}},"61":{"start":{"line":212,"column":8},"end":{"line":213,"column":129}},"62":{"start":{"line":213,"column":12},"end":{"line":213,"column":129}},"63":{"start":{"line":214,"column":8},"end":{"line":215,"column":99}},"64":{"start":{"line":215,"column":12},"end":{"line":215,"column":99}},"65":{"start":{"line":216,"column":8},"end":{"line":217,"column":139}},"66":{"start":{"line":217,"column":12},"end":{"line":217,"column":139}},"67":{"start":{"line":218,"column":8},"end":{"line":218,"column":29}},"68":{"start":{"line":219,"column":8},"end":{"line":220,"column":51}},"69":{"start":{"line":220,"column":12},"end":{"line":220,"column":51}},"70":{"start":{"line":221,"column":8},"end":{"line":222,"column":52}},"71":{"start":{"line":222,"column":12},"end":{"line":222,"column":52}},"72":{"start":{"line":223,"column":8},"end":{"line":224,"column":47}},"73":{"start":{"line":224,"column":12},"end":{"line":224,"column":47}},"74":{"start":{"line":225,"column":8},"end":{"line":226,"column":58}},"75":{"start":{"line":226,"column":12},"end":{"line":226,"column":58}},"76":{"start":{"line":227,"column":8},"end":{"line":228,"column":44}},"77":{"start":{"line":228,"column":12},"end":{"line":228,"column":44}},"78":{"start":{"line":229,"column":8},"end":{"line":230,"column":55}},"79":{"start":{"line":230,"column":12},"end":{"line":230,"column":55}},"80":{"start":{"line":231,"column":8},"end":{"line":232,"column":55}},"81":{"start":{"line":232,"column":12},"end":{"line":232,"column":55}},"82":{"start":{"line":233,"column":8},"end":{"line":233,"column":20}},"83":{"start":{"line":241,"column":31},"end":{"line":241,"column":51}},"84":{"start":{"line":242,"column":27},"end":{"line":242,"column":49}},"85":{"start":{"line":243,"column":8},"end":{"line":254,"column":9}},"86":{"start":{"line":244,"column":12},"end":{"line":253,"column":157}},"87":{"start":{"line":245,"column":16},"end":{"line":245,"column":70}},"88":{"start":{"line":246,"column":17},"end":{"line":253,"column":157}},"89":{"start":{"line":247,"column":16},"end":{"line":247,"column":89}},"90":{"start":{"line":248,"column":17},"end":{"line":253,"column":157}},"91":{"start":{"line":249,"column":16},"end":{"line":249,"column":74}},"92":{"start":{"line":250,"column":17},"end":{"line":253,"column":157}},"93":{"start":{"line":251,"column":16},"end":{"line":251,"column":94}},"94":{"start":{"line":253,"column":16},"end":{"line":253,"column":157}},"95":{"start":{"line":255,"column":28},"end":{"line":255,"column":51}},"96":{"start":{"line":256,"column":8},"end":{"line":273,"column":9}},"97":{"start":{"line":257,"column":12},"end":{"line":272,"column":159}},"98":{"start":{"line":258,"column":16},"end":{"line":258,"column":80}},"99":{"start":{"line":259,"column":17},"end":{"line":272,"column":159}},"100":{"start":{"line":260,"column":16},"end":{"line":260,"column":81}},"101":{"start":{"line":261,"column":17},"end":{"line":272,"column":159}},"102":{"start":{"line":262,"column":16},"end":{"line":262,"column":76}},"103":{"start":{"line":263,"column":17},"end":{"line":272,"column":159}},"104":{"start":{"line":264,"column":16},"end":{"line":264,"column":87}},"105":{"start":{"line":265,"column":17},"end":{"line":272,"column":159}},"106":{"start":{"line":266,"column":16},"end":{"line":266,"column":73}},"107":{"start":{"line":267,"column":17},"end":{"line":272,"column":159}},"108":{"start":{"line":268,"column":16},"end":{"line":268,"column":84}},"109":{"start":{"line":269,"column":17},"end":{"line":272,"column":159}},"110":{"start":{"line":270,"column":16},"end":{"line":270,"column":84}},"111":{"start":{"line":272,"column":16},"end":{"line":272,"column":159}},"112":{"start":{"line":274,"column":8},"end":{"line":274,"column":30}},"113":{"start":{"line":277,"column":0},"end":{"line":277,"column":40}},"114":{"start":{"line":287,"column":8},"end":{"line":287,"column":33}},"115":{"start":{"line":292,"column":8},"end":{"line":292,"column":30}},"116":{"start":{"line":297,"column":8},"end":{"line":297,"column":38}},"117":{"start":{"line":302,"column":8},"end":{"line":302,"column":28}},"118":{"start":{"line":307,"column":8},"end":{"line":307,"column":25}},"119":{"start":{"line":319,"column":8},"end":{"line":319,"column":28}},"120":{"start":{"line":324,"column":8},"end":{"line":324,"column":28}},"121":{"start":{"line":329,"column":8},"end":{"line":329,"column":39}},"122":{"start":{"line":334,"column":8},"end":{"line":334,"column":42}},"123":{"start":{"line":339,"column":8},"end":{"line":339,"column":41}},"124":{"start":{"line":351,"column":8},"end":{"line":351,"column":35}},"125":{"start":{"line":356,"column":8},"end":{"line":356,"column":38}},"126":{"start":{"line":362,"column":8},"end":{"line":362,"column":40}},"127":{"start":{"line":367,"column":8},"end":{"line":367,"column":34}},"128":{"start":{"line":372,"column":8},"end":{"line":372,"column":27}},"129":{"start":{"line":377,"column":8},"end":{"line":377,"column":25}},"130":{"start":{"line":382,"column":8},"end":{"line":382,"column":28}},"131":{"start":{"line":389,"column":21},"end":{"line":389,"column":23}},"132":{"start":{"line":390,"column":8},"end":{"line":390,"column":28}},"133":{"start":{"line":391,"column":8},"end":{"line":392,"column":107}},"134":{"start":{"line":392,"column":12},"end":{"line":392,"column":107}},"135":{"start":{"line":393,"column":8},"end":{"line":394,"column":117}},"136":{"start":{"line":394,"column":12},"end":{"line":394,"column":117}},"137":{"start":{"line":395,"column":8},"end":{"line":396,"column":97}},"138":{"start":{"line":396,"column":12},"end":{"line":396,"column":97}},"139":{"start":{"line":397,"column":8},"end":{"line":398,"column":101}},"140":{"start":{"line":398,"column":12},"end":{"line":398,"column":101}},"141":{"start":{"line":399,"column":8},"end":{"line":400,"column":91}},"142":{"start":{"line":400,"column":12},"end":{"line":400,"column":91}},"143":{"start":{"line":401,"column":8},"end":{"line":401,"column":29}},"144":{"start":{"line":402,"column":8},"end":{"line":403,"column":46}},"145":{"start":{"line":403,"column":12},"end":{"line":403,"column":46}},"146":{"start":{"line":404,"column":8},"end":{"line":405,"column":46}},"147":{"start":{"line":405,"column":12},"end":{"line":405,"column":46}},"148":{"start":{"line":406,"column":8},"end":{"line":407,"column":57}},"149":{"start":{"line":407,"column":12},"end":{"line":407,"column":57}},"150":{"start":{"line":408,"column":8},"end":{"line":409,"column":60}},"151":{"start":{"line":409,"column":12},"end":{"line":409,"column":60}},"152":{"start":{"line":410,"column":8},"end":{"line":411,"column":59}},"153":{"start":{"line":411,"column":12},"end":{"line":411,"column":59}},"154":{"start":{"line":412,"column":8},"end":{"line":413,"column":42}},"155":{"start":{"line":413,"column":12},"end":{"line":413,"column":42}},"156":{"start":{"line":414,"column":8},"end":{"line":415,"column":58}},"157":{"start":{"line":415,"column":12},"end":{"line":415,"column":58}},"158":{"start":{"line":416,"column":8},"end":{"line":417,"column":54}},"159":{"start":{"line":417,"column":12},"end":{"line":417,"column":54}},"160":{"start":{"line":418,"column":8},"end":{"line":419,"column":47}},"161":{"start":{"line":419,"column":12},"end":{"line":419,"column":47}},"162":{"start":{"line":420,"column":8},"end":{"line":420,"column":20}},"163":{"start":{"line":428,"column":31},"end":{"line":428,"column":51}},"164":{"start":{"line":429,"column":27},"end":{"line":429,"column":49}},"165":{"start":{"line":430,"column":8},"end":{"line":443,"column":9}},"166":{"start":{"line":431,"column":12},"end":{"line":442,"column":157}},"167":{"start":{"line":432,"column":16},"end":{"line":432,"column":78}},"168":{"start":{"line":433,"column":17},"end":{"line":442,"column":157}},"169":{"start":{"line":434,"column":16},"end":{"line":434,"column":83}},"170":{"start":{"line":435,"column":17},"end":{"line":442,"column":157}},"171":{"start":{"line":436,"column":16},"end":{"line":436,"column":75}},"172":{"start":{"line":437,"column":17},"end":{"line":442,"column":157}},"173":{"start":{"line":438,"column":16},"end":{"line":438,"column":73}},"174":{"start":{"line":439,"column":17},"end":{"line":442,"column":157}},"175":{"start":{"line":440,"column":16},"end":{"line":440,"column":70}},"176":{"start":{"line":442,"column":16},"end":{"line":442,"column":157}},"177":{"start":{"line":444,"column":28},"end":{"line":444,"column":51}},"178":{"start":{"line":445,"column":8},"end":{"line":458,"column":9}},"179":{"start":{"line":446,"column":12},"end":{"line":457,"column":159}},"180":{"start":{"line":447,"column":16},"end":{"line":447,"column":75}},"181":{"start":{"line":448,"column":17},"end":{"line":457,"column":159}},"182":{"start":{"line":449,"column":16},"end":{"line":449,"column":75}},"183":{"start":{"line":450,"column":17},"end":{"line":457,"column":159}},"184":{"start":{"line":451,"column":16},"end":{"line":451,"column":86}},"185":{"start":{"line":452,"column":17},"end":{"line":457,"column":159}},"186":{"start":{"line":453,"column":16},"end":{"line":453,"column":89}},"187":{"start":{"line":454,"column":17},"end":{"line":457,"column":159}},"188":{"start":{"line":455,"column":16},"end":{"line":455,"column":88}},"189":{"start":{"line":457,"column":16},"end":{"line":457,"column":159}},"190":{"start":{"line":459,"column":8},"end":{"line":460,"column":65}},"191":{"start":{"line":460,"column":12},"end":{"line":460,"column":65}},"192":{"start":{"line":461,"column":8},"end":{"line":462,"column":77}},"193":{"start":{"line":462,"column":12},"end":{"line":462,"column":77}},"194":{"start":{"line":463,"column":8},"end":{"line":464,"column":73}},"195":{"start":{"line":464,"column":12},"end":{"line":464,"column":73}},"196":{"start":{"line":465,"column":8},"end":{"line":466,"column":83}},"197":{"start":{"line":466,"column":12},"end":{"line":466,"column":83}},"198":{"start":{"line":467,"column":8},"end":{"line":467,"column":30}},"199":{"start":{"line":470,"column":0},"end":{"line":470,"column":40}},"200":{"start":{"line":480,"column":8},"end":{"line":480,"column":30}},"201":{"start":{"line":485,"column":8},"end":{"line":485,"column":25}},"202":{"start":{"line":490,"column":8},"end":{"line":490,"column":49}},"203":{"start":{"line":495,"column":8},"end":{"line":495,"column":33}},"204":{"start":{"line":500,"column":8},"end":{"line":500,"column":33}},"205":{"start":{"line":505,"column":8},"end":{"line":505,"column":38}},"206":{"start":{"line":510,"column":8},"end":{"line":510,"column":28}},"207":{"start":{"line":515,"column":8},"end":{"line":515,"column":30}},"208":{"start":{"line":527,"column":8},"end":{"line":527,"column":33}},"209":{"start":{"line":532,"column":8},"end":{"line":532,"column":38}},"210":{"start":{"line":537,"column":8},"end":{"line":537,"column":28}},"211":{"start":{"line":542,"column":8},"end":{"line":542,"column":44}},"212":{"start":{"line":547,"column":8},"end":{"line":547,"column":44}},"213":{"start":{"line":552,"column":8},"end":{"line":552,"column":44}},"214":{"start":{"line":557,"column":8},"end":{"line":557,"column":44}},"215":{"start":{"line":562,"column":8},"end":{"line":562,"column":28}},"216":{"start":{"line":567,"column":8},"end":{"line":567,"column":39}},"217":{"start":{"line":572,"column":8},"end":{"line":572,"column":42}},"218":{"start":{"line":577,"column":8},"end":{"line":577,"column":41}},"219":{"start":{"line":589,"column":8},"end":{"line":589,"column":35}},"220":{"start":{"line":594,"column":8},"end":{"line":594,"column":38}},"221":{"start":{"line":600,"column":8},"end":{"line":600,"column":40}},"222":{"start":{"line":605,"column":8},"end":{"line":605,"column":36}},"223":{"start":{"line":610,"column":8},"end":{"line":610,"column":28}},"224":{"start":{"line":617,"column":21},"end":{"line":617,"column":23}},"225":{"start":{"line":618,"column":8},"end":{"line":618,"column":28}},"226":{"start":{"line":619,"column":8},"end":{"line":620,"column":101}},"227":{"start":{"line":620,"column":12},"end":{"line":620,"column":101}},"228":{"start":{"line":621,"column":8},"end":{"line":622,"column":91}},"229":{"start":{"line":622,"column":12},"end":{"line":622,"column":91}},"230":{"start":{"line":623,"column":8},"end":{"line":624,"column":139}},"231":{"start":{"line":624,"column":12},"end":{"line":624,"column":139}},"232":{"start":{"line":625,"column":8},"end":{"line":626,"column":107}},"233":{"start":{"line":626,"column":12},"end":{"line":626,"column":107}},"234":{"start":{"line":627,"column":8},"end":{"line":628,"column":107}},"235":{"start":{"line":628,"column":12},"end":{"line":628,"column":107}},"236":{"start":{"line":629,"column":8},"end":{"line":630,"column":117}},"237":{"start":{"line":630,"column":12},"end":{"line":630,"column":117}},"238":{"start":{"line":631,"column":8},"end":{"line":632,"column":97}},"239":{"start":{"line":632,"column":12},"end":{"line":632,"column":97}},"240":{"start":{"line":633,"column":8},"end":{"line":634,"column":101}},"241":{"start":{"line":634,"column":12},"end":{"line":634,"column":101}},"242":{"start":{"line":635,"column":8},"end":{"line":635,"column":29}},"243":{"start":{"line":636,"column":8},"end":{"line":637,"column":51}},"244":{"start":{"line":637,"column":12},"end":{"line":637,"column":51}},"245":{"start":{"line":638,"column":8},"end":{"line":639,"column":56}},"246":{"start":{"line":639,"column":12},"end":{"line":639,"column":56}},"247":{"start":{"line":640,"column":8},"end":{"line":641,"column":46}},"248":{"start":{"line":641,"column":12},"end":{"line":641,"column":46}},"249":{"start":{"line":642,"column":8},"end":{"line":643,"column":62}},"250":{"start":{"line":643,"column":12},"end":{"line":643,"column":62}},"251":{"start":{"line":644,"column":8},"end":{"line":645,"column":62}},"252":{"start":{"line":645,"column":12},"end":{"line":645,"column":62}},"253":{"start":{"line":646,"column":8},"end":{"line":647,"column":62}},"254":{"start":{"line":647,"column":12},"end":{"line":647,"column":62}},"255":{"start":{"line":648,"column":8},"end":{"line":649,"column":62}},"256":{"start":{"line":649,"column":12},"end":{"line":649,"column":62}},"257":{"start":{"line":650,"column":8},"end":{"line":651,"column":46}},"258":{"start":{"line":651,"column":12},"end":{"line":651,"column":46}},"259":{"start":{"line":652,"column":8},"end":{"line":653,"column":57}},"260":{"start":{"line":653,"column":12},"end":{"line":653,"column":57}},"261":{"start":{"line":654,"column":8},"end":{"line":655,"column":60}},"262":{"start":{"line":655,"column":12},"end":{"line":655,"column":60}},"263":{"start":{"line":656,"column":8},"end":{"line":657,"column":59}},"264":{"start":{"line":657,"column":12},"end":{"line":657,"column":59}},"265":{"start":{"line":658,"column":8},"end":{"line":659,"column":47}},"266":{"start":{"line":659,"column":12},"end":{"line":659,"column":47}},"267":{"start":{"line":660,"column":8},"end":{"line":661,"column":44}},"268":{"start":{"line":661,"column":12},"end":{"line":661,"column":44}},"269":{"start":{"line":662,"column":8},"end":{"line":662,"column":20}},"270":{"start":{"line":670,"column":31},"end":{"line":670,"column":51}},"271":{"start":{"line":671,"column":27},"end":{"line":671,"column":49}},"272":{"start":{"line":672,"column":8},"end":{"line":691,"column":9}},"273":{"start":{"line":673,"column":12},"end":{"line":690,"column":157}},"274":{"start":{"line":674,"column":16},"end":{"line":674,"column":75}},"275":{"start":{"line":675,"column":17},"end":{"line":690,"column":157}},"276":{"start":{"line":676,"column":16},"end":{"line":676,"column":70}},"277":{"start":{"line":677,"column":17},"end":{"line":690,"column":157}},"278":{"start":{"line":678,"column":16},"end":{"line":678,"column":94}},"279":{"start":{"line":679,"column":17},"end":{"line":690,"column":157}},"280":{"start":{"line":680,"column":16},"end":{"line":680,"column":78}},"281":{"start":{"line":681,"column":17},"end":{"line":690,"column":157}},"282":{"start":{"line":682,"column":16},"end":{"line":682,"column":78}},"283":{"start":{"line":683,"column":17},"end":{"line":690,"column":157}},"284":{"start":{"line":684,"column":16},"end":{"line":684,"column":83}},"285":{"start":{"line":685,"column":17},"end":{"line":690,"column":157}},"286":{"start":{"line":686,"column":16},"end":{"line":686,"column":73}},"287":{"start":{"line":687,"column":17},"end":{"line":690,"column":157}},"288":{"start":{"line":688,"column":16},"end":{"line":688,"column":75}},"289":{"start":{"line":690,"column":16},"end":{"line":690,"column":157}},"290":{"start":{"line":692,"column":28},"end":{"line":692,"column":51}},"291":{"start":{"line":693,"column":8},"end":{"line":718,"column":9}},"292":{"start":{"line":694,"column":12},"end":{"line":717,"column":159}},"293":{"start":{"line":695,"column":16},"end":{"line":695,"column":80}},"294":{"start":{"line":696,"column":17},"end":{"line":717,"column":159}},"295":{"start":{"line":697,"column":16},"end":{"line":697,"column":85}},"296":{"start":{"line":698,"column":17},"end":{"line":717,"column":159}},"297":{"start":{"line":699,"column":16},"end":{"line":699,"column":75}},"298":{"start":{"line":700,"column":17},"end":{"line":717,"column":159}},"299":{"start":{"line":701,"column":16},"end":{"line":701,"column":91}},"300":{"start":{"line":702,"column":17},"end":{"line":717,"column":159}},"301":{"start":{"line":703,"column":16},"end":{"line":703,"column":91}},"302":{"start":{"line":704,"column":17},"end":{"line":717,"column":159}},"303":{"start":{"line":705,"column":16},"end":{"line":705,"column":91}},"304":{"start":{"line":706,"column":17},"end":{"line":717,"column":159}},"305":{"start":{"line":707,"column":16},"end":{"line":707,"column":91}},"306":{"start":{"line":708,"column":17},"end":{"line":717,"column":159}},"307":{"start":{"line":709,"column":16},"end":{"line":709,"column":75}},"308":{"start":{"line":710,"column":17},"end":{"line":717,"column":159}},"309":{"start":{"line":711,"column":16},"end":{"line":711,"column":86}},"310":{"start":{"line":712,"column":17},"end":{"line":717,"column":159}},"311":{"start":{"line":713,"column":16},"end":{"line":713,"column":89}},"312":{"start":{"line":714,"column":17},"end":{"line":717,"column":159}},"313":{"start":{"line":715,"column":16},"end":{"line":715,"column":88}},"314":{"start":{"line":717,"column":16},"end":{"line":717,"column":159}},"315":{"start":{"line":719,"column":8},"end":{"line":720,"column":87}},"316":{"start":{"line":720,"column":12},"end":{"line":720,"column":87}},"317":{"start":{"line":721,"column":8},"end":{"line":722,"column":65}},"318":{"start":{"line":722,"column":12},"end":{"line":722,"column":65}},"319":{"start":{"line":723,"column":8},"end":{"line":723,"column":30}},"320":{"start":{"line":726,"column":0},"end":{"line":726,"column":40}},"321":{"start":{"line":736,"column":8},"end":{"line":736,"column":30}},"322":{"start":{"line":741,"column":8},"end":{"line":741,"column":25}},"323":{"start":{"line":746,"column":8},"end":{"line":746,"column":49}},"324":{"start":{"line":751,"column":8},"end":{"line":751,"column":33}},"325":{"start":{"line":756,"column":8},"end":{"line":756,"column":33}},"326":{"start":{"line":761,"column":8},"end":{"line":761,"column":44}},"327":{"start":{"line":766,"column":8},"end":{"line":766,"column":33}},"328":{"start":{"line":771,"column":8},"end":{"line":771,"column":30}},"329":{"start":{"line":783,"column":8},"end":{"line":783,"column":33}},"330":{"start":{"line":788,"column":8},"end":{"line":788,"column":38}},"331":{"start":{"line":793,"column":8},"end":{"line":793,"column":33}},"332":{"start":{"line":798,"column":8},"end":{"line":798,"column":34}},"333":{"start":{"line":803,"column":8},"end":{"line":803,"column":26}},"334":{"start":{"line":808,"column":8},"end":{"line":808,"column":37}},"335":{"start":{"line":813,"column":8},"end":{"line":813,"column":40}},"336":{"start":{"line":818,"column":8},"end":{"line":818,"column":28}},"337":{"start":{"line":823,"column":8},"end":{"line":823,"column":39}},"338":{"start":{"line":828,"column":8},"end":{"line":828,"column":42}},"339":{"start":{"line":840,"column":8},"end":{"line":840,"column":35}},"340":{"start":{"line":845,"column":8},"end":{"line":845,"column":38}},"341":{"start":{"line":851,"column":8},"end":{"line":851,"column":40}},"342":{"start":{"line":856,"column":8},"end":{"line":856,"column":38}},"343":{"start":{"line":861,"column":8},"end":{"line":861,"column":39}},"344":{"start":{"line":866,"column":8},"end":{"line":866,"column":28}},"345":{"start":{"line":873,"column":21},"end":{"line":873,"column":23}},"346":{"start":{"line":874,"column":8},"end":{"line":874,"column":28}},"347":{"start":{"line":875,"column":8},"end":{"line":876,"column":101}},"348":{"start":{"line":876,"column":12},"end":{"line":876,"column":101}},"349":{"start":{"line":877,"column":8},"end":{"line":878,"column":91}},"350":{"start":{"line":878,"column":12},"end":{"line":878,"column":91}},"351":{"start":{"line":879,"column":8},"end":{"line":880,"column":139}},"352":{"start":{"line":880,"column":12},"end":{"line":880,"column":139}},"353":{"start":{"line":881,"column":8},"end":{"line":882,"column":107}},"354":{"start":{"line":882,"column":12},"end":{"line":882,"column":107}},"355":{"start":{"line":883,"column":8},"end":{"line":884,"column":107}},"356":{"start":{"line":884,"column":12},"end":{"line":884,"column":107}},"357":{"start":{"line":885,"column":8},"end":{"line":886,"column":129}},"358":{"start":{"line":886,"column":12},"end":{"line":886,"column":129}},"359":{"start":{"line":887,"column":8},"end":{"line":888,"column":107}},"360":{"start":{"line":888,"column":12},"end":{"line":888,"column":107}},"361":{"start":{"line":889,"column":8},"end":{"line":890,"column":101}},"362":{"start":{"line":890,"column":12},"end":{"line":890,"column":101}},"363":{"start":{"line":891,"column":8},"end":{"line":891,"column":29}},"364":{"start":{"line":892,"column":8},"end":{"line":893,"column":51}},"365":{"start":{"line":893,"column":12},"end":{"line":893,"column":51}},"366":{"start":{"line":894,"column":8},"end":{"line":895,"column":56}},"367":{"start":{"line":895,"column":12},"end":{"line":895,"column":56}},"368":{"start":{"line":896,"column":8},"end":{"line":897,"column":51}},"369":{"start":{"line":897,"column":12},"end":{"line":897,"column":51}},"370":{"start":{"line":898,"column":8},"end":{"line":899,"column":52}},"371":{"start":{"line":899,"column":12},"end":{"line":899,"column":52}},"372":{"start":{"line":900,"column":8},"end":{"line":901,"column":44}},"373":{"start":{"line":901,"column":12},"end":{"line":901,"column":44}},"374":{"start":{"line":902,"column":8},"end":{"line":903,"column":55}},"375":{"start":{"line":903,"column":12},"end":{"line":903,"column":55}},"376":{"start":{"line":904,"column":8},"end":{"line":905,"column":58}},"377":{"start":{"line":905,"column":12},"end":{"line":905,"column":58}},"378":{"start":{"line":906,"column":8},"end":{"line":907,"column":46}},"379":{"start":{"line":907,"column":12},"end":{"line":907,"column":46}},"380":{"start":{"line":908,"column":8},"end":{"line":909,"column":57}},"381":{"start":{"line":909,"column":12},"end":{"line":909,"column":57}},"382":{"start":{"line":910,"column":8},"end":{"line":911,"column":60}},"383":{"start":{"line":911,"column":12},"end":{"line":911,"column":60}},"384":{"start":{"line":912,"column":8},"end":{"line":913,"column":46}},"385":{"start":{"line":913,"column":12},"end":{"line":913,"column":46}},"386":{"start":{"line":914,"column":8},"end":{"line":915,"column":82}},"387":{"start":{"line":915,"column":12},"end":{"line":915,"column":82}},"388":{"start":{"line":916,"column":8},"end":{"line":917,"column":47}},"389":{"start":{"line":917,"column":12},"end":{"line":917,"column":47}},"390":{"start":{"line":918,"column":8},"end":{"line":918,"column":20}},"391":{"start":{"line":926,"column":31},"end":{"line":926,"column":51}},"392":{"start":{"line":927,"column":27},"end":{"line":927,"column":49}},"393":{"start":{"line":928,"column":8},"end":{"line":947,"column":9}},"394":{"start":{"line":929,"column":12},"end":{"line":946,"column":157}},"395":{"start":{"line":930,"column":16},"end":{"line":930,"column":75}},"396":{"start":{"line":931,"column":17},"end":{"line":946,"column":157}},"397":{"start":{"line":932,"column":16},"end":{"line":932,"column":70}},"398":{"start":{"line":933,"column":17},"end":{"line":946,"column":157}},"399":{"start":{"line":934,"column":16},"end":{"line":934,"column":94}},"400":{"start":{"line":935,"column":17},"end":{"line":946,"column":157}},"401":{"start":{"line":936,"column":16},"end":{"line":936,"column":78}},"402":{"start":{"line":937,"column":17},"end":{"line":946,"column":157}},"403":{"start":{"line":938,"column":16},"end":{"line":938,"column":78}},"404":{"start":{"line":939,"column":17},"end":{"line":946,"column":157}},"405":{"start":{"line":940,"column":16},"end":{"line":940,"column":89}},"406":{"start":{"line":941,"column":17},"end":{"line":946,"column":157}},"407":{"start":{"line":942,"column":16},"end":{"line":942,"column":78}},"408":{"start":{"line":943,"column":17},"end":{"line":946,"column":157}},"409":{"start":{"line":944,"column":16},"end":{"line":944,"column":75}},"410":{"start":{"line":946,"column":16},"end":{"line":946,"column":157}},"411":{"start":{"line":948,"column":28},"end":{"line":948,"column":51}},"412":{"start":{"line":949,"column":8},"end":{"line":972,"column":9}},"413":{"start":{"line":950,"column":12},"end":{"line":971,"column":159}},"414":{"start":{"line":951,"column":16},"end":{"line":951,"column":80}},"415":{"start":{"line":952,"column":17},"end":{"line":971,"column":159}},"416":{"start":{"line":953,"column":16},"end":{"line":953,"column":85}},"417":{"start":{"line":954,"column":17},"end":{"line":971,"column":159}},"418":{"start":{"line":955,"column":16},"end":{"line":955,"column":80}},"419":{"start":{"line":956,"column":17},"end":{"line":971,"column":159}},"420":{"start":{"line":957,"column":16},"end":{"line":957,"column":81}},"421":{"start":{"line":958,"column":17},"end":{"line":971,"column":159}},"422":{"start":{"line":959,"column":16},"end":{"line":959,"column":73}},"423":{"start":{"line":960,"column":17},"end":{"line":971,"column":159}},"424":{"start":{"line":961,"column":16},"end":{"line":961,"column":84}},"425":{"start":{"line":962,"column":17},"end":{"line":971,"column":159}},"426":{"start":{"line":963,"column":16},"end":{"line":963,"column":87}},"427":{"start":{"line":964,"column":17},"end":{"line":971,"column":159}},"428":{"start":{"line":965,"column":16},"end":{"line":965,"column":75}},"429":{"start":{"line":966,"column":17},"end":{"line":971,"column":159}},"430":{"start":{"line":967,"column":16},"end":{"line":967,"column":89}},"431":{"start":{"line":968,"column":17},"end":{"line":971,"column":159}},"432":{"start":{"line":969,"column":16},"end":{"line":969,"column":86}},"433":{"start":{"line":971,"column":16},"end":{"line":971,"column":159}},"434":{"start":{"line":973,"column":8},"end":{"line":974,"column":91}},"435":{"start":{"line":974,"column":12},"end":{"line":974,"column":91}},"436":{"start":{"line":975,"column":8},"end":{"line":976,"column":101}},"437":{"start":{"line":976,"column":12},"end":{"line":976,"column":101}},"438":{"start":{"line":977,"column":8},"end":{"line":978,"column":65}},"439":{"start":{"line":978,"column":12},"end":{"line":978,"column":65}},"440":{"start":{"line":979,"column":8},"end":{"line":979,"column":30}},"441":{"start":{"line":982,"column":0},"end":{"line":982,"column":40}},"442":{"start":{"line":992,"column":8},"end":{"line":992,"column":30}},"443":{"start":{"line":997,"column":8},"end":{"line":997,"column":25}},"444":{"start":{"line":1002,"column":8},"end":{"line":1002,"column":49}},"445":{"start":{"line":1007,"column":8},"end":{"line":1007,"column":30}},"446":{"start":{"line":1019,"column":8},"end":{"line":1019,"column":33}},"447":{"start":{"line":1024,"column":8},"end":{"line":1024,"column":38}},"448":{"start":{"line":1029,"column":8},"end":{"line":1029,"column":44}},"449":{"start":{"line":1034,"column":8},"end":{"line":1034,"column":44}},"450":{"start":{"line":1039,"column":8},"end":{"line":1039,"column":44}},"451":{"start":{"line":1051,"column":8},"end":{"line":1051,"column":45}},"452":{"start":{"line":1056,"column":8},"end":{"line":1056,"column":48}},"453":{"start":{"line":1062,"column":8},"end":{"line":1062,"column":50}},"454":{"start":{"line":1067,"column":8},"end":{"line":1067,"column":28}},"455":{"start":{"line":1074,"column":21},"end":{"line":1074,"column":23}},"456":{"start":{"line":1075,"column":8},"end":{"line":1075,"column":28}},"457":{"start":{"line":1076,"column":8},"end":{"line":1077,"column":101}},"458":{"start":{"line":1077,"column":12},"end":{"line":1077,"column":101}},"459":{"start":{"line":1078,"column":8},"end":{"line":1079,"column":91}},"460":{"start":{"line":1079,"column":12},"end":{"line":1079,"column":91}},"461":{"start":{"line":1080,"column":8},"end":{"line":1081,"column":139}},"462":{"start":{"line":1081,"column":12},"end":{"line":1081,"column":139}},"463":{"start":{"line":1082,"column":8},"end":{"line":1083,"column":101}},"464":{"start":{"line":1083,"column":12},"end":{"line":1083,"column":101}},"465":{"start":{"line":1084,"column":8},"end":{"line":1084,"column":29}},"466":{"start":{"line":1085,"column":8},"end":{"line":1086,"column":51}},"467":{"start":{"line":1086,"column":12},"end":{"line":1086,"column":51}},"468":{"start":{"line":1087,"column":8},"end":{"line":1088,"column":56}},"469":{"start":{"line":1088,"column":12},"end":{"line":1088,"column":56}},"470":{"start":{"line":1089,"column":8},"end":{"line":1090,"column":62}},"471":{"start":{"line":1090,"column":12},"end":{"line":1090,"column":62}},"472":{"start":{"line":1091,"column":8},"end":{"line":1092,"column":62}},"473":{"start":{"line":1092,"column":12},"end":{"line":1092,"column":62}},"474":{"start":{"line":1093,"column":8},"end":{"line":1094,"column":62}},"475":{"start":{"line":1094,"column":12},"end":{"line":1094,"column":62}},"476":{"start":{"line":1095,"column":8},"end":{"line":1096,"column":47}},"477":{"start":{"line":1096,"column":12},"end":{"line":1096,"column":47}},"478":{"start":{"line":1097,"column":8},"end":{"line":1097,"column":20}},"479":{"start":{"line":1105,"column":31},"end":{"line":1105,"column":61}},"480":{"start":{"line":1106,"column":27},"end":{"line":1106,"column":49}},"481":{"start":{"line":1107,"column":8},"end":{"line":1118,"column":9}},"482":{"start":{"line":1108,"column":12},"end":{"line":1117,"column":157}},"483":{"start":{"line":1109,"column":16},"end":{"line":1109,"column":75}},"484":{"start":{"line":1110,"column":17},"end":{"line":1117,"column":157}},"485":{"start":{"line":1111,"column":16},"end":{"line":1111,"column":70}},"486":{"start":{"line":1112,"column":17},"end":{"line":1117,"column":157}},"487":{"start":{"line":1113,"column":16},"end":{"line":1113,"column":94}},"488":{"start":{"line":1114,"column":17},"end":{"line":1117,"column":157}},"489":{"start":{"line":1115,"column":16},"end":{"line":1115,"column":75}},"490":{"start":{"line":1117,"column":16},"end":{"line":1117,"column":157}},"491":{"start":{"line":1119,"column":28},"end":{"line":1119,"column":51}},"492":{"start":{"line":1120,"column":8},"end":{"line":1133,"column":9}},"493":{"start":{"line":1121,"column":12},"end":{"line":1132,"column":159}},"494":{"start":{"line":1122,"column":16},"end":{"line":1122,"column":80}},"495":{"start":{"line":1123,"column":17},"end":{"line":1132,"column":159}},"496":{"start":{"line":1124,"column":16},"end":{"line":1124,"column":85}},"497":{"start":{"line":1125,"column":17},"end":{"line":1132,"column":159}},"498":{"start":{"line":1126,"column":16},"end":{"line":1126,"column":91}},"499":{"start":{"line":1127,"column":17},"end":{"line":1132,"column":159}},"500":{"start":{"line":1128,"column":16},"end":{"line":1128,"column":91}},"501":{"start":{"line":1129,"column":17},"end":{"line":1132,"column":159}},"502":{"start":{"line":1130,"column":16},"end":{"line":1130,"column":91}},"503":{"start":{"line":1132,"column":16},"end":{"line":1132,"column":159}},"504":{"start":{"line":1134,"column":8},"end":{"line":1135,"column":65}},"505":{"start":{"line":1135,"column":12},"end":{"line":1135,"column":65}},"506":{"start":{"line":1136,"column":8},"end":{"line":1136,"column":30}},"507":{"start":{"line":1139,"column":0},"end":{"line":1139,"column":60}},"508":{"start":{"line":1149,"column":8},"end":{"line":1149,"column":31}},"509":{"start":{"line":1154,"column":8},"end":{"line":1154,"column":31}},"510":{"start":{"line":1159,"column":8},"end":{"line":1159,"column":26}},"511":{"start":{"line":1164,"column":8},"end":{"line":1164,"column":26}},"512":{"start":{"line":1176,"column":8},"end":{"line":1176,"column":28}},"513":{"start":{"line":1181,"column":8},"end":{"line":1181,"column":41}},"514":{"start":{"line":1193,"column":8},"end":{"line":1193,"column":47}},"515":{"start":{"line":1198,"column":8},"end":{"line":1198,"column":50}},"516":{"start":{"line":1204,"column":8},"end":{"line":1204,"column":52}},"517":{"start":{"line":1209,"column":8},"end":{"line":1209,"column":36}},"518":{"start":{"line":1214,"column":8},"end":{"line":1214,"column":37}},"519":{"start":{"line":1219,"column":8},"end":{"line":1219,"column":35}},"520":{"start":{"line":1224,"column":8},"end":{"line":1224,"column":36}},"521":{"start":{"line":1229,"column":8},"end":{"line":1229,"column":29}},"522":{"start":{"line":1234,"column":8},"end":{"line":1234,"column":27}},"523":{"start":{"line":1239,"column":8},"end":{"line":1239,"column":28}},"524":{"start":{"line":1246,"column":21},"end":{"line":1246,"column":23}},"525":{"start":{"line":1247,"column":8},"end":{"line":1247,"column":28}},"526":{"start":{"line":1248,"column":8},"end":{"line":1249,"column":103}},"527":{"start":{"line":1249,"column":12},"end":{"line":1249,"column":103}},"528":{"start":{"line":1250,"column":8},"end":{"line":1251,"column":103}},"529":{"start":{"line":1251,"column":12},"end":{"line":1251,"column":103}},"530":{"start":{"line":1252,"column":8},"end":{"line":1253,"column":93}},"531":{"start":{"line":1253,"column":12},"end":{"line":1253,"column":93}},"532":{"start":{"line":1254,"column":8},"end":{"line":1255,"column":93}},"533":{"start":{"line":1255,"column":12},"end":{"line":1255,"column":93}},"534":{"start":{"line":1256,"column":8},"end":{"line":1256,"column":29}},"535":{"start":{"line":1257,"column":8},"end":{"line":1258,"column":46}},"536":{"start":{"line":1258,"column":12},"end":{"line":1258,"column":46}},"537":{"start":{"line":1259,"column":8},"end":{"line":1260,"column":59}},"538":{"start":{"line":1260,"column":12},"end":{"line":1260,"column":59}},"539":{"start":{"line":1261,"column":8},"end":{"line":1262,"column":74}},"540":{"start":{"line":1262,"column":12},"end":{"line":1262,"column":74}},"541":{"start":{"line":1263,"column":8},"end":{"line":1264,"column":76}},"542":{"start":{"line":1264,"column":12},"end":{"line":1264,"column":76}},"543":{"start":{"line":1265,"column":8},"end":{"line":1266,"column":72}},"544":{"start":{"line":1266,"column":12},"end":{"line":1266,"column":72}},"545":{"start":{"line":1267,"column":8},"end":{"line":1268,"column":74}},"546":{"start":{"line":1268,"column":12},"end":{"line":1268,"column":74}},"547":{"start":{"line":1269,"column":8},"end":{"line":1270,"column":60}},"548":{"start":{"line":1270,"column":12},"end":{"line":1270,"column":60}},"549":{"start":{"line":1271,"column":8},"end":{"line":1272,"column":58}},"550":{"start":{"line":1272,"column":12},"end":{"line":1272,"column":58}},"551":{"start":{"line":1273,"column":8},"end":{"line":1274,"column":47}},"552":{"start":{"line":1274,"column":12},"end":{"line":1274,"column":47}},"553":{"start":{"line":1275,"column":8},"end":{"line":1275,"column":20}},"554":{"start":{"line":1283,"column":31},"end":{"line":1283,"column":63}},"555":{"start":{"line":1284,"column":27},"end":{"line":1284,"column":49}},"556":{"start":{"line":1285,"column":8},"end":{"line":1296,"column":9}},"557":{"start":{"line":1286,"column":12},"end":{"line":1295,"column":157}},"558":{"start":{"line":1287,"column":16},"end":{"line":1287,"column":76}},"559":{"start":{"line":1288,"column":17},"end":{"line":1295,"column":157}},"560":{"start":{"line":1289,"column":16},"end":{"line":1289,"column":76}},"561":{"start":{"line":1290,"column":17},"end":{"line":1295,"column":157}},"562":{"start":{"line":1291,"column":16},"end":{"line":1291,"column":71}},"563":{"start":{"line":1292,"column":17},"end":{"line":1295,"column":157}},"564":{"start":{"line":1293,"column":16},"end":{"line":1293,"column":71}},"565":{"start":{"line":1295,"column":16},"end":{"line":1295,"column":157}},"566":{"start":{"line":1297,"column":28},"end":{"line":1297,"column":51}},"567":{"start":{"line":1298,"column":8},"end":{"line":1305,"column":9}},"568":{"start":{"line":1299,"column":12},"end":{"line":1304,"column":159}},"569":{"start":{"line":1300,"column":16},"end":{"line":1300,"column":75}},"570":{"start":{"line":1301,"column":17},"end":{"line":1304,"column":159}},"571":{"start":{"line":1302,"column":16},"end":{"line":1302,"column":88}},"572":{"start":{"line":1304,"column":16},"end":{"line":1304,"column":159}},"573":{"start":{"line":1306,"column":8},"end":{"line":1307,"column":93}},"574":{"start":{"line":1307,"column":12},"end":{"line":1307,"column":93}},"575":{"start":{"line":1308,"column":8},"end":{"line":1309,"column":95}},"576":{"start":{"line":1309,"column":12},"end":{"line":1309,"column":95}},"577":{"start":{"line":1310,"column":8},"end":{"line":1311,"column":91}},"578":{"start":{"line":1311,"column":12},"end":{"line":1311,"column":91}},"579":{"start":{"line":1312,"column":8},"end":{"line":1313,"column":93}},"580":{"start":{"line":1313,"column":12},"end":{"line":1313,"column":93}},"581":{"start":{"line":1314,"column":8},"end":{"line":1315,"column":79}},"582":{"start":{"line":1315,"column":12},"end":{"line":1315,"column":79}},"583":{"start":{"line":1316,"column":8},"end":{"line":1317,"column":77}},"584":{"start":{"line":1317,"column":12},"end":{"line":1317,"column":77}},"585":{"start":{"line":1318,"column":8},"end":{"line":1319,"column":65}},"586":{"start":{"line":1319,"column":12},"end":{"line":1319,"column":65}},"587":{"start":{"line":1320,"column":8},"end":{"line":1320,"column":30}},"588":{"start":{"line":1323,"column":0},"end":{"line":1323,"column":64}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":1},"end":{"line":11,"column":2}},"loc":{"start":{"line":11,"column":23},"end":{"line":20,"column":1}},"line":11},"1":{"name":"(anonymous_1)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":18},"end":{"line":36,"column":5}},"line":25},"2":{"name":"(anonymous_2)","decl":{"start":{"line":42,"column":4},"end":{"line":42,"column":5}},"loc":{"start":{"line":42,"column":18},"end":{"line":48,"column":5}},"line":42},"3":{"name":"(anonymous_3)","decl":{"start":{"line":52,"column":4},"end":{"line":52,"column":5}},"loc":{"start":{"line":52,"column":18},"end":{"line":69,"column":5}},"line":52},"4":{"name":"(anonymous_4)","decl":{"start":{"line":74,"column":4},"end":{"line":74,"column":5}},"loc":{"start":{"line":74,"column":13},"end":{"line":85,"column":5}},"line":74},"5":{"name":"(anonymous_5)","decl":{"start":{"line":91,"column":4},"end":{"line":91,"column":5}},"loc":{"start":{"line":91,"column":40},"end":{"line":110,"column":5}},"line":91},"6":{"name":"(anonymous_6)","decl":{"start":{"line":117,"column":4},"end":{"line":117,"column":5}},"loc":{"start":{"line":117,"column":18},"end":{"line":138,"column":5}},"line":117},"7":{"name":"(anonymous_7)","decl":{"start":{"line":144,"column":4},"end":{"line":144,"column":5}},"loc":{"start":{"line":144,"column":18},"end":{"line":180,"column":5}},"line":144},"8":{"name":"(anonymous_8)","decl":{"start":{"line":186,"column":4},"end":{"line":186,"column":5}},"loc":{"start":{"line":186,"column":18},"end":{"line":202,"column":5}},"line":186},"9":{"name":"(anonymous_9)","decl":{"start":{"line":207,"column":4},"end":{"line":207,"column":5}},"loc":{"start":{"line":207,"column":13},"end":{"line":234,"column":5}},"line":207},"10":{"name":"(anonymous_10)","decl":{"start":{"line":240,"column":4},"end":{"line":240,"column":5}},"loc":{"start":{"line":240,"column":40},"end":{"line":275,"column":5}},"line":240},"11":{"name":"(anonymous_11)","decl":{"start":{"line":282,"column":4},"end":{"line":282,"column":5}},"loc":{"start":{"line":282,"column":18},"end":{"line":308,"column":5}},"line":282},"12":{"name":"(anonymous_12)","decl":{"start":{"line":314,"column":4},"end":{"line":314,"column":5}},"loc":{"start":{"line":314,"column":18},"end":{"line":340,"column":5}},"line":314},"13":{"name":"(anonymous_13)","decl":{"start":{"line":346,"column":4},"end":{"line":346,"column":5}},"loc":{"start":{"line":346,"column":18},"end":{"line":383,"column":5}},"line":346},"14":{"name":"(anonymous_14)","decl":{"start":{"line":388,"column":4},"end":{"line":388,"column":5}},"loc":{"start":{"line":388,"column":13},"end":{"line":421,"column":5}},"line":388},"15":{"name":"(anonymous_15)","decl":{"start":{"line":427,"column":4},"end":{"line":427,"column":5}},"loc":{"start":{"line":427,"column":40},"end":{"line":468,"column":5}},"line":427},"16":{"name":"(anonymous_16)","decl":{"start":{"line":475,"column":4},"end":{"line":475,"column":5}},"loc":{"start":{"line":475,"column":18},"end":{"line":516,"column":5}},"line":475},"17":{"name":"(anonymous_17)","decl":{"start":{"line":522,"column":4},"end":{"line":522,"column":5}},"loc":{"start":{"line":522,"column":18},"end":{"line":578,"column":5}},"line":522},"18":{"name":"(anonymous_18)","decl":{"start":{"line":584,"column":4},"end":{"line":584,"column":5}},"loc":{"start":{"line":584,"column":18},"end":{"line":611,"column":5}},"line":584},"19":{"name":"(anonymous_19)","decl":{"start":{"line":616,"column":4},"end":{"line":616,"column":5}},"loc":{"start":{"line":616,"column":13},"end":{"line":663,"column":5}},"line":616},"20":{"name":"(anonymous_20)","decl":{"start":{"line":669,"column":4},"end":{"line":669,"column":5}},"loc":{"start":{"line":669,"column":40},"end":{"line":724,"column":5}},"line":669},"21":{"name":"(anonymous_21)","decl":{"start":{"line":731,"column":4},"end":{"line":731,"column":5}},"loc":{"start":{"line":731,"column":18},"end":{"line":772,"column":5}},"line":731},"22":{"name":"(anonymous_22)","decl":{"start":{"line":778,"column":4},"end":{"line":778,"column":5}},"loc":{"start":{"line":778,"column":18},"end":{"line":829,"column":5}},"line":778},"23":{"name":"(anonymous_23)","decl":{"start":{"line":835,"column":4},"end":{"line":835,"column":5}},"loc":{"start":{"line":835,"column":18},"end":{"line":867,"column":5}},"line":835},"24":{"name":"(anonymous_24)","decl":{"start":{"line":872,"column":4},"end":{"line":872,"column":5}},"loc":{"start":{"line":872,"column":13},"end":{"line":919,"column":5}},"line":872},"25":{"name":"(anonymous_25)","decl":{"start":{"line":925,"column":4},"end":{"line":925,"column":5}},"loc":{"start":{"line":925,"column":40},"end":{"line":980,"column":5}},"line":925},"26":{"name":"(anonymous_26)","decl":{"start":{"line":987,"column":4},"end":{"line":987,"column":5}},"loc":{"start":{"line":987,"column":18},"end":{"line":1008,"column":5}},"line":987},"27":{"name":"(anonymous_27)","decl":{"start":{"line":1014,"column":4},"end":{"line":1014,"column":5}},"loc":{"start":{"line":1014,"column":18},"end":{"line":1040,"column":5}},"line":1014},"28":{"name":"(anonymous_28)","decl":{"start":{"line":1046,"column":4},"end":{"line":1046,"column":5}},"loc":{"start":{"line":1046,"column":18},"end":{"line":1068,"column":5}},"line":1046},"29":{"name":"(anonymous_29)","decl":{"start":{"line":1073,"column":4},"end":{"line":1073,"column":5}},"loc":{"start":{"line":1073,"column":13},"end":{"line":1098,"column":5}},"line":1073},"30":{"name":"(anonymous_30)","decl":{"start":{"line":1104,"column":4},"end":{"line":1104,"column":5}},"loc":{"start":{"line":1104,"column":40},"end":{"line":1137,"column":5}},"line":1104},"31":{"name":"(anonymous_31)","decl":{"start":{"line":1144,"column":4},"end":{"line":1144,"column":5}},"loc":{"start":{"line":1144,"column":18},"end":{"line":1165,"column":5}},"line":1144},"32":{"name":"(anonymous_32)","decl":{"start":{"line":1171,"column":4},"end":{"line":1171,"column":5}},"loc":{"start":{"line":1171,"column":18},"end":{"line":1182,"column":5}},"line":1171},"33":{"name":"(anonymous_33)","decl":{"start":{"line":1188,"column":4},"end":{"line":1188,"column":5}},"loc":{"start":{"line":1188,"column":18},"end":{"line":1240,"column":5}},"line":1188},"34":{"name":"(anonymous_34)","decl":{"start":{"line":1245,"column":4},"end":{"line":1245,"column":5}},"loc":{"start":{"line":1245,"column":13},"end":{"line":1276,"column":5}},"line":1245},"35":{"name":"(anonymous_35)","decl":{"start":{"line":1282,"column":4},"end":{"line":1282,"column":5}},"loc":{"start":{"line":1282,"column":40},"end":{"line":1321,"column":5}},"line":1282}},"branchMap":{"0":{"loc":{"start":{"line":20,"column":16},"end":{"line":20,"column":63}},"type":"binary-expr","locations":[{"start":{"line":20,"column":16},"end":{"line":20,"column":34}},{"start":{"line":20,"column":39},"end":{"line":20,"column":62}}],"line":20},"1":{"loc":{"start":{"line":77,"column":8},"end":{"line":78,"column":91}},"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":78,"column":91}},{"start":{"line":77,"column":8},"end":{"line":78,"column":91}}],"line":77},"2":{"loc":{"start":{"line":79,"column":8},"end":{"line":80,"column":117}},"type":"if","locations":[{"start":{"line":79,"column":8},"end":{"line":80,"column":117}},{"start":{"line":79,"column":8},"end":{"line":80,"column":117}}],"line":79},"3":{"loc":{"start":{"line":82,"column":8},"end":{"line":83,"column":46}},"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":83,"column":46}},{"start":{"line":82,"column":8},"end":{"line":83,"column":46}}],"line":82},"4":{"loc":{"start":{"line":95,"column":12},"end":{"line":100,"column":157}},"type":"if","locations":[{"start":{"line":95,"column":12},"end":{"line":100,"column":157}},{"start":{"line":95,"column":12},"end":{"line":100,"column":157}}],"line":95},"5":{"loc":{"start":{"line":97,"column":17},"end":{"line":100,"column":157}},"type":"if","locations":[{"start":{"line":97,"column":17},"end":{"line":100,"column":157}},{"start":{"line":97,"column":17},"end":{"line":100,"column":157}}],"line":97},"6":{"loc":{"start":{"line":104,"column":12},"end":{"line":107,"column":159}},"type":"if","locations":[{"start":{"line":104,"column":12},"end":{"line":107,"column":159}},{"start":{"line":104,"column":12},"end":{"line":107,"column":159}}],"line":104},"7":{"loc":{"start":{"line":210,"column":8},"end":{"line":211,"column":91}},"type":"if","locations":[{"start":{"line":210,"column":8},"end":{"line":211,"column":91}},{"start":{"line":210,"column":8},"end":{"line":211,"column":91}}],"line":210},"8":{"loc":{"start":{"line":212,"column":8},"end":{"line":213,"column":129}},"type":"if","locations":[{"start":{"line":212,"column":8},"end":{"line":213,"column":129}},{"start":{"line":212,"column":8},"end":{"line":213,"column":129}}],"line":212},"9":{"loc":{"start":{"line":214,"column":8},"end":{"line":215,"column":99}},"type":"if","locations":[{"start":{"line":214,"column":8},"end":{"line":215,"column":99}},{"start":{"line":214,"column":8},"end":{"line":215,"column":99}}],"line":214},"10":{"loc":{"start":{"line":216,"column":8},"end":{"line":217,"column":139}},"type":"if","locations":[{"start":{"line":216,"column":8},"end":{"line":217,"column":139}},{"start":{"line":216,"column":8},"end":{"line":217,"column":139}}],"line":216},"11":{"loc":{"start":{"line":219,"column":8},"end":{"line":220,"column":51}},"type":"if","locations":[{"start":{"line":219,"column":8},"end":{"line":220,"column":51}},{"start":{"line":219,"column":8},"end":{"line":220,"column":51}}],"line":219},"12":{"loc":{"start":{"line":221,"column":8},"end":{"line":222,"column":52}},"type":"if","locations":[{"start":{"line":221,"column":8},"end":{"line":222,"column":52}},{"start":{"line":221,"column":8},"end":{"line":222,"column":52}}],"line":221},"13":{"loc":{"start":{"line":223,"column":8},"end":{"line":224,"column":47}},"type":"if","locations":[{"start":{"line":223,"column":8},"end":{"line":224,"column":47}},{"start":{"line":223,"column":8},"end":{"line":224,"column":47}}],"line":223},"14":{"loc":{"start":{"line":225,"column":8},"end":{"line":226,"column":58}},"type":"if","locations":[{"start":{"line":225,"column":8},"end":{"line":226,"column":58}},{"start":{"line":225,"column":8},"end":{"line":226,"column":58}}],"line":225},"15":{"loc":{"start":{"line":227,"column":8},"end":{"line":228,"column":44}},"type":"if","locations":[{"start":{"line":227,"column":8},"end":{"line":228,"column":44}},{"start":{"line":227,"column":8},"end":{"line":228,"column":44}}],"line":227},"16":{"loc":{"start":{"line":229,"column":8},"end":{"line":230,"column":55}},"type":"if","locations":[{"start":{"line":229,"column":8},"end":{"line":230,"column":55}},{"start":{"line":229,"column":8},"end":{"line":230,"column":55}}],"line":229},"17":{"loc":{"start":{"line":231,"column":8},"end":{"line":232,"column":55}},"type":"if","locations":[{"start":{"line":231,"column":8},"end":{"line":232,"column":55}},{"start":{"line":231,"column":8},"end":{"line":232,"column":55}}],"line":231},"18":{"loc":{"start":{"line":244,"column":12},"end":{"line":253,"column":157}},"type":"if","locations":[{"start":{"line":244,"column":12},"end":{"line":253,"column":157}},{"start":{"line":244,"column":12},"end":{"line":253,"column":157}}],"line":244},"19":{"loc":{"start":{"line":246,"column":17},"end":{"line":253,"column":157}},"type":"if","locations":[{"start":{"line":246,"column":17},"end":{"line":253,"column":157}},{"start":{"line":246,"column":17},"end":{"line":253,"column":157}}],"line":246},"20":{"loc":{"start":{"line":248,"column":17},"end":{"line":253,"column":157}},"type":"if","locations":[{"start":{"line":248,"column":17},"end":{"line":253,"column":157}},{"start":{"line":248,"column":17},"end":{"line":253,"column":157}}],"line":248},"21":{"loc":{"start":{"line":250,"column":17},"end":{"line":253,"column":157}},"type":"if","locations":[{"start":{"line":250,"column":17},"end":{"line":253,"column":157}},{"start":{"line":250,"column":17},"end":{"line":253,"column":157}}],"line":250},"22":{"loc":{"start":{"line":257,"column":12},"end":{"line":272,"column":159}},"type":"if","locations":[{"start":{"line":257,"column":12},"end":{"line":272,"column":159}},{"start":{"line":257,"column":12},"end":{"line":272,"column":159}}],"line":257},"23":{"loc":{"start":{"line":259,"column":17},"end":{"line":272,"column":159}},"type":"if","locations":[{"start":{"line":259,"column":17},"end":{"line":272,"column":159}},{"start":{"line":259,"column":17},"end":{"line":272,"column":159}}],"line":259},"24":{"loc":{"start":{"line":261,"column":17},"end":{"line":272,"column":159}},"type":"if","locations":[{"start":{"line":261,"column":17},"end":{"line":272,"column":159}},{"start":{"line":261,"column":17},"end":{"line":272,"column":159}}],"line":261},"25":{"loc":{"start":{"line":263,"column":17},"end":{"line":272,"column":159}},"type":"if","locations":[{"start":{"line":263,"column":17},"end":{"line":272,"column":159}},{"start":{"line":263,"column":17},"end":{"line":272,"column":159}}],"line":263},"26":{"loc":{"start":{"line":265,"column":17},"end":{"line":272,"column":159}},"type":"if","locations":[{"start":{"line":265,"column":17},"end":{"line":272,"column":159}},{"start":{"line":265,"column":17},"end":{"line":272,"column":159}}],"line":265},"27":{"loc":{"start":{"line":267,"column":17},"end":{"line":272,"column":159}},"type":"if","locations":[{"start":{"line":267,"column":17},"end":{"line":272,"column":159}},{"start":{"line":267,"column":17},"end":{"line":272,"column":159}}],"line":267},"28":{"loc":{"start":{"line":269,"column":17},"end":{"line":272,"column":159}},"type":"if","locations":[{"start":{"line":269,"column":17},"end":{"line":272,"column":159}},{"start":{"line":269,"column":17},"end":{"line":272,"column":159}}],"line":269},"29":{"loc":{"start":{"line":391,"column":8},"end":{"line":392,"column":107}},"type":"if","locations":[{"start":{"line":391,"column":8},"end":{"line":392,"column":107}},{"start":{"line":391,"column":8},"end":{"line":392,"column":107}}],"line":391},"30":{"loc":{"start":{"line":393,"column":8},"end":{"line":394,"column":117}},"type":"if","locations":[{"start":{"line":393,"column":8},"end":{"line":394,"column":117}},{"start":{"line":393,"column":8},"end":{"line":394,"column":117}}],"line":393},"31":{"loc":{"start":{"line":395,"column":8},"end":{"line":396,"column":97}},"type":"if","locations":[{"start":{"line":395,"column":8},"end":{"line":396,"column":97}},{"start":{"line":395,"column":8},"end":{"line":396,"column":97}}],"line":395},"32":{"loc":{"start":{"line":397,"column":8},"end":{"line":398,"column":101}},"type":"if","locations":[{"start":{"line":397,"column":8},"end":{"line":398,"column":101}},{"start":{"line":397,"column":8},"end":{"line":398,"column":101}}],"line":397},"33":{"loc":{"start":{"line":399,"column":8},"end":{"line":400,"column":91}},"type":"if","locations":[{"start":{"line":399,"column":8},"end":{"line":400,"column":91}},{"start":{"line":399,"column":8},"end":{"line":400,"column":91}}],"line":399},"34":{"loc":{"start":{"line":402,"column":8},"end":{"line":403,"column":46}},"type":"if","locations":[{"start":{"line":402,"column":8},"end":{"line":403,"column":46}},{"start":{"line":402,"column":8},"end":{"line":403,"column":46}}],"line":402},"35":{"loc":{"start":{"line":404,"column":8},"end":{"line":405,"column":46}},"type":"if","locations":[{"start":{"line":404,"column":8},"end":{"line":405,"column":46}},{"start":{"line":404,"column":8},"end":{"line":405,"column":46}}],"line":404},"36":{"loc":{"start":{"line":406,"column":8},"end":{"line":407,"column":57}},"type":"if","locations":[{"start":{"line":406,"column":8},"end":{"line":407,"column":57}},{"start":{"line":406,"column":8},"end":{"line":407,"column":57}}],"line":406},"37":{"loc":{"start":{"line":408,"column":8},"end":{"line":409,"column":60}},"type":"if","locations":[{"start":{"line":408,"column":8},"end":{"line":409,"column":60}},{"start":{"line":408,"column":8},"end":{"line":409,"column":60}}],"line":408},"38":{"loc":{"start":{"line":410,"column":8},"end":{"line":411,"column":59}},"type":"if","locations":[{"start":{"line":410,"column":8},"end":{"line":411,"column":59}},{"start":{"line":410,"column":8},"end":{"line":411,"column":59}}],"line":410},"39":{"loc":{"start":{"line":412,"column":8},"end":{"line":413,"column":42}},"type":"if","locations":[{"start":{"line":412,"column":8},"end":{"line":413,"column":42}},{"start":{"line":412,"column":8},"end":{"line":413,"column":42}}],"line":412},"40":{"loc":{"start":{"line":414,"column":8},"end":{"line":415,"column":58}},"type":"if","locations":[{"start":{"line":414,"column":8},"end":{"line":415,"column":58}},{"start":{"line":414,"column":8},"end":{"line":415,"column":58}}],"line":414},"41":{"loc":{"start":{"line":416,"column":8},"end":{"line":417,"column":54}},"type":"if","locations":[{"start":{"line":416,"column":8},"end":{"line":417,"column":54}},{"start":{"line":416,"column":8},"end":{"line":417,"column":54}}],"line":416},"42":{"loc":{"start":{"line":418,"column":8},"end":{"line":419,"column":47}},"type":"if","locations":[{"start":{"line":418,"column":8},"end":{"line":419,"column":47}},{"start":{"line":418,"column":8},"end":{"line":419,"column":47}}],"line":418},"43":{"loc":{"start":{"line":431,"column":12},"end":{"line":442,"column":157}},"type":"if","locations":[{"start":{"line":431,"column":12},"end":{"line":442,"column":157}},{"start":{"line":431,"column":12},"end":{"line":442,"column":157}}],"line":431},"44":{"loc":{"start":{"line":433,"column":17},"end":{"line":442,"column":157}},"type":"if","locations":[{"start":{"line":433,"column":17},"end":{"line":442,"column":157}},{"start":{"line":433,"column":17},"end":{"line":442,"column":157}}],"line":433},"45":{"loc":{"start":{"line":435,"column":17},"end":{"line":442,"column":157}},"type":"if","locations":[{"start":{"line":435,"column":17},"end":{"line":442,"column":157}},{"start":{"line":435,"column":17},"end":{"line":442,"column":157}}],"line":435},"46":{"loc":{"start":{"line":437,"column":17},"end":{"line":442,"column":157}},"type":"if","locations":[{"start":{"line":437,"column":17},"end":{"line":442,"column":157}},{"start":{"line":437,"column":17},"end":{"line":442,"column":157}}],"line":437},"47":{"loc":{"start":{"line":439,"column":17},"end":{"line":442,"column":157}},"type":"if","locations":[{"start":{"line":439,"column":17},"end":{"line":442,"column":157}},{"start":{"line":439,"column":17},"end":{"line":442,"column":157}}],"line":439},"48":{"loc":{"start":{"line":446,"column":12},"end":{"line":457,"column":159}},"type":"if","locations":[{"start":{"line":446,"column":12},"end":{"line":457,"column":159}},{"start":{"line":446,"column":12},"end":{"line":457,"column":159}}],"line":446},"49":{"loc":{"start":{"line":448,"column":17},"end":{"line":457,"column":159}},"type":"if","locations":[{"start":{"line":448,"column":17},"end":{"line":457,"column":159}},{"start":{"line":448,"column":17},"end":{"line":457,"column":159}}],"line":448},"50":{"loc":{"start":{"line":450,"column":17},"end":{"line":457,"column":159}},"type":"if","locations":[{"start":{"line":450,"column":17},"end":{"line":457,"column":159}},{"start":{"line":450,"column":17},"end":{"line":457,"column":159}}],"line":450},"51":{"loc":{"start":{"line":452,"column":17},"end":{"line":457,"column":159}},"type":"if","locations":[{"start":{"line":452,"column":17},"end":{"line":457,"column":159}},{"start":{"line":452,"column":17},"end":{"line":457,"column":159}}],"line":452},"52":{"loc":{"start":{"line":454,"column":17},"end":{"line":457,"column":159}},"type":"if","locations":[{"start":{"line":454,"column":17},"end":{"line":457,"column":159}},{"start":{"line":454,"column":17},"end":{"line":457,"column":159}}],"line":454},"53":{"loc":{"start":{"line":459,"column":8},"end":{"line":460,"column":65}},"type":"if","locations":[{"start":{"line":459,"column":8},"end":{"line":460,"column":65}},{"start":{"line":459,"column":8},"end":{"line":460,"column":65}}],"line":459},"54":{"loc":{"start":{"line":461,"column":8},"end":{"line":462,"column":77}},"type":"if","locations":[{"start":{"line":461,"column":8},"end":{"line":462,"column":77}},{"start":{"line":461,"column":8},"end":{"line":462,"column":77}}],"line":461},"55":{"loc":{"start":{"line":463,"column":8},"end":{"line":464,"column":73}},"type":"if","locations":[{"start":{"line":463,"column":8},"end":{"line":464,"column":73}},{"start":{"line":463,"column":8},"end":{"line":464,"column":73}}],"line":463},"56":{"loc":{"start":{"line":465,"column":8},"end":{"line":466,"column":83}},"type":"if","locations":[{"start":{"line":465,"column":8},"end":{"line":466,"column":83}},{"start":{"line":465,"column":8},"end":{"line":466,"column":83}}],"line":465},"57":{"loc":{"start":{"line":619,"column":8},"end":{"line":620,"column":101}},"type":"if","locations":[{"start":{"line":619,"column":8},"end":{"line":620,"column":101}},{"start":{"line":619,"column":8},"end":{"line":620,"column":101}}],"line":619},"58":{"loc":{"start":{"line":621,"column":8},"end":{"line":622,"column":91}},"type":"if","locations":[{"start":{"line":621,"column":8},"end":{"line":622,"column":91}},{"start":{"line":621,"column":8},"end":{"line":622,"column":91}}],"line":621},"59":{"loc":{"start":{"line":623,"column":8},"end":{"line":624,"column":139}},"type":"if","locations":[{"start":{"line":623,"column":8},"end":{"line":624,"column":139}},{"start":{"line":623,"column":8},"end":{"line":624,"column":139}}],"line":623},"60":{"loc":{"start":{"line":625,"column":8},"end":{"line":626,"column":107}},"type":"if","locations":[{"start":{"line":625,"column":8},"end":{"line":626,"column":107}},{"start":{"line":625,"column":8},"end":{"line":626,"column":107}}],"line":625},"61":{"loc":{"start":{"line":627,"column":8},"end":{"line":628,"column":107}},"type":"if","locations":[{"start":{"line":627,"column":8},"end":{"line":628,"column":107}},{"start":{"line":627,"column":8},"end":{"line":628,"column":107}}],"line":627},"62":{"loc":{"start":{"line":629,"column":8},"end":{"line":630,"column":117}},"type":"if","locations":[{"start":{"line":629,"column":8},"end":{"line":630,"column":117}},{"start":{"line":629,"column":8},"end":{"line":630,"column":117}}],"line":629},"63":{"loc":{"start":{"line":631,"column":8},"end":{"line":632,"column":97}},"type":"if","locations":[{"start":{"line":631,"column":8},"end":{"line":632,"column":97}},{"start":{"line":631,"column":8},"end":{"line":632,"column":97}}],"line":631},"64":{"loc":{"start":{"line":633,"column":8},"end":{"line":634,"column":101}},"type":"if","locations":[{"start":{"line":633,"column":8},"end":{"line":634,"column":101}},{"start":{"line":633,"column":8},"end":{"line":634,"column":101}}],"line":633},"65":{"loc":{"start":{"line":636,"column":8},"end":{"line":637,"column":51}},"type":"if","locations":[{"start":{"line":636,"column":8},"end":{"line":637,"column":51}},{"start":{"line":636,"column":8},"end":{"line":637,"column":51}}],"line":636},"66":{"loc":{"start":{"line":638,"column":8},"end":{"line":639,"column":56}},"type":"if","locations":[{"start":{"line":638,"column":8},"end":{"line":639,"column":56}},{"start":{"line":638,"column":8},"end":{"line":639,"column":56}}],"line":638},"67":{"loc":{"start":{"line":640,"column":8},"end":{"line":641,"column":46}},"type":"if","locations":[{"start":{"line":640,"column":8},"end":{"line":641,"column":46}},{"start":{"line":640,"column":8},"end":{"line":641,"column":46}}],"line":640},"68":{"loc":{"start":{"line":642,"column":8},"end":{"line":643,"column":62}},"type":"if","locations":[{"start":{"line":642,"column":8},"end":{"line":643,"column":62}},{"start":{"line":642,"column":8},"end":{"line":643,"column":62}}],"line":642},"69":{"loc":{"start":{"line":644,"column":8},"end":{"line":645,"column":62}},"type":"if","locations":[{"start":{"line":644,"column":8},"end":{"line":645,"column":62}},{"start":{"line":644,"column":8},"end":{"line":645,"column":62}}],"line":644},"70":{"loc":{"start":{"line":646,"column":8},"end":{"line":647,"column":62}},"type":"if","locations":[{"start":{"line":646,"column":8},"end":{"line":647,"column":62}},{"start":{"line":646,"column":8},"end":{"line":647,"column":62}}],"line":646},"71":{"loc":{"start":{"line":648,"column":8},"end":{"line":649,"column":62}},"type":"if","locations":[{"start":{"line":648,"column":8},"end":{"line":649,"column":62}},{"start":{"line":648,"column":8},"end":{"line":649,"column":62}}],"line":648},"72":{"loc":{"start":{"line":650,"column":8},"end":{"line":651,"column":46}},"type":"if","locations":[{"start":{"line":650,"column":8},"end":{"line":651,"column":46}},{"start":{"line":650,"column":8},"end":{"line":651,"column":46}}],"line":650},"73":{"loc":{"start":{"line":652,"column":8},"end":{"line":653,"column":57}},"type":"if","locations":[{"start":{"line":652,"column":8},"end":{"line":653,"column":57}},{"start":{"line":652,"column":8},"end":{"line":653,"column":57}}],"line":652},"74":{"loc":{"start":{"line":654,"column":8},"end":{"line":655,"column":60}},"type":"if","locations":[{"start":{"line":654,"column":8},"end":{"line":655,"column":60}},{"start":{"line":654,"column":8},"end":{"line":655,"column":60}}],"line":654},"75":{"loc":{"start":{"line":656,"column":8},"end":{"line":657,"column":59}},"type":"if","locations":[{"start":{"line":656,"column":8},"end":{"line":657,"column":59}},{"start":{"line":656,"column":8},"end":{"line":657,"column":59}}],"line":656},"76":{"loc":{"start":{"line":658,"column":8},"end":{"line":659,"column":47}},"type":"if","locations":[{"start":{"line":658,"column":8},"end":{"line":659,"column":47}},{"start":{"line":658,"column":8},"end":{"line":659,"column":47}}],"line":658},"77":{"loc":{"start":{"line":660,"column":8},"end":{"line":661,"column":44}},"type":"if","locations":[{"start":{"line":660,"column":8},"end":{"line":661,"column":44}},{"start":{"line":660,"column":8},"end":{"line":661,"column":44}}],"line":660},"78":{"loc":{"start":{"line":673,"column":12},"end":{"line":690,"column":157}},"type":"if","locations":[{"start":{"line":673,"column":12},"end":{"line":690,"column":157}},{"start":{"line":673,"column":12},"end":{"line":690,"column":157}}],"line":673},"79":{"loc":{"start":{"line":675,"column":17},"end":{"line":690,"column":157}},"type":"if","locations":[{"start":{"line":675,"column":17},"end":{"line":690,"column":157}},{"start":{"line":675,"column":17},"end":{"line":690,"column":157}}],"line":675},"80":{"loc":{"start":{"line":677,"column":17},"end":{"line":690,"column":157}},"type":"if","locations":[{"start":{"line":677,"column":17},"end":{"line":690,"column":157}},{"start":{"line":677,"column":17},"end":{"line":690,"column":157}}],"line":677},"81":{"loc":{"start":{"line":679,"column":17},"end":{"line":690,"column":157}},"type":"if","locations":[{"start":{"line":679,"column":17},"end":{"line":690,"column":157}},{"start":{"line":679,"column":17},"end":{"line":690,"column":157}}],"line":679},"82":{"loc":{"start":{"line":681,"column":17},"end":{"line":690,"column":157}},"type":"if","locations":[{"start":{"line":681,"column":17},"end":{"line":690,"column":157}},{"start":{"line":681,"column":17},"end":{"line":690,"column":157}}],"line":681},"83":{"loc":{"start":{"line":683,"column":17},"end":{"line":690,"column":157}},"type":"if","locations":[{"start":{"line":683,"column":17},"end":{"line":690,"column":157}},{"start":{"line":683,"column":17},"end":{"line":690,"column":157}}],"line":683},"84":{"loc":{"start":{"line":685,"column":17},"end":{"line":690,"column":157}},"type":"if","locations":[{"start":{"line":685,"column":17},"end":{"line":690,"column":157}},{"start":{"line":685,"column":17},"end":{"line":690,"column":157}}],"line":685},"85":{"loc":{"start":{"line":687,"column":17},"end":{"line":690,"column":157}},"type":"if","locations":[{"start":{"line":687,"column":17},"end":{"line":690,"column":157}},{"start":{"line":687,"column":17},"end":{"line":690,"column":157}}],"line":687},"86":{"loc":{"start":{"line":694,"column":12},"end":{"line":717,"column":159}},"type":"if","locations":[{"start":{"line":694,"column":12},"end":{"line":717,"column":159}},{"start":{"line":694,"column":12},"end":{"line":717,"column":159}}],"line":694},"87":{"loc":{"start":{"line":696,"column":17},"end":{"line":717,"column":159}},"type":"if","locations":[{"start":{"line":696,"column":17},"end":{"line":717,"column":159}},{"start":{"line":696,"column":17},"end":{"line":717,"column":159}}],"line":696},"88":{"loc":{"start":{"line":698,"column":17},"end":{"line":717,"column":159}},"type":"if","locations":[{"start":{"line":698,"column":17},"end":{"line":717,"column":159}},{"start":{"line":698,"column":17},"end":{"line":717,"column":159}}],"line":698},"89":{"loc":{"start":{"line":700,"column":17},"end":{"line":717,"column":159}},"type":"if","locations":[{"start":{"line":700,"column":17},"end":{"line":717,"column":159}},{"start":{"line":700,"column":17},"end":{"line":717,"column":159}}],"line":700},"90":{"loc":{"start":{"line":702,"column":17},"end":{"line":717,"column":159}},"type":"if","locations":[{"start":{"line":702,"column":17},"end":{"line":717,"column":159}},{"start":{"line":702,"column":17},"end":{"line":717,"column":159}}],"line":702},"91":{"loc":{"start":{"line":704,"column":17},"end":{"line":717,"column":159}},"type":"if","locations":[{"start":{"line":704,"column":17},"end":{"line":717,"column":159}},{"start":{"line":704,"column":17},"end":{"line":717,"column":159}}],"line":704},"92":{"loc":{"start":{"line":706,"column":17},"end":{"line":717,"column":159}},"type":"if","locations":[{"start":{"line":706,"column":17},"end":{"line":717,"column":159}},{"start":{"line":706,"column":17},"end":{"line":717,"column":159}}],"line":706},"93":{"loc":{"start":{"line":708,"column":17},"end":{"line":717,"column":159}},"type":"if","locations":[{"start":{"line":708,"column":17},"end":{"line":717,"column":159}},{"start":{"line":708,"column":17},"end":{"line":717,"column":159}}],"line":708},"94":{"loc":{"start":{"line":710,"column":17},"end":{"line":717,"column":159}},"type":"if","locations":[{"start":{"line":710,"column":17},"end":{"line":717,"column":159}},{"start":{"line":710,"column":17},"end":{"line":717,"column":159}}],"line":710},"95":{"loc":{"start":{"line":712,"column":17},"end":{"line":717,"column":159}},"type":"if","locations":[{"start":{"line":712,"column":17},"end":{"line":717,"column":159}},{"start":{"line":712,"column":17},"end":{"line":717,"column":159}}],"line":712},"96":{"loc":{"start":{"line":714,"column":17},"end":{"line":717,"column":159}},"type":"if","locations":[{"start":{"line":714,"column":17},"end":{"line":717,"column":159}},{"start":{"line":714,"column":17},"end":{"line":717,"column":159}}],"line":714},"97":{"loc":{"start":{"line":719,"column":8},"end":{"line":720,"column":87}},"type":"if","locations":[{"start":{"line":719,"column":8},"end":{"line":720,"column":87}},{"start":{"line":719,"column":8},"end":{"line":720,"column":87}}],"line":719},"98":{"loc":{"start":{"line":721,"column":8},"end":{"line":722,"column":65}},"type":"if","locations":[{"start":{"line":721,"column":8},"end":{"line":722,"column":65}},{"start":{"line":721,"column":8},"end":{"line":722,"column":65}}],"line":721},"99":{"loc":{"start":{"line":875,"column":8},"end":{"line":876,"column":101}},"type":"if","locations":[{"start":{"line":875,"column":8},"end":{"line":876,"column":101}},{"start":{"line":875,"column":8},"end":{"line":876,"column":101}}],"line":875},"100":{"loc":{"start":{"line":877,"column":8},"end":{"line":878,"column":91}},"type":"if","locations":[{"start":{"line":877,"column":8},"end":{"line":878,"column":91}},{"start":{"line":877,"column":8},"end":{"line":878,"column":91}}],"line":877},"101":{"loc":{"start":{"line":879,"column":8},"end":{"line":880,"column":139}},"type":"if","locations":[{"start":{"line":879,"column":8},"end":{"line":880,"column":139}},{"start":{"line":879,"column":8},"end":{"line":880,"column":139}}],"line":879},"102":{"loc":{"start":{"line":881,"column":8},"end":{"line":882,"column":107}},"type":"if","locations":[{"start":{"line":881,"column":8},"end":{"line":882,"column":107}},{"start":{"line":881,"column":8},"end":{"line":882,"column":107}}],"line":881},"103":{"loc":{"start":{"line":883,"column":8},"end":{"line":884,"column":107}},"type":"if","locations":[{"start":{"line":883,"column":8},"end":{"line":884,"column":107}},{"start":{"line":883,"column":8},"end":{"line":884,"column":107}}],"line":883},"104":{"loc":{"start":{"line":885,"column":8},"end":{"line":886,"column":129}},"type":"if","locations":[{"start":{"line":885,"column":8},"end":{"line":886,"column":129}},{"start":{"line":885,"column":8},"end":{"line":886,"column":129}}],"line":885},"105":{"loc":{"start":{"line":887,"column":8},"end":{"line":888,"column":107}},"type":"if","locations":[{"start":{"line":887,"column":8},"end":{"line":888,"column":107}},{"start":{"line":887,"column":8},"end":{"line":888,"column":107}}],"line":887},"106":{"loc":{"start":{"line":889,"column":8},"end":{"line":890,"column":101}},"type":"if","locations":[{"start":{"line":889,"column":8},"end":{"line":890,"column":101}},{"start":{"line":889,"column":8},"end":{"line":890,"column":101}}],"line":889},"107":{"loc":{"start":{"line":892,"column":8},"end":{"line":893,"column":51}},"type":"if","locations":[{"start":{"line":892,"column":8},"end":{"line":893,"column":51}},{"start":{"line":892,"column":8},"end":{"line":893,"column":51}}],"line":892},"108":{"loc":{"start":{"line":894,"column":8},"end":{"line":895,"column":56}},"type":"if","locations":[{"start":{"line":894,"column":8},"end":{"line":895,"column":56}},{"start":{"line":894,"column":8},"end":{"line":895,"column":56}}],"line":894},"109":{"loc":{"start":{"line":896,"column":8},"end":{"line":897,"column":51}},"type":"if","locations":[{"start":{"line":896,"column":8},"end":{"line":897,"column":51}},{"start":{"line":896,"column":8},"end":{"line":897,"column":51}}],"line":896},"110":{"loc":{"start":{"line":898,"column":8},"end":{"line":899,"column":52}},"type":"if","locations":[{"start":{"line":898,"column":8},"end":{"line":899,"column":52}},{"start":{"line":898,"column":8},"end":{"line":899,"column":52}}],"line":898},"111":{"loc":{"start":{"line":900,"column":8},"end":{"line":901,"column":44}},"type":"if","locations":[{"start":{"line":900,"column":8},"end":{"line":901,"column":44}},{"start":{"line":900,"column":8},"end":{"line":901,"column":44}}],"line":900},"112":{"loc":{"start":{"line":902,"column":8},"end":{"line":903,"column":55}},"type":"if","locations":[{"start":{"line":902,"column":8},"end":{"line":903,"column":55}},{"start":{"line":902,"column":8},"end":{"line":903,"column":55}}],"line":902},"113":{"loc":{"start":{"line":904,"column":8},"end":{"line":905,"column":58}},"type":"if","locations":[{"start":{"line":904,"column":8},"end":{"line":905,"column":58}},{"start":{"line":904,"column":8},"end":{"line":905,"column":58}}],"line":904},"114":{"loc":{"start":{"line":906,"column":8},"end":{"line":907,"column":46}},"type":"if","locations":[{"start":{"line":906,"column":8},"end":{"line":907,"column":46}},{"start":{"line":906,"column":8},"end":{"line":907,"column":46}}],"line":906},"115":{"loc":{"start":{"line":908,"column":8},"end":{"line":909,"column":57}},"type":"if","locations":[{"start":{"line":908,"column":8},"end":{"line":909,"column":57}},{"start":{"line":908,"column":8},"end":{"line":909,"column":57}}],"line":908},"116":{"loc":{"start":{"line":910,"column":8},"end":{"line":911,"column":60}},"type":"if","locations":[{"start":{"line":910,"column":8},"end":{"line":911,"column":60}},{"start":{"line":910,"column":8},"end":{"line":911,"column":60}}],"line":910},"117":{"loc":{"start":{"line":912,"column":8},"end":{"line":913,"column":46}},"type":"if","locations":[{"start":{"line":912,"column":8},"end":{"line":913,"column":46}},{"start":{"line":912,"column":8},"end":{"line":913,"column":46}}],"line":912},"118":{"loc":{"start":{"line":914,"column":8},"end":{"line":915,"column":82}},"type":"if","locations":[{"start":{"line":914,"column":8},"end":{"line":915,"column":82}},{"start":{"line":914,"column":8},"end":{"line":915,"column":82}}],"line":914},"119":{"loc":{"start":{"line":916,"column":8},"end":{"line":917,"column":47}},"type":"if","locations":[{"start":{"line":916,"column":8},"end":{"line":917,"column":47}},{"start":{"line":916,"column":8},"end":{"line":917,"column":47}}],"line":916},"120":{"loc":{"start":{"line":929,"column":12},"end":{"line":946,"column":157}},"type":"if","locations":[{"start":{"line":929,"column":12},"end":{"line":946,"column":157}},{"start":{"line":929,"column":12},"end":{"line":946,"column":157}}],"line":929},"121":{"loc":{"start":{"line":931,"column":17},"end":{"line":946,"column":157}},"type":"if","locations":[{"start":{"line":931,"column":17},"end":{"line":946,"column":157}},{"start":{"line":931,"column":17},"end":{"line":946,"column":157}}],"line":931},"122":{"loc":{"start":{"line":933,"column":17},"end":{"line":946,"column":157}},"type":"if","locations":[{"start":{"line":933,"column":17},"end":{"line":946,"column":157}},{"start":{"line":933,"column":17},"end":{"line":946,"column":157}}],"line":933},"123":{"loc":{"start":{"line":935,"column":17},"end":{"line":946,"column":157}},"type":"if","locations":[{"start":{"line":935,"column":17},"end":{"line":946,"column":157}},{"start":{"line":935,"column":17},"end":{"line":946,"column":157}}],"line":935},"124":{"loc":{"start":{"line":937,"column":17},"end":{"line":946,"column":157}},"type":"if","locations":[{"start":{"line":937,"column":17},"end":{"line":946,"column":157}},{"start":{"line":937,"column":17},"end":{"line":946,"column":157}}],"line":937},"125":{"loc":{"start":{"line":939,"column":17},"end":{"line":946,"column":157}},"type":"if","locations":[{"start":{"line":939,"column":17},"end":{"line":946,"column":157}},{"start":{"line":939,"column":17},"end":{"line":946,"column":157}}],"line":939},"126":{"loc":{"start":{"line":941,"column":17},"end":{"line":946,"column":157}},"type":"if","locations":[{"start":{"line":941,"column":17},"end":{"line":946,"column":157}},{"start":{"line":941,"column":17},"end":{"line":946,"column":157}}],"line":941},"127":{"loc":{"start":{"line":943,"column":17},"end":{"line":946,"column":157}},"type":"if","locations":[{"start":{"line":943,"column":17},"end":{"line":946,"column":157}},{"start":{"line":943,"column":17},"end":{"line":946,"column":157}}],"line":943},"128":{"loc":{"start":{"line":950,"column":12},"end":{"line":971,"column":159}},"type":"if","locations":[{"start":{"line":950,"column":12},"end":{"line":971,"column":159}},{"start":{"line":950,"column":12},"end":{"line":971,"column":159}}],"line":950},"129":{"loc":{"start":{"line":952,"column":17},"end":{"line":971,"column":159}},"type":"if","locations":[{"start":{"line":952,"column":17},"end":{"line":971,"column":159}},{"start":{"line":952,"column":17},"end":{"line":971,"column":159}}],"line":952},"130":{"loc":{"start":{"line":954,"column":17},"end":{"line":971,"column":159}},"type":"if","locations":[{"start":{"line":954,"column":17},"end":{"line":971,"column":159}},{"start":{"line":954,"column":17},"end":{"line":971,"column":159}}],"line":954},"131":{"loc":{"start":{"line":956,"column":17},"end":{"line":971,"column":159}},"type":"if","locations":[{"start":{"line":956,"column":17},"end":{"line":971,"column":159}},{"start":{"line":956,"column":17},"end":{"line":971,"column":159}}],"line":956},"132":{"loc":{"start":{"line":958,"column":17},"end":{"line":971,"column":159}},"type":"if","locations":[{"start":{"line":958,"column":17},"end":{"line":971,"column":159}},{"start":{"line":958,"column":17},"end":{"line":971,"column":159}}],"line":958},"133":{"loc":{"start":{"line":960,"column":17},"end":{"line":971,"column":159}},"type":"if","locations":[{"start":{"line":960,"column":17},"end":{"line":971,"column":159}},{"start":{"line":960,"column":17},"end":{"line":971,"column":159}}],"line":960},"134":{"loc":{"start":{"line":962,"column":17},"end":{"line":971,"column":159}},"type":"if","locations":[{"start":{"line":962,"column":17},"end":{"line":971,"column":159}},{"start":{"line":962,"column":17},"end":{"line":971,"column":159}}],"line":962},"135":{"loc":{"start":{"line":964,"column":17},"end":{"line":971,"column":159}},"type":"if","locations":[{"start":{"line":964,"column":17},"end":{"line":971,"column":159}},{"start":{"line":964,"column":17},"end":{"line":971,"column":159}}],"line":964},"136":{"loc":{"start":{"line":966,"column":17},"end":{"line":971,"column":159}},"type":"if","locations":[{"start":{"line":966,"column":17},"end":{"line":971,"column":159}},{"start":{"line":966,"column":17},"end":{"line":971,"column":159}}],"line":966},"137":{"loc":{"start":{"line":968,"column":17},"end":{"line":971,"column":159}},"type":"if","locations":[{"start":{"line":968,"column":17},"end":{"line":971,"column":159}},{"start":{"line":968,"column":17},"end":{"line":971,"column":159}}],"line":968},"138":{"loc":{"start":{"line":973,"column":8},"end":{"line":974,"column":91}},"type":"if","locations":[{"start":{"line":973,"column":8},"end":{"line":974,"column":91}},{"start":{"line":973,"column":8},"end":{"line":974,"column":91}}],"line":973},"139":{"loc":{"start":{"line":975,"column":8},"end":{"line":976,"column":101}},"type":"if","locations":[{"start":{"line":975,"column":8},"end":{"line":976,"column":101}},{"start":{"line":975,"column":8},"end":{"line":976,"column":101}}],"line":975},"140":{"loc":{"start":{"line":977,"column":8},"end":{"line":978,"column":65}},"type":"if","locations":[{"start":{"line":977,"column":8},"end":{"line":978,"column":65}},{"start":{"line":977,"column":8},"end":{"line":978,"column":65}}],"line":977},"141":{"loc":{"start":{"line":1076,"column":8},"end":{"line":1077,"column":101}},"type":"if","locations":[{"start":{"line":1076,"column":8},"end":{"line":1077,"column":101}},{"start":{"line":1076,"column":8},"end":{"line":1077,"column":101}}],"line":1076},"142":{"loc":{"start":{"line":1078,"column":8},"end":{"line":1079,"column":91}},"type":"if","locations":[{"start":{"line":1078,"column":8},"end":{"line":1079,"column":91}},{"start":{"line":1078,"column":8},"end":{"line":1079,"column":91}}],"line":1078},"143":{"loc":{"start":{"line":1080,"column":8},"end":{"line":1081,"column":139}},"type":"if","locations":[{"start":{"line":1080,"column":8},"end":{"line":1081,"column":139}},{"start":{"line":1080,"column":8},"end":{"line":1081,"column":139}}],"line":1080},"144":{"loc":{"start":{"line":1082,"column":8},"end":{"line":1083,"column":101}},"type":"if","locations":[{"start":{"line":1082,"column":8},"end":{"line":1083,"column":101}},{"start":{"line":1082,"column":8},"end":{"line":1083,"column":101}}],"line":1082},"145":{"loc":{"start":{"line":1085,"column":8},"end":{"line":1086,"column":51}},"type":"if","locations":[{"start":{"line":1085,"column":8},"end":{"line":1086,"column":51}},{"start":{"line":1085,"column":8},"end":{"line":1086,"column":51}}],"line":1085},"146":{"loc":{"start":{"line":1087,"column":8},"end":{"line":1088,"column":56}},"type":"if","locations":[{"start":{"line":1087,"column":8},"end":{"line":1088,"column":56}},{"start":{"line":1087,"column":8},"end":{"line":1088,"column":56}}],"line":1087},"147":{"loc":{"start":{"line":1089,"column":8},"end":{"line":1090,"column":62}},"type":"if","locations":[{"start":{"line":1089,"column":8},"end":{"line":1090,"column":62}},{"start":{"line":1089,"column":8},"end":{"line":1090,"column":62}}],"line":1089},"148":{"loc":{"start":{"line":1091,"column":8},"end":{"line":1092,"column":62}},"type":"if","locations":[{"start":{"line":1091,"column":8},"end":{"line":1092,"column":62}},{"start":{"line":1091,"column":8},"end":{"line":1092,"column":62}}],"line":1091},"149":{"loc":{"start":{"line":1093,"column":8},"end":{"line":1094,"column":62}},"type":"if","locations":[{"start":{"line":1093,"column":8},"end":{"line":1094,"column":62}},{"start":{"line":1093,"column":8},"end":{"line":1094,"column":62}}],"line":1093},"150":{"loc":{"start":{"line":1095,"column":8},"end":{"line":1096,"column":47}},"type":"if","locations":[{"start":{"line":1095,"column":8},"end":{"line":1096,"column":47}},{"start":{"line":1095,"column":8},"end":{"line":1096,"column":47}}],"line":1095},"151":{"loc":{"start":{"line":1108,"column":12},"end":{"line":1117,"column":157}},"type":"if","locations":[{"start":{"line":1108,"column":12},"end":{"line":1117,"column":157}},{"start":{"line":1108,"column":12},"end":{"line":1117,"column":157}}],"line":1108},"152":{"loc":{"start":{"line":1110,"column":17},"end":{"line":1117,"column":157}},"type":"if","locations":[{"start":{"line":1110,"column":17},"end":{"line":1117,"column":157}},{"start":{"line":1110,"column":17},"end":{"line":1117,"column":157}}],"line":1110},"153":{"loc":{"start":{"line":1112,"column":17},"end":{"line":1117,"column":157}},"type":"if","locations":[{"start":{"line":1112,"column":17},"end":{"line":1117,"column":157}},{"start":{"line":1112,"column":17},"end":{"line":1117,"column":157}}],"line":1112},"154":{"loc":{"start":{"line":1114,"column":17},"end":{"line":1117,"column":157}},"type":"if","locations":[{"start":{"line":1114,"column":17},"end":{"line":1117,"column":157}},{"start":{"line":1114,"column":17},"end":{"line":1117,"column":157}}],"line":1114},"155":{"loc":{"start":{"line":1121,"column":12},"end":{"line":1132,"column":159}},"type":"if","locations":[{"start":{"line":1121,"column":12},"end":{"line":1132,"column":159}},{"start":{"line":1121,"column":12},"end":{"line":1132,"column":159}}],"line":1121},"156":{"loc":{"start":{"line":1123,"column":17},"end":{"line":1132,"column":159}},"type":"if","locations":[{"start":{"line":1123,"column":17},"end":{"line":1132,"column":159}},{"start":{"line":1123,"column":17},"end":{"line":1132,"column":159}}],"line":1123},"157":{"loc":{"start":{"line":1125,"column":17},"end":{"line":1132,"column":159}},"type":"if","locations":[{"start":{"line":1125,"column":17},"end":{"line":1132,"column":159}},{"start":{"line":1125,"column":17},"end":{"line":1132,"column":159}}],"line":1125},"158":{"loc":{"start":{"line":1127,"column":17},"end":{"line":1132,"column":159}},"type":"if","locations":[{"start":{"line":1127,"column":17},"end":{"line":1132,"column":159}},{"start":{"line":1127,"column":17},"end":{"line":1132,"column":159}}],"line":1127},"159":{"loc":{"start":{"line":1129,"column":17},"end":{"line":1132,"column":159}},"type":"if","locations":[{"start":{"line":1129,"column":17},"end":{"line":1132,"column":159}},{"start":{"line":1129,"column":17},"end":{"line":1132,"column":159}}],"line":1129},"160":{"loc":{"start":{"line":1134,"column":8},"end":{"line":1135,"column":65}},"type":"if","locations":[{"start":{"line":1134,"column":8},"end":{"line":1135,"column":65}},{"start":{"line":1134,"column":8},"end":{"line":1135,"column":65}}],"line":1134},"161":{"loc":{"start":{"line":1248,"column":8},"end":{"line":1249,"column":103}},"type":"if","locations":[{"start":{"line":1248,"column":8},"end":{"line":1249,"column":103}},{"start":{"line":1248,"column":8},"end":{"line":1249,"column":103}}],"line":1248},"162":{"loc":{"start":{"line":1250,"column":8},"end":{"line":1251,"column":103}},"type":"if","locations":[{"start":{"line":1250,"column":8},"end":{"line":1251,"column":103}},{"start":{"line":1250,"column":8},"end":{"line":1251,"column":103}}],"line":1250},"163":{"loc":{"start":{"line":1252,"column":8},"end":{"line":1253,"column":93}},"type":"if","locations":[{"start":{"line":1252,"column":8},"end":{"line":1253,"column":93}},{"start":{"line":1252,"column":8},"end":{"line":1253,"column":93}}],"line":1252},"164":{"loc":{"start":{"line":1254,"column":8},"end":{"line":1255,"column":93}},"type":"if","locations":[{"start":{"line":1254,"column":8},"end":{"line":1255,"column":93}},{"start":{"line":1254,"column":8},"end":{"line":1255,"column":93}}],"line":1254},"165":{"loc":{"start":{"line":1257,"column":8},"end":{"line":1258,"column":46}},"type":"if","locations":[{"start":{"line":1257,"column":8},"end":{"line":1258,"column":46}},{"start":{"line":1257,"column":8},"end":{"line":1258,"column":46}}],"line":1257},"166":{"loc":{"start":{"line":1259,"column":8},"end":{"line":1260,"column":59}},"type":"if","locations":[{"start":{"line":1259,"column":8},"end":{"line":1260,"column":59}},{"start":{"line":1259,"column":8},"end":{"line":1260,"column":59}}],"line":1259},"167":{"loc":{"start":{"line":1261,"column":8},"end":{"line":1262,"column":74}},"type":"if","locations":[{"start":{"line":1261,"column":8},"end":{"line":1262,"column":74}},{"start":{"line":1261,"column":8},"end":{"line":1262,"column":74}}],"line":1261},"168":{"loc":{"start":{"line":1263,"column":8},"end":{"line":1264,"column":76}},"type":"if","locations":[{"start":{"line":1263,"column":8},"end":{"line":1264,"column":76}},{"start":{"line":1263,"column":8},"end":{"line":1264,"column":76}}],"line":1263},"169":{"loc":{"start":{"line":1265,"column":8},"end":{"line":1266,"column":72}},"type":"if","locations":[{"start":{"line":1265,"column":8},"end":{"line":1266,"column":72}},{"start":{"line":1265,"column":8},"end":{"line":1266,"column":72}}],"line":1265},"170":{"loc":{"start":{"line":1267,"column":8},"end":{"line":1268,"column":74}},"type":"if","locations":[{"start":{"line":1267,"column":8},"end":{"line":1268,"column":74}},{"start":{"line":1267,"column":8},"end":{"line":1268,"column":74}}],"line":1267},"171":{"loc":{"start":{"line":1269,"column":8},"end":{"line":1270,"column":60}},"type":"if","locations":[{"start":{"line":1269,"column":8},"end":{"line":1270,"column":60}},{"start":{"line":1269,"column":8},"end":{"line":1270,"column":60}}],"line":1269},"172":{"loc":{"start":{"line":1271,"column":8},"end":{"line":1272,"column":58}},"type":"if","locations":[{"start":{"line":1271,"column":8},"end":{"line":1272,"column":58}},{"start":{"line":1271,"column":8},"end":{"line":1272,"column":58}}],"line":1271},"173":{"loc":{"start":{"line":1273,"column":8},"end":{"line":1274,"column":47}},"type":"if","locations":[{"start":{"line":1273,"column":8},"end":{"line":1274,"column":47}},{"start":{"line":1273,"column":8},"end":{"line":1274,"column":47}}],"line":1273},"174":{"loc":{"start":{"line":1286,"column":12},"end":{"line":1295,"column":157}},"type":"if","locations":[{"start":{"line":1286,"column":12},"end":{"line":1295,"column":157}},{"start":{"line":1286,"column":12},"end":{"line":1295,"column":157}}],"line":1286},"175":{"loc":{"start":{"line":1288,"column":17},"end":{"line":1295,"column":157}},"type":"if","locations":[{"start":{"line":1288,"column":17},"end":{"line":1295,"column":157}},{"start":{"line":1288,"column":17},"end":{"line":1295,"column":157}}],"line":1288},"176":{"loc":{"start":{"line":1290,"column":17},"end":{"line":1295,"column":157}},"type":"if","locations":[{"start":{"line":1290,"column":17},"end":{"line":1295,"column":157}},{"start":{"line":1290,"column":17},"end":{"line":1295,"column":157}}],"line":1290},"177":{"loc":{"start":{"line":1292,"column":17},"end":{"line":1295,"column":157}},"type":"if","locations":[{"start":{"line":1292,"column":17},"end":{"line":1295,"column":157}},{"start":{"line":1292,"column":17},"end":{"line":1295,"column":157}}],"line":1292},"178":{"loc":{"start":{"line":1299,"column":12},"end":{"line":1304,"column":159}},"type":"if","locations":[{"start":{"line":1299,"column":12},"end":{"line":1304,"column":159}},{"start":{"line":1299,"column":12},"end":{"line":1304,"column":159}}],"line":1299},"179":{"loc":{"start":{"line":1301,"column":17},"end":{"line":1304,"column":159}},"type":"if","locations":[{"start":{"line":1301,"column":17},"end":{"line":1304,"column":159}},{"start":{"line":1301,"column":17},"end":{"line":1304,"column":159}}],"line":1301},"180":{"loc":{"start":{"line":1306,"column":8},"end":{"line":1307,"column":93}},"type":"if","locations":[{"start":{"line":1306,"column":8},"end":{"line":1307,"column":93}},{"start":{"line":1306,"column":8},"end":{"line":1307,"column":93}}],"line":1306},"181":{"loc":{"start":{"line":1308,"column":8},"end":{"line":1309,"column":95}},"type":"if","locations":[{"start":{"line":1308,"column":8},"end":{"line":1309,"column":95}},{"start":{"line":1308,"column":8},"end":{"line":1309,"column":95}}],"line":1308},"182":{"loc":{"start":{"line":1310,"column":8},"end":{"line":1311,"column":91}},"type":"if","locations":[{"start":{"line":1310,"column":8},"end":{"line":1311,"column":91}},{"start":{"line":1310,"column":8},"end":{"line":1311,"column":91}}],"line":1310},"183":{"loc":{"start":{"line":1312,"column":8},"end":{"line":1313,"column":93}},"type":"if","locations":[{"start":{"line":1312,"column":8},"end":{"line":1313,"column":93}},{"start":{"line":1312,"column":8},"end":{"line":1313,"column":93}}],"line":1312},"184":{"loc":{"start":{"line":1314,"column":8},"end":{"line":1315,"column":79}},"type":"if","locations":[{"start":{"line":1314,"column":8},"end":{"line":1315,"column":79}},{"start":{"line":1314,"column":8},"end":{"line":1315,"column":79}}],"line":1314},"185":{"loc":{"start":{"line":1316,"column":8},"end":{"line":1317,"column":77}},"type":"if","locations":[{"start":{"line":1316,"column":8},"end":{"line":1317,"column":77}},{"start":{"line":1316,"column":8},"end":{"line":1317,"column":77}}],"line":1316},"186":{"loc":{"start":{"line":1318,"column":8},"end":{"line":1319,"column":65}},"type":"if","locations":[{"start":{"line":1318,"column":8},"end":{"line":1319,"column":65}},{"start":{"line":1318,"column":8},"end":{"line":1319,"column":65}}],"line":1318}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":8,"13":8,"14":8,"15":8,"16":8,"17":8,"18":2,"19":2,"20":2,"21":2,"22":2,"23":2,"24":2,"25":2,"26":2,"27":2,"28":4,"29":4,"30":4,"31":6,"32":3,"33":3,"34":2,"35":1,"36":3,"37":3,"38":3,"39":2,"40":1,"41":2,"42":1,"43":4,"44":4,"45":4,"46":4,"47":4,"48":4,"49":4,"50":4,"51":4,"52":4,"53":4,"54":4,"55":4,"56":4,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":3,"84":3,"85":3,"86":6,"87":2,"88":4,"89":1,"90":3,"91":1,"92":2,"93":1,"94":1,"95":2,"96":2,"97":8,"98":1,"99":7,"100":1,"101":6,"102":1,"103":5,"104":1,"105":4,"106":1,"107":3,"108":1,"109":2,"110":1,"111":1,"112":1,"113":1,"114":4,"115":4,"116":4,"117":4,"118":4,"119":4,"120":4,"121":4,"122":4,"123":4,"124":4,"125":4,"126":4,"127":4,"128":4,"129":4,"130":4,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":3,"164":3,"165":3,"166":7,"167":2,"168":5,"169":1,"170":4,"171":1,"172":3,"173":1,"174":2,"175":1,"176":1,"177":2,"178":2,"179":6,"180":1,"181":5,"182":1,"183":4,"184":1,"185":3,"186":1,"187":2,"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":5,"201":5,"202":5,"203":5,"204":5,"205":5,"206":5,"207":5,"208":5,"209":5,"210":5,"211":5,"212":5,"213":5,"214":5,"215":5,"216":5,"217":5,"218":5,"219":5,"220":5,"221":5,"222":5,"223":5,"224":1,"225":1,"226":1,"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1,"249":1,"250":1,"251":1,"252":1,"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1,"261":1,"262":1,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1,"270":4,"271":4,"272":4,"273":11,"274":3,"275":8,"276":1,"277":7,"278":1,"279":6,"280":1,"281":5,"282":1,"283":4,"284":1,"285":3,"286":1,"287":2,"288":1,"289":1,"290":3,"291":3,"292":13,"293":1,"294":12,"295":1,"296":11,"297":1,"298":10,"299":1,"300":9,"301":1,"302":8,"303":1,"304":7,"305":1,"306":6,"307":1,"308":5,"309":1,"310":4,"311":1,"312":3,"313":1,"314":2,"315":1,"316":1,"317":1,"318":1,"319":1,"320":1,"321":3,"322":3,"323":3,"324":3,"325":3,"326":3,"327":3,"328":3,"329":3,"330":3,"331":3,"332":3,"333":3,"334":3,"335":3,"336":3,"337":3,"338":3,"339":3,"340":3,"341":3,"342":3,"343":3,"344":3,"345":1,"346":1,"347":1,"348":1,"349":1,"350":1,"351":1,"352":1,"353":1,"354":1,"355":1,"356":1,"357":1,"358":1,"359":1,"360":1,"361":1,"362":1,"363":1,"364":1,"365":1,"366":1,"367":1,"368":1,"369":1,"370":1,"371":1,"372":1,"373":1,"374":1,"375":1,"376":1,"377":1,"378":1,"379":1,"380":1,"381":1,"382":1,"383":1,"384":1,"385":1,"386":1,"387":1,"388":1,"389":1,"390":1,"391":2,"392":2,"393":2,"394":9,"395":1,"396":8,"397":1,"398":7,"399":1,"400":6,"401":1,"402":5,"403":1,"404":4,"405":1,"406":3,"407":1,"408":2,"409":1,"410":1,"411":1,"412":1,"413":10,"414":1,"415":9,"416":1,"417":8,"418":1,"419":7,"420":1,"421":6,"422":1,"423":5,"424":1,"425":4,"426":1,"427":3,"428":1,"429":2,"430":1,"431":1,"432":1,"433":0,"434":1,"435":1,"436":1,"437":1,"438":1,"439":1,"440":1,"441":1,"442":4,"443":4,"444":4,"445":4,"446":4,"447":4,"448":4,"449":4,"450":4,"451":4,"452":4,"453":4,"454":4,"455":1,"456":1,"457":1,"458":1,"459":1,"460":1,"461":1,"462":1,"463":1,"464":1,"465":1,"466":1,"467":1,"468":1,"469":1,"470":1,"471":1,"472":1,"473":1,"474":1,"475":1,"476":1,"477":1,"478":1,"479":3,"480":3,"481":3,"482":6,"483":2,"484":4,"485":1,"486":3,"487":1,"488":2,"489":1,"490":1,"491":2,"492":2,"493":6,"494":1,"495":5,"496":1,"497":4,"498":1,"499":3,"500":1,"501":2,"502":1,"503":1,"504":1,"505":1,"506":1,"507":1,"508":4,"509":4,"510":4,"511":4,"512":4,"513":4,"514":4,"515":4,"516":4,"517":4,"518":4,"519":4,"520":4,"521":4,"522":4,"523":4,"524":1,"525":1,"526":1,"527":1,"528":1,"529":1,"530":1,"531":1,"532":1,"533":1,"534":1,"535":1,"536":1,"537":1,"538":1,"539":1,"540":1,"541":1,"542":1,"543":1,"544":1,"545":1,"546":1,"547":1,"548":1,"549":1,"550":1,"551":1,"552":1,"553":1,"554":3,"555":3,"556":3,"557":6,"558":1,"559":5,"560":1,"561":4,"562":2,"563":2,"564":1,"565":1,"566":2,"567":2,"568":3,"569":1,"570":2,"571":1,"572":1,"573":1,"574":1,"575":1,"576":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1,"587":1,"588":1},"f":{"0":1,"1":8,"2":8,"3":8,"4":2,"5":4,"6":4,"7":4,"8":4,"9":1,"10":3,"11":4,"12":4,"13":4,"14":1,"15":3,"16":5,"17":5,"18":5,"19":1,"20":4,"21":3,"22":3,"23":3,"24":1,"25":2,"26":4,"27":4,"28":4,"29":1,"30":3,"31":4,"32":4,"33":4,"34":1,"35":3},"b":{"0":[1,1],"1":[2,0],"2":[2,0],"3":[2,0],"4":[3,3],"5":[2,1],"6":[2,1],"7":[1,0],"8":[1,0],"9":[1,0],"10":[1,0],"11":[1,0],"12":[1,0],"13":[1,0],"14":[1,0],"15":[1,0],"16":[1,0],"17":[1,0],"18":[2,4],"19":[1,3],"20":[1,2],"21":[1,1],"22":[1,7],"23":[1,6],"24":[1,5],"25":[1,4],"26":[1,3],"27":[1,2],"28":[1,1],"29":[1,0],"30":[1,0],"31":[1,0],"32":[1,0],"33":[1,0],"34":[1,0],"35":[1,0],"36":[1,0],"37":[1,0],"38":[1,0],"39":[1,0],"40":[1,0],"41":[1,0],"42":[1,0],"43":[2,5],"44":[1,4],"45":[1,3],"46":[1,2],"47":[1,1],"48":[1,5],"49":[1,4],"50":[1,3],"51":[1,2],"52":[1,1],"53":[1,0],"54":[1,0],"55":[1,0],"56":[1,0],"57":[1,0],"58":[1,0],"59":[1,0],"60":[1,0],"61":[1,0],"62":[1,0],"63":[1,0],"64":[1,0],"65":[1,0],"66":[1,0],"67":[1,0],"68":[1,0],"69":[1,0],"70":[1,0],"71":[1,0],"72":[1,0],"73":[1,0],"74":[1,0],"75":[1,0],"76":[1,0],"77":[1,0],"78":[3,8],"79":[1,7],"80":[1,6],"81":[1,5],"82":[1,4],"83":[1,3],"84":[1,2],"85":[1,1],"86":[1,12],"87":[1,11],"88":[1,10],"89":[1,9],"90":[1,8],"91":[1,7],"92":[1,6],"93":[1,5],"94":[1,4],"95":[1,3],"96":[1,2],"97":[1,0],"98":[1,0],"99":[1,0],"100":[1,0],"101":[1,0],"102":[1,0],"103":[1,0],"104":[1,0],"105":[1,0],"106":[1,0],"107":[1,0],"108":[1,0],"109":[1,0],"110":[1,0],"111":[1,0],"112":[1,0],"113":[1,0],"114":[1,0],"115":[1,0],"116":[1,0],"117":[1,0],"118":[1,0],"119":[1,0],"120":[1,8],"121":[1,7],"122":[1,6],"123":[1,5],"124":[1,4],"125":[1,3],"126":[1,2],"127":[1,1],"128":[1,9],"129":[1,8],"130":[1,7],"131":[1,6],"132":[1,5],"133":[1,4],"134":[1,3],"135":[1,2],"136":[1,1],"137":[1,0],"138":[1,0],"139":[1,0],"140":[1,0],"141":[1,0],"142":[1,0],"143":[1,0],"144":[1,0],"145":[1,0],"146":[1,0],"147":[1,0],"148":[1,0],"149":[1,0],"150":[1,0],"151":[2,4],"152":[1,3],"153":[1,2],"154":[1,1],"155":[1,5],"156":[1,4],"157":[1,3],"158":[1,2],"159":[1,1],"160":[1,0],"161":[1,0],"162":[1,0],"163":[1,0],"164":[1,0],"165":[1,0],"166":[1,0],"167":[1,0],"168":[1,0],"169":[1,0],"170":[1,0],"171":[1,0],"172":[1,0],"173":[1,0],"174":[1,5],"175":[1,4],"176":[2,2],"177":[1,1],"178":[1,2],"179":[1,1],"180":[1,0],"181":[1,0],"182":[1,0],"183":[1,0],"184":[1,0],"185":[1,0],"186":[1,0]},"inputSourceMap":{"version":3,"file":"Settings.js","sourceRoot":"","sources":["../../src/rdas/Settings.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { BentleyError, BentleyStatus } from \"@itwin/core-bentley\";\r\n\r\n/** Possible types of a job. */\r\nexport enum RDAJobType {\r\n    NONE = \"not recognized\",\r\n    O2D = \"objects2D\",\r\n    S2D = \"segmentation2D\",\r\n    O3D = \"objects3D\",\r\n    S3D = \"segmentation3D\",\r\n    ChangeDetection = \"changeDetection\",\r\n    L3D = \"lines3D\",\r\n    ExtractGround = \"extractGround\"\r\n}\r\n\r\n/**\r\n * Possible inputs for an Object Detection 2D job.\r\n */\r\nclass O2DInputs {\r\n    /** Path to ContextScene with photos to analyze. */\r\n    photos: string;\r\n    /** Path to photo object detector to apply. */\r\n    photoObjectDetector: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * Path to ContextScene with photos to analyze..\r\n         * @type {string}\r\n         */\r\n        this.photos = \"\";\r\n        /**\r\n         * Path to photo object detector to apply.\r\n         * @type {string}\r\n         */\r\n        this.photoObjectDetector = \"\";\r\n    }\r\n}\r\n\r\n/**\r\n * Possible outputs for an Object Detection 2D job.\r\n */\r\nclass O2DOutputs {\r\n    /** Objects detected in photos. */\r\n    objects2D: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * Objects detected in photos.\r\n         * @type {string}\r\n         */\r\n        this.objects2D = \"\";\r\n    }\r\n}\r\n\r\n/** Settings for Object Detection 2D jobs. */\r\nexport class O2DJobSettings {\r\n    /** Type of job settings. */\r\n    type: RDAJobType;\r\n    /** Possible inputs for this job. */\r\n    inputs: O2DInputs;\r\n    /** \r\n     * Possible outputs for this job. \r\n     * Fill the outputs you want for the job with a string (normally the name of the output) before passing it to createJob. \r\n     */\r\n    outputs: O2DOutputs;\r\n\r\n    constructor() {\r\n        /**\r\n         * Type of job settings.\r\n         * @type {RDAJobType}\r\n         */\r\n        this.type = RDAJobType.O2D;\r\n        /** \r\n         * Possible inputs for this job. \r\n         * @type {O2DInputs}\r\n         */\r\n        this.inputs = new O2DInputs();\r\n        /** \r\n         * Possible outputs for this job. \r\n         * Fill the outputs you want for the job with a string (normally the name of the output) before passing it to createJob. \r\n         * @type {O2DOutputs}\r\n         */\r\n        this.outputs = new O2DOutputs();\r\n    }\r\n\r\n    /**\r\n     * Transform settings into json.\r\n     * @returns {any} json with settings values.\r\n     */\r\n    public toJson(): any {\r\n        const json: any = {};\r\n        json[\"inputs\"] = [];\r\n        if (this.inputs.photos)\r\n            json[\"inputs\"].push({ \"name\": \"photos\", \"realityDataId\": this.inputs.photos });\r\n\r\n        if (this.inputs.photoObjectDetector)\r\n            json[\"inputs\"].push({ \"name\": \"photoObjectDetector\", \"realityDataId\": this.inputs.photoObjectDetector });\r\n\r\n        json[\"outputs\"] = [];\r\n        if (this.outputs.objects2D)\r\n            json[\"outputs\"].push(\"objects2D\");\r\n\r\n        return json;\r\n    }\r\n\r\n    /**\r\n     * Transform json received from cloud service into settings.\r\n     * @param {any} settingsJson Dictionary with settings received from cloud service.\r\n     * @returns {O2DJobSettings} New settings.\r\n     */\r\n    public static async fromJson(settingsJson: any): Promise<O2DJobSettings> {\r\n        const newJobSettings = new O2DJobSettings();\r\n        const inputsJson = settingsJson[\"inputs\"];\r\n        for (const input of inputsJson) {\r\n            if (input[\"name\"] === \"photos\")\r\n                newJobSettings.inputs.photos = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"photoObjectDetector\")\r\n                newJobSettings.inputs.photoObjectDetector = input[\"realityDataId\"];\r\n            else\r\n                return Promise.reject(new BentleyError(BentleyStatus.ERROR, \"Found unexpected input name : \" + input[\"name\"]));\r\n        }\r\n        const outputsJson = settingsJson[\"outputs\"];\r\n        for (const output of outputsJson) {\r\n            if (output[\"name\"] === \"objects2D\")\r\n                newJobSettings.outputs.objects2D = output[\"realityDataId\"];\r\n            else\r\n                return Promise.reject(new BentleyError(BentleyStatus.ERROR, \"Found unexpected output name : \" + output[\"name\"]));\r\n        }\r\n\r\n        return newJobSettings;\r\n    }\r\n}\r\n\r\n/**\r\n * Possible inputs for a Segmentation 2D job.\r\n */\r\nclass S2DInputs {\r\n    /** Path to ContextScene with photos to analyze. */\r\n    photos: string;\r\n    /** Path to photo segmentation detector to apply. */\r\n    photoSegmentationDetector: string;\r\n    /** Path to orthophoto to analyse. */\r\n    orthophoto: string;\r\n    /** Path to orthophoto segmentation detector to apply. */\r\n    orthophotoSegmentationDetector: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * Path to ContextScene with photos to analyze.\r\n         * @type {string}\r\n         */\r\n        this.photos = \"\";\r\n        /**\r\n         * Path to photo segmentation detector to apply.\r\n         * @type {string}\r\n         */\r\n        this.photoSegmentationDetector = \"\";\r\n        /**\r\n         * Path to orthophoto to analyse.\r\n         * @type {string}\r\n         */\r\n        this.orthophoto = \"\";\r\n        /**\r\n         * Path to orthophoto segmentation detector to apply.\r\n         * @type {string}\r\n         */\r\n        this.orthophotoSegmentationDetector = \"\";\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n */\r\nclass S2DOutputs {\r\n    /** Segmented photos. */\r\n    segmentation2D: string;\r\n    /** Detected 2D polygons. */\r\n    polygons2D: string;\r\n    /** 2D polygons exported to ESRI shapefile. */\r\n    exportedPolygons2DSHP: string;\r\n    /** Detected 2D lines. */\r\n    lines2D: string;\r\n    /** ContextScene pointing to segmented photos. */\r\n    segmentedPhotos: string;\r\n    /** 2D lines exported to ESRI shapefile. */\r\n    exportedLines2DSHP: string;\r\n    /** 2D lines exported to DGN file. */\r\n    exportedLines2DDGN: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * Segmented photos.\r\n         * @type {string}\r\n         */\r\n        this.segmentation2D = \"\";\r\n        /**\r\n         * Detected 2D polygons.\r\n         * @type {string}\r\n         */\r\n        this.polygons2D = \"\";\r\n        /**\r\n         * 2D polygons exported to ESRI shapefile.\r\n         * @type {string}\r\n         */\r\n        this.exportedPolygons2DSHP = \"\";\r\n        /**\r\n         * Detected 2D lines.\r\n         * @type {string}\r\n         */\r\n        this.lines2D = \"\";\r\n        /**\r\n         * ContextScene pointing to segmented photos.\r\n         * @type {string}\r\n         */\r\n        this.segmentedPhotos = \"\";\r\n        /**\r\n         * 2D lines exported to ESRI shapefile.\r\n         * @type {string}\r\n         */\r\n        this.exportedLines2DSHP = \"\";\r\n        /**\r\n         * 2D lines exported to DGN file.\r\n         * @type {string}\r\n         */\r\n        this.exportedLines2DDGN = \"\";\r\n    }\r\n}\r\n\r\n/**\r\n * Settings for Segmentation 2D jobs.\r\n */\r\nexport class S2DJobSettings {\r\n    /** Type of job settings. */\r\n    type: RDAJobType;\r\n    /** Possible inputs for this job. */\r\n    inputs: S2DInputs;\r\n    /** \r\n     * Possible outputs for this job. \r\n     * Fill the outputs you want for the job with a string (normally the name of the output) before passing it to createJob.\r\n     */\r\n    outputs: S2DOutputs;\r\n\r\n    constructor() {\r\n        /**\r\n         * Type of job settings.\r\n         * @type {RDAJobType}\r\n         */\r\n        this.type = RDAJobType.S2D;\r\n        /**\r\n         * Possible inputs for this job.\r\n         * @type {S2DInputs}\r\n         */\r\n        this.inputs = new S2DInputs();\r\n        /**\r\n         * Possible outputs for this job.\r\n         * @type {S2DOutputs}\r\n         */\r\n        this.outputs = new S2DOutputs();\r\n    }\r\n\r\n    /**\r\n     * Transform settings into json.\r\n     * @returns {any} json with settings values.\r\n     */\r\n    public toJson(): any {\r\n        const json: any = {};\r\n        json[\"inputs\"] = [];\r\n        if (this.inputs.photos)\r\n            json[\"inputs\"].push({ \"name\": \"photos\", \"realityDataId\": this.inputs.photos });\r\n\r\n        if (this.inputs.photoSegmentationDetector)\r\n            json[\"inputs\"].push({ \"name\": \"photoSegmentationDetector\", \"realityDataId\": this.inputs.photoSegmentationDetector });\r\n\r\n        if (this.inputs.orthophoto)\r\n            json[\"inputs\"].push({ \"name\": \"orthophoto\", \"realityDataId\": this.inputs.orthophoto });\r\n\r\n        if (this.inputs.orthophotoSegmentationDetector)\r\n            json[\"inputs\"].push({ \"name\": \"orthophotoSegmentationDetector\", \"realityDataId\": this.inputs.orthophotoSegmentationDetector });\r\n\r\n        json[\"outputs\"] = [];\r\n        if (this.outputs.segmentation2D)\r\n            json[\"outputs\"].push(\"segmentation2D\");\r\n\r\n        if(this.outputs.segmentedPhotos)\r\n            json[\"outputs\"].push(\"segmentedPhotos\");\r\n\r\n        if (this.outputs.polygons2D)\r\n            json[\"outputs\"].push(\"polygons2D\");\r\n\r\n        if (this.outputs.exportedPolygons2DSHP)\r\n            json[\"outputs\"].push(\"exportedPolygons2DSHP\");\r\n\r\n        if (this.outputs.lines2D)\r\n            json[\"outputs\"].push(\"lines2D\");\r\n\r\n        if (this.outputs.exportedLines2DDGN)\r\n            json[\"outputs\"].push(\"exportedLines2DDGN\");\r\n\r\n        if (this.outputs.exportedLines2DSHP)\r\n            json[\"outputs\"].push(\"exportedLines2DSHP\");\r\n\r\n        return json;\r\n    }\r\n\r\n    /**\r\n     * Transform json received from cloud service into settings.\r\n     * @param {any} settingsJson Dictionary with settings received from cloud service.\r\n     * @returns {S2DJobSettings} New settings.\r\n     */\r\n    public static async fromJson(settingsJson: any): Promise<S2DJobSettings> {\r\n        const newJobSettings = new S2DJobSettings();\r\n        const inputsJson = settingsJson[\"inputs\"];\r\n        for (const input of inputsJson) {\r\n            if (input[\"name\"] === \"photos\")\r\n                newJobSettings.inputs.photos = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"photoSegmentationDetector\")\r\n                newJobSettings.inputs.photoSegmentationDetector = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"orthophoto\")\r\n                newJobSettings.inputs.orthophoto = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"orthophotoSegmentationDetector\")\r\n                newJobSettings.inputs.orthophotoSegmentationDetector = input[\"realityDataId\"];\r\n            else\r\n                return Promise.reject(new BentleyError(BentleyStatus.ERROR, \"Found unexpected input name : \" + input[\"name\"]));\r\n        }\r\n        const outputsJson = settingsJson[\"outputs\"];\r\n        for (const output of outputsJson) {\r\n            if (output[\"name\"] === \"segmentation2D\")\r\n                newJobSettings.outputs.segmentation2D = output[\"realityDataId\"];\r\n            else if(output[\"name\"] === \"segmentedPhotos\")\r\n                newJobSettings.outputs.segmentedPhotos = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"polygons2D\")\r\n                newJobSettings.outputs.polygons2D = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedPolygons2DSHP\")\r\n                newJobSettings.outputs.exportedPolygons2DSHP = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"lines2D\")\r\n                newJobSettings.outputs.lines2D = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedLines2DDGN\")\r\n                newJobSettings.outputs.exportedLines2DDGN = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedLines2DSHP\")\r\n                newJobSettings.outputs.exportedLines2DSHP = output[\"realityDataId\"];\r\n            else\r\n                return Promise.reject(new BentleyError(BentleyStatus.ERROR, \"Found unexpected output name : \" + output[\"name\"]));\r\n        }\r\n\r\n        return newJobSettings;\r\n    }\r\n}\r\n\r\n/** \r\n * Possible inputs for an Object Detection 3D job.\r\n */\r\nclass O3DInputs {\r\n    /** Path to ContextScene with oriented photos to analyze. */\r\n    orientedPhotos: string;\r\n    /** Collection of point clouds. */\r\n    pointClouds: string;\r\n    /** Path to photo object detector to apply. */\r\n    photoObjectDetector: string;\r\n    /** Given 2D objects. */\r\n    objects2D: string;\r\n    /** Collection of meshes. */\r\n    meshes: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * Path to ContextScene with oriented photos to analyze.\r\n         * @type {string}\r\n         */\r\n        this.orientedPhotos = \"\";\r\n        /**\r\n         * Collection of point clouds.\r\n         * @type {string}\r\n         */\r\n        this.pointClouds = \"\";\r\n        /**\r\n         * Path to photo object detector to apply.\r\n         * @type {string}\r\n         */\r\n        this.photoObjectDetector = \"\";\r\n        /**\r\n         * Given 2D objects.\r\n         * @type {string}\r\n         */\r\n        this.objects2D = \"\";\r\n        /**\r\n         * Collection of meshes.\r\n         * @type {string}\r\n         */\r\n        this.meshes = \"\";\r\n    }\r\n}\r\n\r\n/**\r\n * Possible outputs for an Object Detection 3D job.\r\n */\r\nclass O3DOutputs {\r\n    /** 2D objects detected by current job. */\r\n    objects2D: string;\r\n    /** Detected 3D objects. */\r\n    objects3D: string;\r\n    /** DGN file export with 3D objects. */\r\n    exportedObjects3DDGN: string;\r\n    /** Cesium 3D Tiles file export with 3D objects. */\r\n    exportedObjects3DCesium: string;\r\n    /** ESRI SHP file export with locations of the 3D objects. */\r\n    exportedLocations3DSHP: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * 2D objects detected by current job.\r\n         * @type {string}\r\n         */\r\n        this.objects2D = \"\";\r\n        /**\r\n         * Detected 3D objects.\r\n         * @type {string}\r\n         */\r\n        this.objects3D = \"\";\r\n        /**\r\n         * DGN file export with 3D objects.\r\n         * @type {string}\r\n         */\r\n        this.exportedObjects3DDGN = \"\";\r\n        /**\r\n         * Cesium 3D Tiles file export with 3D objects.\r\n         * @type {string}\r\n         */\r\n        this.exportedObjects3DCesium = \"\";\r\n        /**\r\n         * ESRI SHP file export with locations of the 3D objects.\r\n         * @type {string}\r\n         */\r\n        this.exportedLocations3DSHP = \"\";\r\n    }\r\n}\r\n\r\n/**\r\n * Settings for Object Detection 3D jobs.\r\n */\r\nexport class O3DJobSettings {\r\n    /** Type of job settings. */\r\n    type: RDAJobType;\r\n    /** Possible inputs for this job. */\r\n    inputs: O3DInputs;\r\n    /** \r\n     * Possible outputs for this job. \r\n     * Fill the outputs you want for the job with a string (normally the name of the output) before passing it to createJob. \r\n     */\r\n    outputs: O3DOutputs;\r\n    /** Improve detection using tie points in orientedPhotos. */\r\n    useTiePoints: boolean;\r\n    /** Minimum number of 2D objects to generate a 3D object. */\r\n    minPhotos: number;\r\n    /** Maximum distance between photos and 3D objects. */\r\n    maxDist: number;\r\n    /** SRS used by exports. */\r\n    exportSrs: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * Type of job settings.\r\n         * @type {RDAJobType}\r\n         */\r\n        this.type = RDAJobType.O3D;\r\n        /**\r\n         * Possible inputs for this job.\r\n         * @type {O3DInputs}\r\n         */\r\n        this.inputs = new O3DInputs();\r\n        /**\r\n         * Possible outputs for this job. \r\n         * Fill the outputs you want for the job with a string (normally the name of the output) before passing it to createJob. \r\n         * @type {O3DOutputs}\r\n         */\r\n        this.outputs = new O3DOutputs();\r\n        /**\r\n         * Improve detection using tie points in orientedPhotos.\r\n         * @type {boolean}\r\n         */\r\n        this.useTiePoints = false;\r\n        /**\r\n         * Minimum number of 2D objects to generate a 3D object.\r\n         * @type {number}\r\n         */\r\n        this.minPhotos = 0;\r\n        /**\r\n         * Maximum distance between photos and 3D objects.\r\n         * @type {number}\r\n         */\r\n        this.maxDist = 0;\r\n        /**\r\n         * SRS used by exports.\r\n         * @type {string}\r\n         */\r\n        this.exportSrs = \"\";\r\n    }\r\n\r\n    /**\r\n     * Transform settings into json.\r\n     * @returns {any} json with settings values.\r\n     */\r\n    public toJson(): any {\r\n        const json: any = {};\r\n        json[\"inputs\"] = [];\r\n        if (this.inputs.orientedPhotos)\r\n            json[\"inputs\"].push({ \"name\": \"orientedPhotos\", \"realityDataId\": this.inputs.orientedPhotos });\r\n        if (this.inputs.photoObjectDetector)\r\n            json[\"inputs\"].push({ \"name\": \"photoObjectDetector\", \"realityDataId\": this.inputs.photoObjectDetector });\r\n        if (this.inputs.objects2D)\r\n            json[\"inputs\"].push({ \"name\": \"objects2D\", \"realityDataId\": this.inputs.objects2D });\r\n        if (this.inputs.pointClouds)\r\n            json[\"inputs\"].push({ \"name\": \"pointClouds\", \"realityDataId\": this.inputs.pointClouds });\r\n        if (this.inputs.meshes)\r\n            json[\"inputs\"].push({ \"name\": \"meshes\", \"realityDataId\": this.inputs.meshes });\r\n        \r\n        json[\"outputs\"] = [];\r\n        if (this.outputs.objects2D)\r\n            json[\"outputs\"].push(\"objects2D\");\r\n        if (this.outputs.objects3D)\r\n            json[\"outputs\"].push(\"objects3D\");\r\n        if (this.outputs.exportedObjects3DDGN)\r\n            json[\"outputs\"].push(\"exportedObjects3DDGN\");\r\n        if (this.outputs.exportedObjects3DCesium)\r\n            json[\"outputs\"].push(\"exportedObjects3DCesium\");\r\n        if (this.outputs.exportedLocations3DSHP)\r\n            json[\"outputs\"].push(\"exportedLocations3DSHP\");\r\n        \r\n        if (this.useTiePoints)\r\n            json[\"useTiePoints\"] = \"true\";\r\n        if (this.minPhotos)\r\n            json[\"minPhotos\"] = this.minPhotos.toString();\r\n        if (this.maxDist)\r\n            json[\"maxDist\"] = this.maxDist.toString();\r\n        if (this.exportSrs)\r\n            json[\"exportSrs\"] = this.exportSrs;\r\n\r\n        return json;\r\n    }\r\n\r\n    /**\r\n     * Transform json received from cloud service into settings.\r\n     * @param {any} settingsJson Dictionary with settings received from cloud service.\r\n     * @returns {O3DJobSettings} New settings.\r\n     */\r\n    public static async fromJson(settingsJson: any): Promise<O3DJobSettings> {\r\n        const newJobSettings = new O3DJobSettings();\r\n        const inputsJson = settingsJson[\"inputs\"];\r\n        for (const input of inputsJson) {\r\n            if (input[\"name\"] === \"orientedPhotos\")\r\n                newJobSettings.inputs.orientedPhotos = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"photoObjectDetector\")\r\n                newJobSettings.inputs.photoObjectDetector = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"pointClouds\")\r\n                newJobSettings.inputs.pointClouds = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"objects2D\")\r\n                newJobSettings.inputs.objects2D = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"meshes\")\r\n                newJobSettings.inputs.meshes = input[\"realityDataId\"];\r\n            else\r\n                return Promise.reject(new BentleyError(BentleyStatus.ERROR, \"Found unexpected input name : \" + input[\"name\"]));\r\n        }\r\n        const outputsJson = settingsJson[\"outputs\"];\r\n        for (const output of outputsJson) {\r\n            if (output[\"name\"] === \"objects2D\")\r\n                newJobSettings.outputs.objects2D = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"objects3D\")\r\n                newJobSettings.outputs.objects3D = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedObjects3DDGN\")\r\n                newJobSettings.outputs.exportedObjects3DDGN = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedObjects3DCesium\")\r\n                newJobSettings.outputs.exportedObjects3DCesium = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedLocations3DSHP\")\r\n                newJobSettings.outputs.exportedLocations3DSHP = output[\"realityDataId\"];\r\n            else\r\n                return Promise.reject(new BentleyError(BentleyStatus.ERROR, \"Found unexpected output name : \" + output[\"name\"]));\r\n        }\r\n        if (\"exportSrs\" in settingsJson)\r\n            newJobSettings.exportSrs = settingsJson[\"exportSrs\"];\r\n        if (\"minPhotos\" in settingsJson)\r\n            newJobSettings.minPhotos = JSON.parse(settingsJson[\"minPhotos\"]);\r\n        if (\"maxDist\" in settingsJson)\r\n            newJobSettings.maxDist = JSON.parse(settingsJson[\"maxDist\"]);\r\n        if (\"useTiePoints\" in settingsJson)\r\n            newJobSettings.useTiePoints = JSON.parse(settingsJson[\"useTiePoints\"]);\r\n\r\n        return newJobSettings;\r\n    }\r\n}\r\n\r\n/**\r\n * Possible inputs for a Segmentation 3D job.\r\n */\r\nclass S3DInputs {\r\n    /** Collection of point clouds. */\r\n    pointClouds: string;\r\n    /** Collection of meshes. */\r\n    meshes: string;\r\n    /** Point cloud segmentation detector. */\r\n    pointCloudSegmentationDetector: string;\r\n    /** Given 3D segmentation. */\r\n    segmentation3D: string;\r\n    /** Photos and their orientation. */\r\n    orientedPhotos: string;\r\n    /** Object detector to analyze oriented photos. */\r\n    photoObjectDetector: string;\r\n    /** Given 2D objects. */\r\n    objects2D: string;\r\n    /** Path of clipping polygon to apply. */\r\n    clipPolygon: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * Collection of point clouds.\r\n         * @type {string}\r\n         */\r\n        this.pointClouds = \"\";\r\n        /**\r\n         * Collection of meshes.\r\n         * @type {string}\r\n         */\r\n        this.meshes = \"\";\r\n        /**\r\n         * Point cloud segmentation detector.\r\n         * @type {string}\r\n         */\r\n        this.pointCloudSegmentationDetector = \"\";\r\n        /**\r\n         * Given 3D segmentation.\r\n         * @type {string}\r\n         */\r\n        this.segmentation3D = \"\";\r\n        /**\r\n         * Photos and their orientation.\r\n         * @type {string}\r\n         */\r\n        this.orientedPhotos = \"\";\r\n        /**\r\n         * Object detector to analyze oriented photos.\r\n         * @type {string}\r\n         */\r\n        this.photoObjectDetector = \"\";\r\n        /**\r\n         * Given 2D objects.\r\n         * @type {string}\r\n         */\r\n        this.objects2D = \"\";\r\n        /**\r\n         * Path of clipping polygon to apply.\r\n         * @type {string}\r\n         */\r\n        this.clipPolygon = \"\";\r\n    }\r\n}\r\n\r\n/**\r\n * Possible outputs for a Segmentation 3D job.\r\n */\r\nclass S3DOutputs {\r\n    /** 3D segmentation computed by current job. */\r\n    segmentation3D: string;\r\n    /** 3D segmentation as an OPC file. */\r\n    segmentedPointCloud: string;\r\n    /** 2D objects detected by current job. */\r\n    objects2D: string;\r\n    /** 3D segmentation exported as a POD file. */\r\n    exportedSegmentation3DPOD: string;\r\n    /** 3D segmentation exported as a LAS file. */\r\n    exportedSegmentation3DLAS: string;\r\n    /** 3D segmentation exported as a LAZ file. */\r\n    exportedSegmentation3DLAZ: string;\r\n    /** 3D segmentation exported as a PLY file. */\r\n    exportedSegmentation3DPLY: string;\r\n    /** 3D objects inferred from 3D segmentation. */\r\n    objects3D: string;\r\n    /** DGN file export with 3D objects. */\r\n    exportedObjects3DDGN: string;\r\n    /** Cesium 3D Tiles file export with 3D objects. */\r\n    exportedObjects3DCesium: string;\r\n    /** ESRI SHP file export with locations of the 3D objects. */\r\n    exportedLocations3DSHP: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * 3D segmentation computed by current job.\r\n         * @type {string}\r\n         */\r\n        this.segmentation3D = \"\";\r\n        /**\r\n         * 3D segmentation as an OPC file.\r\n         * @type {string}\r\n         */\r\n        this.segmentedPointCloud = \"\";\r\n        /**\r\n         * 2D objects detected by current job.\r\n         * @type {string}\r\n         */\r\n        this.objects2D = \"\";\r\n        /**\r\n         * 3D segmentation exported as a POD file.\r\n         * @type {string}\r\n         */\r\n        this.exportedSegmentation3DPOD = \"\";\r\n        /**\r\n         * 3D segmentation exported as a LAS file.\r\n         * @type {string}\r\n         */\r\n        this.exportedSegmentation3DLAS = \"\";\r\n        /**\r\n         * 3D segmentation exported as a LAZ file.\r\n         * @type {string}\r\n         */\r\n        this.exportedSegmentation3DLAZ = \"\";\r\n        /**\r\n         * 3D segmentation exported as a PLY file.\r\n         * @type {string}\r\n         */\r\n        this.exportedSegmentation3DPLY = \"\";\r\n        /**\r\n         * 3D objects inferred from 3D segmentation.\r\n         * @type {string}\r\n         */\r\n        this.objects3D = \"\";\r\n        /**\r\n         * DGN file export with 3D objects.\r\n         * @type {string}\r\n         */\r\n        this.exportedObjects3DDGN = \"\";\r\n        /**\r\n         * Cesium 3D Tiles file export with 3D objects.\r\n         * @type {string}\r\n         */\r\n        this.exportedObjects3DCesium = \"\";\r\n        /**\r\n         * ESRI SHP file export with locations of the 3D objects.\r\n         * @type {string}\r\n         */\r\n        this.exportedLocations3DSHP = \"\";\r\n    }\r\n}\r\n\r\n/**\r\n * Settings for Segmentation 3D jobs.\r\n */\r\nexport class S3DJobSettings {\r\n    /** Type of job settings. */\r\n    type: RDAJobType;\r\n    /** Possible inputs for this job settings. */\r\n    inputs: S3DInputs;\r\n    /** \r\n     * Possible outputs for this job. \r\n     * Fill the outputs you want for the job with a string (normally the name of the output) before passing it to createJob. \r\n     */\r\n    outputs: S3DOutputs;\r\n    /** If confidence is saved on output files or not. */\r\n    saveConfidence: boolean;\r\n    /** SRS used by exports. */\r\n    exportSrs: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * Type of job settings.\r\n         * @type {RDAJobType}\r\n         */\r\n        this.type = RDAJobType.S3D;\r\n        /**\r\n         * Possible inputs for this job settings.\r\n         * @type {S3DInputs}\r\n         */\r\n        this.inputs = new S3DInputs();\r\n        /**\r\n         * Possible outputs for this job. \r\n         * Fill the outputs you want for the job with a string (normally the name of the output) before passing it to createJob. \r\n         * @type {S3DOutputs}\r\n         */\r\n        this.outputs = new S3DOutputs();\r\n        /**\r\n         * If confidence is saved on output files or not.\r\n         * @type {boolean}\r\n         */\r\n        this.saveConfidence = false;\r\n        /**\r\n         * SRS used by exports.\r\n         * @type {string}\r\n         */\r\n        this.exportSrs = \"\";\r\n    }\r\n\r\n    /**\r\n     * Transform settings into json.\r\n     * @returns {any} json with settings values.\r\n     */\r\n    public toJson(): any {\r\n        const json: any = {};\r\n        json[\"inputs\"] = [];\r\n        if (this.inputs.pointClouds)\r\n            json[\"inputs\"].push({ \"name\": \"pointClouds\", \"realityDataId\": this.inputs.pointClouds });\r\n\r\n        if (this.inputs.meshes)\r\n            json[\"inputs\"].push({ \"name\": \"meshes\", \"realityDataId\": this.inputs.meshes });\r\n        \r\n        if (this.inputs.pointCloudSegmentationDetector)\r\n            json[\"inputs\"].push({ \"name\": \"pointCloudSegmentationDetector\", \"realityDataId\": this.inputs.pointCloudSegmentationDetector });\r\n        \r\n        if (this.inputs.segmentation3D)\r\n            json[\"inputs\"].push({ \"name\": \"segmentation3D\", \"realityDataId\": this.inputs.segmentation3D });\r\n        \r\n        if (this.inputs.orientedPhotos)\r\n            json[\"inputs\"].push({ \"name\": \"orientedPhotos\", \"realityDataId\": this.inputs.orientedPhotos });\r\n\r\n        if (this.inputs.photoObjectDetector)\r\n            json[\"inputs\"].push({ \"name\": \"photoObjectDetector\", \"realityDataId\": this.inputs.photoObjectDetector });\r\n\r\n        if (this.inputs.objects2D)\r\n            json[\"inputs\"].push({ \"name\": \"objects2D\", \"realityDataId\": this.inputs.objects2D });\r\n\r\n        if (this.inputs.clipPolygon)\r\n            json[\"inputs\"].push({ \"name\": \"clipPolygon\", \"realityDataId\": this.inputs.clipPolygon });\r\n        \r\n        json[\"outputs\"] = [];\r\n        if (this.outputs.segmentation3D)\r\n            json[\"outputs\"].push(\"segmentation3D\");\r\n\r\n        if (this.outputs.segmentedPointCloud)\r\n            json[\"outputs\"].push(\"segmentedPointCloud\");\r\n\r\n        if (this.outputs.objects2D)\r\n            json[\"outputs\"].push(\"objects2D\");\r\n\r\n        if (this.outputs.exportedSegmentation3DPOD)\r\n            json[\"outputs\"].push(\"exportedSegmentation3DPOD\");\r\n\r\n        if (this.outputs.exportedSegmentation3DLAS)\r\n            json[\"outputs\"].push(\"exportedSegmentation3DLAS\");\r\n\r\n        if (this.outputs.exportedSegmentation3DLAZ)\r\n            json[\"outputs\"].push(\"exportedSegmentation3DLAZ\");\r\n\r\n        if (this.outputs.exportedSegmentation3DPLY)\r\n            json[\"outputs\"].push(\"exportedSegmentation3DPLY\");\r\n\r\n        if (this.outputs.objects3D)\r\n            json[\"outputs\"].push(\"objects3D\");\r\n\r\n        if (this.outputs.exportedObjects3DDGN)\r\n            json[\"outputs\"].push(\"exportedObjects3DDGN\");\r\n\r\n        if (this.outputs.exportedObjects3DCesium)\r\n            json[\"outputs\"].push(\"exportedObjects3DCesium\");\r\n\r\n        if (this.outputs.exportedLocations3DSHP)\r\n            json[\"outputs\"].push(\"exportedLocations3DSHP\");\r\n        \r\n        if (this.exportSrs)\r\n            json[\"exportSrs\"] = this.exportSrs;\r\n\r\n        if (this.saveConfidence)\r\n            json[\"saveConfidence\"] = \"true\";\r\n\r\n        return json;\r\n    }\r\n\r\n    /**\r\n     * Transform json received from cloud service into settings.\r\n     * @param {any} settingsJson Dictionary with settings received from cloud service.\r\n     * @returns {S3DJobSettings} New settings.\r\n     */\r\n    public static async fromJson(settingsJson: any): Promise<S3DJobSettings> {\r\n        const newJobSettings = new S3DJobSettings();\r\n        const inputsJson = settingsJson[\"inputs\"];\r\n        for (const input of inputsJson) {\r\n            if (input[\"name\"] === \"pointClouds\")\r\n                newJobSettings.inputs.pointClouds = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"meshes\")\r\n                newJobSettings.inputs.meshes = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"pointCloudSegmentationDetector\")\r\n                newJobSettings.inputs.pointCloudSegmentationDetector = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"segmentation3D\")\r\n                newJobSettings.inputs.segmentation3D = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"orientedPhotos\")\r\n                newJobSettings.inputs.orientedPhotos = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"photoObjectDetector\")\r\n                newJobSettings.inputs.photoObjectDetector = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"objects2D\")\r\n                newJobSettings.inputs.objects2D = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"clipPolygon\")\r\n                newJobSettings.inputs.clipPolygon = input[\"realityDataId\"];\r\n            else\r\n                return Promise.reject(new BentleyError(BentleyStatus.ERROR, \"Found unexpected input name : \" + input[\"name\"]));\r\n        }\r\n        const outputsJson = settingsJson[\"outputs\"];\r\n        for (const output of outputsJson) {\r\n            if (output[\"name\"] === \"segmentation3D\")\r\n                newJobSettings.outputs.segmentation3D = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"segmentedPointCloud\")\r\n                newJobSettings.outputs.segmentedPointCloud = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"objects2D\")\r\n                newJobSettings.outputs.objects2D = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedSegmentation3DPOD\")\r\n                newJobSettings.outputs.exportedSegmentation3DPOD = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedSegmentation3DLAS\")\r\n                newJobSettings.outputs.exportedSegmentation3DLAS = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedSegmentation3DLAZ\")\r\n                newJobSettings.outputs.exportedSegmentation3DLAZ = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedSegmentation3DPLY\")\r\n                newJobSettings.outputs.exportedSegmentation3DPLY = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"objects3D\")\r\n                newJobSettings.outputs.objects3D = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedObjects3DDGN\")\r\n                newJobSettings.outputs.exportedObjects3DDGN = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedObjects3DCesium\")\r\n                newJobSettings.outputs.exportedObjects3DCesium = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedLocations3DSHP\")\r\n                newJobSettings.outputs.exportedLocations3DSHP = output[\"realityDataId\"];\r\n            else\r\n                return Promise.reject(new BentleyError(BentleyStatus.ERROR, \"Found unexpected output name : \" + output[\"name\"]));\r\n        }\r\n        if (\"saveConfidence\" in settingsJson)\r\n            newJobSettings.saveConfidence = JSON.parse(settingsJson[\"saveConfidence\"]);\r\n        \r\n        if (\"exportSrs\" in settingsJson)\r\n            newJobSettings.exportSrs = settingsJson[\"exportSrs\"];\r\n\r\n        return newJobSettings;\r\n    }\r\n}\r\n\r\n/**\r\n * Possible inputs for a Line Detection 3D job.\r\n */\r\nclass L3DInputs {\r\n    /** Collection of point clouds. */\r\n    pointClouds: string;\r\n    /** Collection of meshes. */\r\n    meshes: string;\r\n    /** Point cloud segmentation detector. */\r\n    pointCloudSegmentationDetector: string;\r\n    /** Given 3D segmentation. */\r\n    segmentation3D: string;\r\n    /** Photos and their orientation. */\r\n    orientedPhotos: string;\r\n    /** Segmentation detector to apply to oriented photos. */\r\n    photoSegmentationDetector: string;\r\n    /** Given 2D segmentation. */\r\n    segmentation2D: string;\r\n    /** Path of clipping polygon to apply. */\r\n    clipPolygon: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * Collection of point clouds.\r\n         * @type {string}\r\n         */\r\n        this.pointClouds = \"\";\r\n        /**\r\n         * Collection of meshes.\r\n         * @type {string}\r\n         */\r\n        this.meshes = \"\";\r\n        /**\r\n         * Point cloud segmentation detector.\r\n         * @type {string}\r\n         */\r\n        this.pointCloudSegmentationDetector = \"\";\r\n        /**\r\n         * Given 3D segmentation.\r\n         * @type {string}\r\n         */\r\n        this.segmentation3D = \"\";\r\n        /**\r\n         * Photos and their orientation.\r\n         * @type {string}\r\n         */\r\n        this.orientedPhotos = \"\";\r\n        /**\r\n         * Segmentation detector to apply to oriented photos.\r\n         * @type {string}\r\n         */\r\n        this.photoSegmentationDetector = \"\";\r\n        /**\r\n         * Given 2D segmentation.\r\n         * @type {string}\r\n         */\r\n        this.segmentation2D = \"\";\r\n        /** \r\n         * Path of clipping polygon to apply.\r\n         * @type {string}\r\n         */\r\n        this.clipPolygon = \"\";\r\n    }\r\n}\r\n\r\n/**\r\n * Possible outputs for a Line Detection 3D job.\r\n */\r\nclass L3DOutputs {\r\n    /** 3D segmentation performed by current job. */\r\n    segmentation3D: string;\r\n    /** 3D segmentation as an OPC file. */\r\n    segmentedPointCloud: string;\r\n    /** 2D segmentation performed by current job. */\r\n    segmentation2D: string;\r\n    /** Detected 3D lines. */\r\n    lines3D: string;\r\n    /** DGN file export with 3D lines. */\r\n    exportedLines3DDGN: string;\r\n    /** Cesium 3D Tiles file export with 3D lines. */\r\n    exportedLines3DCesium: string;\r\n    /** ContextScene pointing to segmented photos. */\r\n    segmentedPhotos: string;\r\n    /** Detected patches. */\r\n    patches3D: string;\r\n    /** DGN file export with patches. */\r\n    exportedPatches3DDGN: string;\r\n    /** Cesium 3D Tiles file export with 3D patches. */\r\n    exportedPatches3DCesium: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * 3D segmentation performed by current job.\r\n         * @type {string}\r\n         */\r\n        this.segmentation3D = \"\";\r\n        /**\r\n         * 3D segmentation as an OPC file.\r\n         * @type {string}\r\n         */\r\n        this.segmentedPointCloud = \"\";\r\n        /**\r\n         * 2D segmentation performed by current job.\r\n         * @type {string}\r\n         */\r\n        this.segmentation2D = \"\";\r\n        /**\r\n         * ContextScene pointing to segmented photos.\r\n         * @type {string}\r\n         */\r\n        this.segmentedPhotos = \"\";\r\n        /**\r\n         * Detected 3D lines.\r\n         * @type {string}\r\n         */\r\n        this.lines3D = \"\";\r\n        /**\r\n         * DGN file export with 3D lines.\r\n         * @type {string}\r\n         */\r\n        this.exportedLines3DDGN = \"\";\r\n        /**\r\n         * Cesium 3D Tiles file export with 3D lines.\r\n         * @type {string}\r\n         */\r\n        this.exportedLines3DCesium = \"\";\r\n        /** \r\n         * Detected patches.\r\n         * @type {string}\r\n         */\r\n        this.patches3D = \"\";\r\n        /** \r\n         * DGN file export with patches.\r\n         * @type {string}\r\n         */\r\n        this.exportedPatches3DDGN = \"\";\r\n        /** \r\n         * Cesium 3D Tiles file export with 3D patches.\r\n         * @type {string}\r\n         */\r\n        this.exportedPatches3DCesium = \"\";\r\n    }\r\n}\r\n\r\n/**\r\n * Settings for Line Detection 3D jobs.\r\n */\r\nexport class L3DJobSettings {\r\n    /** Type of job settings. */\r\n    type: RDAJobType;\r\n    /** Possible inputs for this job settings. */\r\n    inputs: L3DInputs;\r\n    /** \r\n     * Possible outputs for this job. \r\n     * Fill the outputs you want for the job with a string (normally the name of the output) before passing it to createJob. \r\n     */\r\n    outputs: L3DOutputs;\r\n    /** Estimation 3D line width at each vertex. */\r\n    computeLineWidth: boolean;\r\n    /** Remove 3D lines with total length smaller than this value. */\r\n    removeSmallComponents: number;\r\n    /** SRS used by exports. */\r\n    exportSrs: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * Type of job settings.\r\n         * @type {RDAJobType}\r\n         */\r\n        this.type = RDAJobType.L3D;\r\n        /**\r\n         * Possible inputs for this job settings.\r\n         * @type {L3DInputs}\r\n         */\r\n        this.inputs = new L3DInputs();\r\n        /**\r\n         * Possible outputs for this job. \r\n         * Fill the outputs you want for the job with a string (normally the name of the output) before passing it to createJob. \r\n         * @type {L3DOutputs}\r\n         */\r\n        this.outputs = new L3DOutputs();\r\n        /**\r\n         * Estimation 3D line width at each vertex.\r\n         * @type {boolean}\r\n         */\r\n        this.computeLineWidth = false;\r\n        /**\r\n         * Remove 3D lines with total length smaller than this value.\r\n         * @type {number}\r\n         */\r\n        this.removeSmallComponents = 0;\r\n        /**\r\n         * SRS used by exports.\r\n         * @type {string}\r\n         */\r\n        this.exportSrs = \"\";\r\n    }\r\n\r\n    /**\r\n     * Transform settings into json.\r\n     * @returns {any} json with settings values.\r\n     */\r\n    public toJson(): any {\r\n        const json: any = {};\r\n        json[\"inputs\"] = [];\r\n        if (this.inputs.pointClouds)\r\n            json[\"inputs\"].push({ \"name\": \"pointClouds\", \"realityDataId\": this.inputs.pointClouds });\r\n\r\n        if (this.inputs.meshes)\r\n            json[\"inputs\"].push({ \"name\": \"meshes\", \"realityDataId\": this.inputs.meshes });\r\n\r\n        if (this.inputs.pointCloudSegmentationDetector)\r\n            json[\"inputs\"].push({ \"name\": \"pointCloudSegmentationDetector\", \"realityDataId\": this.inputs.pointCloudSegmentationDetector });\r\n\r\n        if (this.inputs.segmentation3D)\r\n            json[\"inputs\"].push({ \"name\": \"segmentation3D\", \"realityDataId\": this.inputs.segmentation3D });\r\n\r\n        if (this.inputs.orientedPhotos)\r\n            json[\"inputs\"].push({ \"name\": \"orientedPhotos\", \"realityDataId\": this.inputs.orientedPhotos });\r\n\r\n        if (this.inputs.photoSegmentationDetector)\r\n            json[\"inputs\"].push({ \"name\": \"photoSegmentationDetector\", \"realityDataId\": this.inputs.photoSegmentationDetector });\r\n\r\n        if (this.inputs.segmentation2D)\r\n            json[\"inputs\"].push({ \"name\": \"segmentation2D\", \"realityDataId\": this.inputs.segmentation2D });\r\n\r\n        if (this.inputs.clipPolygon)\r\n            json[\"inputs\"].push({ \"name\": \"clipPolygon\", \"realityDataId\": this.inputs.clipPolygon });\r\n\r\n        json[\"outputs\"] = [];\r\n        if (this.outputs.segmentation3D)\r\n            json[\"outputs\"].push(\"segmentation3D\");\r\n\r\n        if (this.outputs.segmentedPointCloud)\r\n            json[\"outputs\"].push(\"segmentedPointCloud\");\r\n\r\n        if (this.outputs.segmentation2D)\r\n            json[\"outputs\"].push(\"segmentation2D\");\r\n\r\n        if(this.outputs.segmentedPhotos)\r\n            json[\"outputs\"].push(\"segmentedPhotos\");\r\n\r\n        if (this.outputs.lines3D)\r\n            json[\"outputs\"].push(\"lines3D\");\r\n\r\n        if (this.outputs.exportedLines3DDGN)\r\n            json[\"outputs\"].push(\"exportedLines3DDGN\");\r\n\r\n        if (this.outputs.exportedLines3DCesium)\r\n            json[\"outputs\"].push(\"exportedLines3DCesium\");\r\n\r\n        if (this.outputs.patches3D)\r\n            json[\"outputs\"].push(\"patches3D\");\r\n\r\n        if (this.outputs.exportedPatches3DDGN)\r\n            json[\"outputs\"].push(\"exportedPatches3DDGN\");\r\n\r\n        if (this.outputs.exportedPatches3DCesium)\r\n            json[\"outputs\"].push(\"exportedPatches3DCesium\");\r\n\r\n        if (this.computeLineWidth)\r\n            json[\"computeLineWidth\"] = \"true\";\r\n\r\n        if (this.removeSmallComponents)\r\n            json[\"removeSmallComponents\"] = this.removeSmallComponents.toString();\r\n        \r\n        if (this.exportSrs)\r\n            json[\"exportSrs\"] = this.exportSrs;\r\n        \r\n        return json;\r\n    }\r\n\r\n    /**\r\n     * Transform json received from cloud service into settings.\r\n     * @param {any} settingsJson Dictionary with settings received from cloud service.\r\n     * @returns {L3DJobSettings} New settings.\r\n     */\r\n    public static async fromJson(settingsJson: any): Promise<L3DJobSettings> {\r\n        const newJobSettings = new L3DJobSettings();\r\n        const inputsJson = settingsJson[\"inputs\"];\r\n        for (const input of inputsJson) {\r\n            if (input[\"name\"] === \"pointClouds\")\r\n                newJobSettings.inputs.pointClouds = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"meshes\")\r\n                newJobSettings.inputs.meshes = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"pointCloudSegmentationDetector\")\r\n                newJobSettings.inputs.pointCloudSegmentationDetector = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"segmentation3D\")\r\n                newJobSettings.inputs.segmentation3D = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"orientedPhotos\")\r\n                newJobSettings.inputs.orientedPhotos = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"photoSegmentationDetector\")\r\n                newJobSettings.inputs.photoSegmentationDetector = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"segmentation2D\")\r\n                newJobSettings.inputs.segmentation2D = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"clipPolygon\")\r\n                newJobSettings.inputs.clipPolygon = input[\"realityDataId\"];\r\n            else\r\n                return Promise.reject(new BentleyError(BentleyStatus.ERROR, \"Found unexpected input name : \" + input[\"name\"]));\r\n        }\r\n        const outputsJson = settingsJson[\"outputs\"];\r\n        for (const output of outputsJson) {\r\n            if (output[\"name\"] === \"segmentation3D\")\r\n                newJobSettings.outputs.segmentation3D = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"segmentedPointCloud\")\r\n                newJobSettings.outputs.segmentedPointCloud = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"segmentation2D\")\r\n                newJobSettings.outputs.segmentation2D = output[\"realityDataId\"];\r\n            else if(output[\"name\"] === \"segmentedPhotos\")\r\n                newJobSettings.outputs.segmentedPhotos = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"lines3D\")\r\n                newJobSettings.outputs.lines3D = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedLines3DDGN\")\r\n                newJobSettings.outputs.exportedLines3DDGN = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedLines3DCesium\")\r\n                newJobSettings.outputs.exportedLines3DCesium = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"patches3D\")\r\n                newJobSettings.outputs.patches3D = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedPatches3DCesium\")\r\n                newJobSettings.outputs.exportedPatches3DCesium = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedPatches3DDGN\")\r\n                newJobSettings.outputs.exportedPatches3DDGN = output[\"realityDataId\"];\r\n            else\r\n                return Promise.reject(new BentleyError(BentleyStatus.ERROR, \"Found unexpected output name : \" + output[\"name\"]));\r\n        }\r\n        if (\"computeLineWidth\" in settingsJson)\r\n            newJobSettings.computeLineWidth = JSON.parse(settingsJson[\"computeLineWidth\"]);\r\n\r\n        if (\"removeSmallComponents\" in settingsJson)\r\n            newJobSettings.removeSmallComponents = JSON.parse(settingsJson[\"removeSmallComponents\"]);\r\n\r\n        if (\"exportSrs\" in settingsJson)\r\n            newJobSettings.exportSrs = settingsJson[\"exportSrs\"];\r\n\r\n        return newJobSettings;\r\n    }\r\n}\r\n\r\n/**\r\n * Possible inputs for an Extract Ground job.\r\n */\r\nclass ExtractGroundInputs {\r\n    /** Collection of point clouds. */\r\n    pointClouds: string;\r\n    /** Collection of meshes. */\r\n    meshes: string;\r\n    /** Point cloud segmentation detector. */\r\n    pointCloudSegmentationDetector: string;\r\n    /** Path of clipping polygon to apply. */\r\n    clipPolygon: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * Collection of point clouds.\r\n         * @type {string}\r\n         */\r\n        this.pointClouds = \"\";\r\n        /**\r\n         * Collection of meshes.\r\n         * @type {string}\r\n         */\r\n        this.meshes = \"\";\r\n        /**\r\n         * Point cloud segmentation detector.\r\n         * @type {string}\r\n         */\r\n        this.pointCloudSegmentationDetector = \"\";\r\n        /**\r\n         * Path of clipping polygon to apply.\r\n         * @type {string}\r\n         */\r\n        this.clipPolygon = \"\";\r\n    }\r\n}\r\n\r\n/**\r\n * Possible outputs for an Extract Ground Detection job.\r\n */\r\nclass ExtractGroundOutputs {\r\n    /** Ground segmentation computed by current job. */\r\n    segmentation3D: string;\r\n    /** 3D ground segmentation as an OPC file. */\r\n    segmentedPointCloud: string;\r\n    /** 3D ground segmentation exported as a POD file. */\r\n    exportedSegmentation3DPOD: string;\r\n    /** 3D ground segmentation exported as a LAS file. */\r\n    exportedSegmentation3DLAS: string;\r\n    /** 3D ground segmentation exported as a LAZ file. */\r\n    exportedSegmentation3DLAZ: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * Ground segmentation computed by current job.\r\n         * @type {string}\r\n         */\r\n        this.segmentation3D = \"\";\r\n        /**\r\n         * 3D ground segmentation as an OPC file.\r\n         * @type {string}\r\n         */\r\n        this.segmentedPointCloud = \"\";\r\n        /**\r\n         * 3D ground segmentation exported as a POD file.\r\n         * @type {string}\r\n         */\r\n        this.exportedSegmentation3DPOD = \"\";\r\n        /**\r\n         * 3D ground segmentation exported as a LAS file.\r\n         * @type {string}\r\n         */\r\n        this.exportedSegmentation3DLAS = \"\";\r\n        /**\r\n         * 3D ground segmentation exported as a LAZ file.\r\n         * @type {string}\r\n         */\r\n        this.exportedSegmentation3DLAZ = \"\";\r\n    }\r\n}\r\n\r\n/**\r\n * Settings for Extract ground jobs.\r\n */\r\nexport class ExtractGroundJobSettings {\r\n    /** Type of job settings. */\r\n    type: RDAJobType;\r\n    /** Possible inputs for this job settings. */\r\n    inputs: ExtractGroundInputs;\r\n    /** \r\n     * Possible outputs for this job. \r\n     * Fill the outputs you want for the job with a string (normally the name of the output) before passing it to createJob. \r\n     */\r\n    outputs: ExtractGroundOutputs;\r\n    /** SRS used by exports. */\r\n    exportSrs: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * Type of job settings.\r\n         * @type {RDAJobType}\r\n         */\r\n        this.type = RDAJobType.ExtractGround;\r\n        /**\r\n         * Possible inputs for this job settings.\r\n         * @type {ExtractGroundInputs}\r\n         */\r\n        this.inputs = new ExtractGroundInputs();\r\n        /**\r\n         * Possible outputs for this job. \r\n         * Fill the outputs you want for the job with a string (normally the name of the output) before passing it to createJob. \r\n         * @type {ExtractGroundOutputs}\r\n         */\r\n        this.outputs = new ExtractGroundOutputs();\r\n        /**\r\n         * SRS used by exports.\r\n         * @type {string}\r\n         */\r\n        this.exportSrs = \"\";\r\n    }\r\n\r\n    /**\r\n     * Transform settings into json.\r\n     * @returns {any} json with settings values.\r\n     */\r\n    public toJson(): any {\r\n        const json: any = {};\r\n        json[\"inputs\"] = [];\r\n        if (this.inputs.pointClouds)\r\n            json[\"inputs\"].push({ \"name\": \"pointClouds\", \"realityDataId\": this.inputs.pointClouds });\r\n\r\n        if (this.inputs.meshes)\r\n            json[\"inputs\"].push({ \"name\": \"meshes\", \"realityDataId\": this.inputs.meshes });\r\n\r\n        if (this.inputs.pointCloudSegmentationDetector)\r\n            json[\"inputs\"].push({ \"name\": \"pointCloudSegmentationDetector\", \"realityDataId\": this.inputs.pointCloudSegmentationDetector });\r\n\r\n        if (this.inputs.clipPolygon)\r\n            json[\"inputs\"].push({ \"name\": \"clipPolygon\", \"realityDataId\": this.inputs.clipPolygon });\r\n\r\n        json[\"outputs\"] = [];\r\n        if (this.outputs.segmentation3D)\r\n            json[\"outputs\"].push(\"segmentation3D\");\r\n\r\n        if (this.outputs.segmentedPointCloud)\r\n            json[\"outputs\"].push(\"segmentedPointCloud\");\r\n\r\n        if (this.outputs.exportedSegmentation3DPOD)\r\n            json[\"outputs\"].push(\"exportedSegmentation3DPOD\");\r\n\r\n        if (this.outputs.exportedSegmentation3DLAS)\r\n            json[\"outputs\"].push(\"exportedSegmentation3DLAS\");\r\n\r\n        if (this.outputs.exportedSegmentation3DLAZ)\r\n            json[\"outputs\"].push(\"exportedSegmentation3DLAZ\");\r\n\r\n        if (this.exportSrs)\r\n            json[\"exportSrs\"] = this.exportSrs;\r\n        \r\n        return json;\r\n    }\r\n\r\n    /**\r\n     * Transform json received from cloud service into settings.\r\n     * @param {any} settingsJson Dictionary with settings received from cloud service.\r\n     * @returns {ExtractGroundJobSettings} New settings.\r\n     */\r\n    public static async fromJson(settingsJson: any): Promise<ExtractGroundJobSettings> {\r\n        const newJobSettings = new ExtractGroundJobSettings();\r\n        const inputsJson = settingsJson[\"inputs\"];\r\n        for (const input of inputsJson) {\r\n            if (input[\"name\"] === \"pointClouds\")\r\n                newJobSettings.inputs.pointClouds = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"meshes\")\r\n                newJobSettings.inputs.meshes = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"pointCloudSegmentationDetector\")\r\n                newJobSettings.inputs.pointCloudSegmentationDetector = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"clipPolygon\")\r\n                newJobSettings.inputs.clipPolygon = input[\"realityDataId\"];\r\n            else\r\n                return Promise.reject(new BentleyError(BentleyStatus.ERROR, \"Found unexpected input name : \" + input[\"name\"]));\r\n        }\r\n        const outputsJson = settingsJson[\"outputs\"];\r\n        for (const output of outputsJson) {\r\n            if (output[\"name\"] === \"segmentation3D\")\r\n                newJobSettings.outputs.segmentation3D = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"segmentedPointCloud\")\r\n                newJobSettings.outputs.segmentedPointCloud = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedSegmentation3DPOD\")\r\n                newJobSettings.outputs.exportedSegmentation3DPOD = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedSegmentation3DLAZ\")\r\n                newJobSettings.outputs.exportedSegmentation3DLAZ = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedSegmentation3DLAS\")\r\n                newJobSettings.outputs.exportedSegmentation3DLAS = output[\"realityDataId\"];\r\n            else\r\n                return Promise.reject(new BentleyError(BentleyStatus.ERROR, \"Found unexpected output name : \" + output[\"name\"]));\r\n        }\r\n        \r\n        if (\"exportSrs\" in settingsJson)\r\n            newJobSettings.exportSrs = settingsJson[\"exportSrs\"];\r\n        \r\n        return newJobSettings;\r\n    }\r\n}\r\n\r\n/**\r\n * Possible inputs for a  Change Detection job.\r\n */\r\nclass ChangeDetectionInputs {\r\n    /** First collection of point clouds. */\r\n    pointClouds1: string;\r\n    /** Second collection of point clouds. */\r\n    pointClouds2: string;\r\n    /** First collection of meshes. */\r\n    meshes1: string;\r\n    /** Second collection of meshes. */\r\n    meshes2: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * First collection of point clouds.\r\n         * @type {string}\r\n         */\r\n        this.pointClouds1 = \"\";\r\n        /**\r\n         * Second collection of point clouds.\r\n         * @type {string}\r\n         */\r\n        this.pointClouds2 = \"\";\r\n        /**\r\n         * First collection of meshes.\r\n         * @type {string}\r\n         */\r\n        this.meshes1 = \"\";\r\n        /**\r\n         * Second collection of meshes.\r\n         * @type {string}\r\n         */\r\n        this.meshes2 = \"\";\r\n    }\r\n}\r\n\r\n/**\r\n * Possible outputs for a  Change Detection job.\r\n */\r\nclass ChangeDetectionOutputs {\r\n    /** Regions with changes. */\r\n    objects3D: string;\r\n    /** ESRI SHP file export with locations of regions with changes. */\r\n    exportedLocations3DSHP: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * Regions with changes.\r\n         * @type {string}\r\n         */\r\n        this.objects3D = \"\";\r\n        /**\r\n         * ESRI SHP file export with locations of regions with changes.\r\n         * @type {string}\r\n         */\r\n        this.exportedLocations3DSHP = \"\";\r\n    }\r\n}\r\n\r\n/**\r\n * Settings for Change Detection jobs.\r\n */\r\nexport class ChangeDetectionJobSettings {\r\n    /** Type of job settings. */\r\n    type: RDAJobType;\r\n    /** Possible inputs for this job settings. */\r\n    inputs: ChangeDetectionInputs;\r\n    /** \r\n     * Possible outputs for this job. \r\n     * Fill the outputs you want for the job with a string (normally the name of the output) before passing it to createJob. \r\n     */\r\n    outputs: ChangeDetectionOutputs;\r\n    /** Low threshold to detect color changes (hysteresis detection). */\r\n    colorThresholdLow: number;\r\n    /** High threshold to detect color changes (hysteresis detection). */\r\n    colorThresholdHigh: number;\r\n    /** Low threshold to detect spatial changes (hysteresis detection). */\r\n    distThresholdLow: number;\r\n    /** High threshold to detect spatial changes (hysteresis detection). */\r\n    distThresholdHigh: number;\r\n    /** Target point cloud resolution when starting from meshes. */\r\n    resolution: number;\r\n    /** Minimum number of points in a region to be considered as a change. */\r\n    minPoints: number;\r\n    /** SRS used by exports. */\r\n    exportSrs: string;\r\n\r\n    constructor() {\r\n        /**\r\n         * Type of job settings.\r\n         * @type {RDAJobType}\r\n         */\r\n        this.type = RDAJobType.ChangeDetection;\r\n        /**\r\n         * Possible inputs for this job settings.\r\n         * @type {ChangeDetectionInputs}\r\n         */\r\n        this.inputs = new ChangeDetectionInputs();\r\n        /**\r\n         * Possible outputs for this job. \r\n         * Fill the outputs you want for the job with a string (normally the name of the output) before passing it to createJob. \r\n         * @type {ChangeDetectionOutputs}\r\n         */\r\n        this.outputs = new ChangeDetectionOutputs();\r\n        /**\r\n         * Low threshold to detect color changes (hysteresis detection).\r\n         * @type {number}\r\n         */\r\n        this.colorThresholdLow = 0.;\r\n        /**\r\n         * High threshold to detect color changes (hysteresis detection).\r\n         * @type {number}\r\n         */\r\n        this.colorThresholdHigh = 0.;\r\n        /**\r\n         * Low threshold to detect spatial changes (hysteresis detection).\r\n         * @type {number}\r\n         */\r\n        this.distThresholdLow = 0.;\r\n        /**\r\n         * High threshold to detect spatial changes (hysteresis detection).\r\n         * @type {number}\r\n         */\r\n        this.distThresholdHigh = 0.;\r\n        /**\r\n         * Target point cloud resolution when starting from meshes.\r\n         * @type {number}\r\n         */\r\n        this.resolution = 0.;\r\n        /**\r\n         * Minimum number of points in a region to be considered as a change.\r\n         * @type {number}\r\n         */\r\n        this.minPoints = 0;\r\n        /**\r\n         * SRS used by exports.\r\n         * @type {string}\r\n         */\r\n        this.exportSrs = \"\";\r\n    }\r\n\r\n    /**\r\n     * Transform settings into json.\r\n     * @returns {any} json with settings values.\r\n     */\r\n    public toJson(): any {\r\n        const json: any = {};\r\n        json[\"inputs\"] = [];\r\n        if (this.inputs.pointClouds1)\r\n            json[\"inputs\"].push({ \"name\": \"pointClouds1\", \"realityDataId\": this.inputs.pointClouds1 });\r\n\r\n        if (this.inputs.pointClouds2)\r\n            json[\"inputs\"].push({ \"name\": \"pointClouds2\", \"realityDataId\": this.inputs.pointClouds2 });\r\n\r\n        if (this.inputs.meshes1)\r\n            json[\"inputs\"].push({ \"name\": \"meshes1\", \"realityDataId\": this.inputs.meshes1 });\r\n\r\n        if (this.inputs.meshes2)\r\n            json[\"inputs\"].push({ \"name\": \"meshes2\", \"realityDataId\": this.inputs.meshes2 });\r\n\r\n        json[\"outputs\"] = [];\r\n        if (this.outputs.objects3D)\r\n            json[\"outputs\"].push(\"objects3D\");\r\n\r\n        if (this.outputs.exportedLocations3DSHP)\r\n            json[\"outputs\"].push(\"exportedLocations3DSHP\");\r\n\r\n        if (this.colorThresholdLow)\r\n            json[\"colorThresholdLow\"] = this.colorThresholdLow.toString();\r\n\r\n        if (this.colorThresholdHigh)\r\n            json[\"colorThresholdHigh\"] = this.colorThresholdHigh.toString();\r\n\r\n        if (this.distThresholdLow)\r\n            json[\"distThresholdLow\"] = this.distThresholdLow.toString();\r\n\r\n        if (this.distThresholdHigh)\r\n            json[\"distThresholdHigh\"] = this.distThresholdHigh.toString();\r\n\r\n        if (this.resolution)\r\n            json[\"resolution\"] = this.resolution.toString();\r\n\r\n        if (this.minPoints)\r\n            json[\"minPoints\"] = this.minPoints.toString();\r\n\r\n        if (this.exportSrs)\r\n            json[\"exportSrs\"] = this.exportSrs;\r\n        \r\n        return json;\r\n    }\r\n\r\n    /**\r\n     * Transform json received from cloud service into settings.\r\n     * @param {any} settingsJson Dictionary with settings received from cloud service.\r\n     * @returns {ChangeDetectionJobSettings} New settings.\r\n     */\r\n    public static async fromJson(settingsJson: any): Promise<ChangeDetectionJobSettings> {\r\n        const newJobSettings = new ChangeDetectionJobSettings();\r\n        const inputsJson = settingsJson[\"inputs\"];\r\n        for (const input of inputsJson) {\r\n            if (input[\"name\"] === \"pointClouds1\")\r\n                newJobSettings.inputs.pointClouds1 = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"pointClouds2\")\r\n                newJobSettings.inputs.pointClouds2 = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"meshes1\")\r\n                newJobSettings.inputs.meshes1 = input[\"realityDataId\"];\r\n            else if (input[\"name\"] === \"meshes2\")\r\n                newJobSettings.inputs.meshes2 = input[\"realityDataId\"];\r\n            else\r\n                return Promise.reject(new BentleyError(BentleyStatus.ERROR, \"Found unexpected input name : \" + input[\"name\"]));\r\n        }\r\n        const outputsJson = settingsJson[\"outputs\"];\r\n        for (const output of outputsJson) {\r\n            if (output[\"name\"] === \"objects3D\")\r\n                newJobSettings.outputs.objects3D = output[\"realityDataId\"];\r\n            else if (output[\"name\"] === \"exportedLocations3DSHP\")\r\n                newJobSettings.outputs.exportedLocations3DSHP = output[\"realityDataId\"];\r\n            else\r\n                return Promise.reject(new BentleyError(BentleyStatus.ERROR, \"Found unexpected output name : \" + output[\"name\"]));\r\n        }\r\n        if (\"colorThresholdLow\" in settingsJson)\r\n            newJobSettings.colorThresholdLow = JSON.parse(settingsJson[\"colorThresholdLow\"]);\r\n        if (\"colorThresholdHigh\" in settingsJson)\r\n            newJobSettings.colorThresholdHigh = JSON.parse(settingsJson[\"colorThresholdHigh\"]);\r\n        if (\"distThresholdLow\" in settingsJson)\r\n            newJobSettings.distThresholdLow = JSON.parse(settingsJson[\"distThresholdLow\"]);\r\n        if (\"distThresholdHigh\" in settingsJson)\r\n            newJobSettings.distThresholdHigh = JSON.parse(settingsJson[\"distThresholdHigh\"]);\r\n        if (\"resolution\" in settingsJson)\r\n            newJobSettings.resolution = JSON.parse(settingsJson[\"resolution\"]);\r\n        if (\"minPoints\" in settingsJson)\r\n            newJobSettings.minPoints = JSON.parse(settingsJson[\"minPoints\"]);\r\n        if (\"exportSrs\" in settingsJson)\r\n            newJobSettings.exportSrs = settingsJson[\"exportSrs\"];\r\n        \r\n        return newJobSettings;\r\n    }\r\n}\r\n\r\nexport type JobSettings = O2DJobSettings | S2DJobSettings | O3DJobSettings | S3DJobSettings | L3DJobSettings | \r\n    ChangeDetectionJobSettings | ExtractGroundJobSettings;\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b83bb7ff7289bcbcd2f63b33a1d21eaa8a263635","contentHash":"d3f4f21879393dd03bdfb7a90763ce6a75b88b525e18cb7578905a870f8fe6eb"},"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\rdas\\Utils.js":{"path":"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\rdas\\Utils.js","statementMap":{"0":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../../src/rdas/Utils.ts"],"names":[],"mappings":";AAAA;;;+FAG+F","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { JobDates, JobState } from \"../CommonData\";\r\nimport { JobSettings, RDAJobType } from \"./Settings\";\r\n\r\n/**\r\n * Parameters for estimating job cost before its processing.\r\n */\r\nexport interface RDACostParameters {\r\n    /** Number of giga pixels in inputs. */\r\n    gigaPixels?: number;\r\n    /** Number of photos in inputs. */\r\n    numberOfPhotos?: number;\r\n    /** Width of the scene. */\r\n    sceneWidth?: number;\r\n    /** Height of the scene. */\r\n    sceneHeight?: number;\r\n    /** Length of the scene. */\r\n    sceneLength?: number;\r\n    /** Scale of the detector. */\r\n    detectorScale?: number;\r\n    /** Cost of the detector. */\r\n    detectorCost?: number;\r\n    /** Estimated cost of the detector. */\r\n    estimatedCost?: number;\r\n}\r\n\r\n/**\r\n * Properties of a job.\r\n * Convenience interface to stock all properties of a job in a simple way.\r\n */\r\nexport interface RDAJobProperties {\r\n    name: string;\r\n    type: RDAJobType;\r\n    settings: JobSettings;\r\n    iTwinId: string;\r\n    id: string;\r\n    dataCenter?: string;\r\n    email?: string;\r\n    state?: JobState;\r\n    dates?: JobDates;\r\n    exitCode?: string;\r\n    executionCost?: number;\r\n    costEstimation?: RDACostParameters;\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1325d9eac42831178d3d314fc658033a45a7fd74","contentHash":"5b3dc0884697772fa7b3c90c18249e1890e83939b4f6cd21221db7433df0bfa7"},"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\utils\\RealityDataTransferBrowser.js":{"path":"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\utils\\RealityDataTransferBrowser.js","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":74}},"2":{"start":{"line":4,"column":23},"end":{"line":4,"column":53}},"3":{"start":{"line":5,"column":30},"end":{"line":5,"column":67}},"4":{"start":{"line":6,"column":21},"end":{"line":6,"column":45}},"5":{"start":{"line":8,"column":17},"end":{"line":8,"column":34}},"6":{"start":{"line":9,"column":19},"end":{"line":9,"column":68}},"7":{"start":{"line":10,"column":28},"end":{"line":10,"column":68}},"8":{"start":{"line":11,"column":4},"end":{"line":33,"column":5}},"9":{"start":{"line":11,"column":17},"end":{"line":11,"column":18}},"10":{"start":{"line":12,"column":30},"end":{"line":12,"column":77}},"11":{"start":{"line":13,"column":8},"end":{"line":14,"column":121}},"12":{"start":{"line":14,"column":12},"end":{"line":14,"column":121}},"13":{"start":{"line":15,"column":26},"end":{"line":15,"column":54}},"14":{"start":{"line":16,"column":8},"end":{"line":17,"column":129}},"15":{"start":{"line":17,"column":12},"end":{"line":17,"column":129}},"16":{"start":{"line":18,"column":8},"end":{"line":32,"column":9}},"17":{"start":{"line":19,"column":28},"end":{"line":19,"column":73}},"18":{"start":{"line":20,"column":12},"end":{"line":21,"column":88}},"19":{"start":{"line":21,"column":16},"end":{"line":21,"column":88}},"20":{"start":{"line":22,"column":12},"end":{"line":22,"column":60}},"21":{"start":{"line":25,"column":12},"end":{"line":26,"column":129}},"22":{"start":{"line":26,"column":16},"end":{"line":26,"column":129}},"23":{"start":{"line":27,"column":28},"end":{"line":27,"column":50}},"24":{"start":{"line":28,"column":30},"end":{"line":28,"column":73}},"25":{"start":{"line":29,"column":12},"end":{"line":30,"column":137}},"26":{"start":{"line":30,"column":16},"end":{"line":30,"column":137}},"27":{"start":{"line":31,"column":12},"end":{"line":31,"column":53}},"28":{"start":{"line":34,"column":22},"end":{"line":34,"column":67}},"29":{"start":{"line":35,"column":4},"end":{"line":35,"column":54}},"30":{"start":{"line":38,"column":17},"end":{"line":38,"column":34}},"31":{"start":{"line":39,"column":17},"end":{"line":39,"column":33}},"32":{"start":{"line":40,"column":4},"end":{"line":59,"column":5}},"33":{"start":{"line":41,"column":28},"end":{"line":41,"column":61}},"34":{"start":{"line":42,"column":8},"end":{"line":42,"column":59}},"35":{"start":{"line":43,"column":8},"end":{"line":58,"column":9}},"36":{"start":{"line":44,"column":28},"end":{"line":44,"column":77}},"37":{"start":{"line":45,"column":12},"end":{"line":46,"column":110}},"38":{"start":{"line":46,"column":16},"end":{"line":46,"column":110}},"39":{"start":{"line":47,"column":12},"end":{"line":47,"column":65}},"40":{"start":{"line":50,"column":12},"end":{"line":51,"column":133}},"41":{"start":{"line":51,"column":16},"end":{"line":51,"column":133}},"42":{"start":{"line":52,"column":23},"end":{"line":52,"column":49}},"43":{"start":{"line":53,"column":30},"end":{"line":53,"column":68}},"44":{"start":{"line":54,"column":12},"end":{"line":54,"column":63}},"45":{"start":{"line":55,"column":12},"end":{"line":56,"column":92}},"46":{"start":{"line":56,"column":16},"end":{"line":56,"column":92}},"47":{"start":{"line":57,"column":12},"end":{"line":57,"column":58}},"48":{"start":{"line":60,"column":4},"end":{"line":60,"column":65}},"49":{"start":{"line":63,"column":4},"end":{"line":66,"column":62}},"50":{"start":{"line":64,"column":8},"end":{"line":64,"column":63}},"51":{"start":{"line":66,"column":8},"end":{"line":66,"column":62}},"52":{"start":{"line":69,"column":17},"end":{"line":69,"column":34}},"53":{"start":{"line":70,"column":19},"end":{"line":70,"column":68}},"54":{"start":{"line":71,"column":19},"end":{"line":71,"column":55}},"55":{"start":{"line":72,"column":4},"end":{"line":123,"column":5}},"56":{"start":{"line":72,"column":17},"end":{"line":72,"column":18}},"57":{"start":{"line":73,"column":26},"end":{"line":73,"column":69}},"58":{"start":{"line":74,"column":25},"end":{"line":74,"column":67}},"59":{"start":{"line":75,"column":8},"end":{"line":76,"column":21}},"60":{"start":{"line":76,"column":12},"end":{"line":76,"column":21}},"61":{"start":{"line":77,"column":24},"end":{"line":77,"column":48}},"62":{"start":{"line":78,"column":8},"end":{"line":79,"column":21}},"63":{"start":{"line":79,"column":12},"end":{"line":79,"column":21}},"64":{"start":{"line":80,"column":8},"end":{"line":80,"column":50}},"65":{"start":{"line":81,"column":24},"end":{"line":81,"column":74}},"66":{"start":{"line":82,"column":8},"end":{"line":122,"column":9}},"67":{"start":{"line":83,"column":28},"end":{"line":83,"column":71}},"68":{"start":{"line":84,"column":29},"end":{"line":84,"column":55}},"69":{"start":{"line":85,"column":12},"end":{"line":86,"column":25}},"70":{"start":{"line":86,"column":16},"end":{"line":86,"column":25}},"71":{"start":{"line":87,"column":12},"end":{"line":87,"column":64}},"72":{"start":{"line":88,"column":12},"end":{"line":98,"column":13}},"73":{"start":{"line":89,"column":38},"end":{"line":89,"column":61}},"74":{"start":{"line":90,"column":16},"end":{"line":91,"column":29}},"75":{"start":{"line":91,"column":20},"end":{"line":91,"column":29}},"76":{"start":{"line":92,"column":36},"end":{"line":92,"column":94}},"77":{"start":{"line":93,"column":37},"end":{"line":93,"column":67}},"78":{"start":{"line":94,"column":36},"end":{"line":94,"column":83}},"79":{"start":{"line":95,"column":16},"end":{"line":96,"column":29}},"80":{"start":{"line":96,"column":20},"end":{"line":96,"column":29}},"81":{"start":{"line":97,"column":16},"end":{"line":97,"column":75}},"82":{"start":{"line":101,"column":38},"end":{"line":101,"column":59}},"83":{"start":{"line":102,"column":12},"end":{"line":103,"column":115}},"84":{"start":{"line":103,"column":16},"end":{"line":103,"column":115}},"85":{"start":{"line":104,"column":28},"end":{"line":104,"column":48}},"86":{"start":{"line":105,"column":30},"end":{"line":105,"column":73}},"87":{"start":{"line":106,"column":12},"end":{"line":107,"column":137}},"88":{"start":{"line":107,"column":16},"end":{"line":107,"column":137}},"89":{"start":{"line":108,"column":12},"end":{"line":108,"column":49}},"90":{"start":{"line":109,"column":12},"end":{"line":121,"column":13}},"91":{"start":{"line":110,"column":38},"end":{"line":110,"column":61}},"92":{"start":{"line":111,"column":16},"end":{"line":112,"column":125}},"93":{"start":{"line":112,"column":20},"end":{"line":112,"column":125}},"94":{"start":{"line":113,"column":41},"end":{"line":113,"column":66}},"95":{"start":{"line":114,"column":16},"end":{"line":115,"column":123}},"96":{"start":{"line":115,"column":20},"end":{"line":115,"column":123}},"97":{"start":{"line":116,"column":36},"end":{"line":116,"column":55}},"98":{"start":{"line":117,"column":38},"end":{"line":117,"column":85}},"99":{"start":{"line":118,"column":16},"end":{"line":119,"column":145}},"100":{"start":{"line":119,"column":20},"end":{"line":119,"column":145}},"101":{"start":{"line":120,"column":16},"end":{"line":120,"column":56}},"102":{"start":{"line":124,"column":22},"end":{"line":124,"column":67}},"103":{"start":{"line":125,"column":4},"end":{"line":125,"column":54}},"104":{"start":{"line":133,"column":4},"end":{"line":133,"column":57}},"105":{"start":{"line":134,"column":4},"end":{"line":134,"column":16}},"106":{"start":{"line":136,"column":0},"end":{"line":136,"column":50}},"107":{"start":{"line":146,"column":8},"end":{"line":146,"column":43}},"108":{"start":{"line":153,"column":8},"end":{"line":153,"column":45}},"109":{"start":{"line":162,"column":8},"end":{"line":162,"column":64}},"110":{"start":{"line":163,"column":8},"end":{"line":163,"column":55}},"111":{"start":{"line":164,"column":8},"end":{"line":165,"column":79}},"112":{"start":{"line":165,"column":12},"end":{"line":165,"column":79}},"113":{"start":{"line":166,"column":8},"end":{"line":166,"column":53}},"114":{"start":{"line":173,"column":8},"end":{"line":173,"column":67}},"115":{"start":{"line":186,"column":8},"end":{"line":250,"column":9}},"116":{"start":{"line":187,"column":45},"end":{"line":189,"column":13}},"117":{"start":{"line":190,"column":30},"end":{"line":190,"column":105}},"118":{"start":{"line":191,"column":37},"end":{"line":191,"column":140}},"119":{"start":{"line":192,"column":33},"end":{"line":192,"column":126}},"120":{"start":{"line":193,"column":36},"end":{"line":193,"column":95}},"121":{"start":{"line":194,"column":23},"end":{"line":194,"column":60}},"122":{"start":{"line":195,"column":33},"end":{"line":199,"column":13}},"123":{"start":{"line":200,"column":12},"end":{"line":203,"column":13}},"124":{"start":{"line":201,"column":16},"end":{"line":201,"column":119}},"125":{"start":{"line":202,"column":16},"end":{"line":202,"column":140}},"126":{"start":{"line":204,"column":30},"end":{"line":204,"column":82}},"127":{"start":{"line":205,"column":36},"end":{"line":205,"column":38}},"128":{"start":{"line":206,"column":12},"end":{"line":206,"column":57}},"129":{"start":{"line":207,"column":12},"end":{"line":246,"column":13}},"130":{"start":{"line":207,"column":25},"end":{"line":207,"column":26}},"131":{"start":{"line":208,"column":35},"end":{"line":208,"column":110}},"132":{"start":{"line":209,"column":39},"end":{"line":209,"column":72}},"133":{"start":{"line":210,"column":32},"end":{"line":227,"column":17}},"134":{"start":{"line":213,"column":24},"end":{"line":214,"column":35}},"135":{"start":{"line":214,"column":28},"end":{"line":214,"column":35}},"136":{"start":{"line":215,"column":46},"end":{"line":216,"column":65}},"137":{"start":{"line":217,"column":24},"end":{"line":225,"column":25}},"138":{"start":{"line":218,"column":28},"end":{"line":218,"column":62}},"139":{"start":{"line":219,"column":28},"end":{"line":224,"column":29}},"140":{"start":{"line":220,"column":52},"end":{"line":220,"column":95}},"141":{"start":{"line":221,"column":32},"end":{"line":222,"column":65}},"142":{"start":{"line":222,"column":36},"end":{"line":222,"column":65}},"143":{"start":{"line":228,"column":36},"end":{"line":228,"column":136}},"144":{"start":{"line":229,"column":33},"end":{"line":229,"column":59}},"145":{"start":{"line":230,"column":16},"end":{"line":243,"column":17}},"146":{"start":{"line":231,"column":20},"end":{"line":234,"column":95}},"147":{"start":{"line":232,"column":24},"end":{"line":232,"column":139}},"148":{"start":{"line":233,"column":25},"end":{"line":234,"column":95}},"149":{"start":{"line":234,"column":24},"end":{"line":234,"column":95}},"150":{"start":{"line":235,"column":33},"end":{"line":235,"column":71}},"151":{"start":{"line":236,"column":38},"end":{"line":236,"column":68}},"152":{"start":{"line":237,"column":35},"end":{"line":237,"column":51}},"153":{"start":{"line":238,"column":20},"end":{"line":238,"column":55}},"154":{"start":{"line":241,"column":35},"end":{"line":241,"column":63}},"155":{"start":{"line":242,"column":20},"end":{"line":242,"column":55}},"156":{"start":{"line":244,"column":16},"end":{"line":244,"column":78}},"157":{"start":{"line":245,"column":16},"end":{"line":245,"column":45}},"158":{"start":{"line":249,"column":12},"end":{"line":249,"column":41}},"159":{"start":{"line":253,"column":41},"end":{"line":255,"column":9}},"160":{"start":{"line":256,"column":26},"end":{"line":256,"column":101}},"161":{"start":{"line":257,"column":28},"end":{"line":257,"column":101}},"162":{"start":{"line":258,"column":8},"end":{"line":258,"column":39}},"163":{"start":{"line":259,"column":8},"end":{"line":259,"column":32}},"164":{"start":{"line":260,"column":8},"end":{"line":260,"column":37}},"165":{"start":{"line":261,"column":8},"end":{"line":261,"column":49}},"166":{"start":{"line":262,"column":8},"end":{"line":262,"column":44}},"167":{"start":{"line":263,"column":33},"end":{"line":263,"column":137}},"168":{"start":{"line":264,"column":8},"end":{"line":264,"column":32}},"169":{"start":{"line":282,"column":8},"end":{"line":339,"column":9}},"170":{"start":{"line":283,"column":12},"end":{"line":288,"column":13}},"171":{"start":{"line":284,"column":16},"end":{"line":285,"column":121}},"172":{"start":{"line":285,"column":20},"end":{"line":285,"column":121}},"173":{"start":{"line":286,"column":16},"end":{"line":287,"column":90}},"174":{"start":{"line":287,"column":20},"end":{"line":287,"column":90}},"175":{"start":{"line":289,"column":37},"end":{"line":289,"column":96}},"176":{"start":{"line":290,"column":33},"end":{"line":290,"column":125}},"177":{"start":{"line":291,"column":36},"end":{"line":291,"column":95}},"178":{"start":{"line":292,"column":31},"end":{"line":296,"column":13}},"179":{"start":{"line":297,"column":12},"end":{"line":300,"column":13}},"180":{"start":{"line":297,"column":25},"end":{"line":297,"column":26}},"181":{"start":{"line":298,"column":16},"end":{"line":298,"column":59}},"182":{"start":{"line":299,"column":16},"end":{"line":299,"column":154}},"183":{"start":{"line":301,"column":36},"end":{"line":301,"column":38}},"184":{"start":{"line":302,"column":12},"end":{"line":332,"column":13}},"185":{"start":{"line":302,"column":25},"end":{"line":302,"column":26}},"186":{"start":{"line":303,"column":40},"end":{"line":303,"column":100}},"187":{"start":{"line":304,"column":32},"end":{"line":323,"column":17}},"188":{"start":{"line":309,"column":24},"end":{"line":310,"column":35}},"189":{"start":{"line":310,"column":28},"end":{"line":310,"column":35}},"190":{"start":{"line":311,"column":46},"end":{"line":312,"column":63}},"191":{"start":{"line":313,"column":24},"end":{"line":321,"column":25}},"192":{"start":{"line":314,"column":28},"end":{"line":314,"column":62}},"193":{"start":{"line":315,"column":28},"end":{"line":320,"column":29}},"194":{"start":{"line":316,"column":52},"end":{"line":316,"column":93}},"195":{"start":{"line":317,"column":32},"end":{"line":318,"column":65}},"196":{"start":{"line":318,"column":36},"end":{"line":318,"column":65}},"197":{"start":{"line":325,"column":16},"end":{"line":328,"column":93}},"198":{"start":{"line":326,"column":20},"end":{"line":326,"column":149}},"199":{"start":{"line":328,"column":20},"end":{"line":328,"column":93}},"200":{"start":{"line":329,"column":16},"end":{"line":329,"column":74}},"201":{"start":{"line":330,"column":16},"end":{"line":331,"column":146}},"202":{"start":{"line":331,"column":20},"end":{"line":331,"column":146}},"203":{"start":{"line":333,"column":12},"end":{"line":333,"column":39}},"204":{"start":{"line":336,"column":12},"end":{"line":337,"column":26}},"205":{"start":{"line":337,"column":16},"end":{"line":337,"column":26}},"206":{"start":{"line":338,"column":12},"end":{"line":338,"column":41}},"207":{"start":{"line":342,"column":0},"end":{"line":342,"column":64}}},"fnMap":{"0":{"name":"replaceXMLScene","decl":{"start":{"line":7,"column":15},"end":{"line":7,"column":30}},"loc":{"start":{"line":7,"column":63},"end":{"line":36,"column":1}},"line":7},"1":{"name":"replaceJSONScene","decl":{"start":{"line":37,"column":15},"end":{"line":37,"column":31}},"loc":{"start":{"line":37,"column":64},"end":{"line":61,"column":1}},"line":37},"2":{"name":"replaceContextSceneReferences","decl":{"start":{"line":62,"column":15},"end":{"line":62,"column":44}},"loc":{"start":{"line":62,"column":85},"end":{"line":67,"column":1}},"line":62},"3":{"name":"replaceCCOrientationsReferences","decl":{"start":{"line":68,"column":15},"end":{"line":68,"column":46}},"loc":{"start":{"line":68,"column":79},"end":{"line":126,"column":1}},"line":68},"4":{"name":"defaultProgressHook","decl":{"start":{"line":132,"column":9},"end":{"line":132,"column":28}},"loc":{"start":{"line":132,"column":39},"end":{"line":135,"column":1}},"line":132},"5":{"name":"(anonymous_5)","decl":{"start":{"line":145,"column":4},"end":{"line":145,"column":5}},"loc":{"start":{"line":145,"column":30},"end":{"line":147,"column":5}},"line":145},"6":{"name":"(anonymous_6)","decl":{"start":{"line":152,"column":4},"end":{"line":152,"column":5}},"loc":{"start":{"line":152,"column":32},"end":{"line":154,"column":5}},"line":152},"7":{"name":"(anonymous_7)","decl":{"start":{"line":160,"column":4},"end":{"line":160,"column":5}},"loc":{"start":{"line":160,"column":42},"end":{"line":167,"column":5}},"line":160},"8":{"name":"(anonymous_8)","decl":{"start":{"line":172,"column":4},"end":{"line":172,"column":5}},"loc":{"start":{"line":172,"column":23},"end":{"line":174,"column":5}},"line":172},"9":{"name":"(anonymous_9)","decl":{"start":{"line":184,"column":4},"end":{"line":184,"column":5}},"loc":{"start":{"line":184,"column":77},"end":{"line":251,"column":5}},"line":184},"10":{"name":"(anonymous_10)","decl":{"start":{"line":212,"column":32},"end":{"line":212,"column":33}},"loc":{"start":{"line":212,"column":47},"end":{"line":226,"column":21}},"line":212},"11":{"name":"(anonymous_11)","decl":{"start":{"line":252,"column":4},"end":{"line":252,"column":5}},"loc":{"start":{"line":252,"column":59},"end":{"line":265,"column":5}},"line":252},"12":{"name":"(anonymous_12)","decl":{"start":{"line":281,"column":4},"end":{"line":281,"column":5}},"loc":{"start":{"line":281,"column":89},"end":{"line":340,"column":5}},"line":281},"13":{"name":"(anonymous_13)","decl":{"start":{"line":308,"column":32},"end":{"line":308,"column":33}},"loc":{"start":{"line":308,"column":47},"end":{"line":322,"column":21}},"line":308}},"branchMap":{"0":{"loc":{"start":{"line":13,"column":8},"end":{"line":14,"column":121}},"type":"if","locations":[{"start":{"line":13,"column":8},"end":{"line":14,"column":121}},{"start":{"line":13,"column":8},"end":{"line":14,"column":121}}],"line":13},"1":{"loc":{"start":{"line":16,"column":8},"end":{"line":17,"column":129}},"type":"if","locations":[{"start":{"line":16,"column":8},"end":{"line":17,"column":129}},{"start":{"line":16,"column":8},"end":{"line":17,"column":129}}],"line":16},"2":{"loc":{"start":{"line":18,"column":8},"end":{"line":32,"column":9}},"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":32,"column":9}},{"start":{"line":18,"column":8},"end":{"line":32,"column":9}}],"line":18},"3":{"loc":{"start":{"line":20,"column":12},"end":{"line":21,"column":88}},"type":"if","locations":[{"start":{"line":20,"column":12},"end":{"line":21,"column":88}},{"start":{"line":20,"column":12},"end":{"line":21,"column":88}}],"line":20},"4":{"loc":{"start":{"line":25,"column":12},"end":{"line":26,"column":129}},"type":"if","locations":[{"start":{"line":25,"column":12},"end":{"line":26,"column":129}},{"start":{"line":25,"column":12},"end":{"line":26,"column":129}}],"line":25},"5":{"loc":{"start":{"line":29,"column":12},"end":{"line":30,"column":137}},"type":"if","locations":[{"start":{"line":29,"column":12},"end":{"line":30,"column":137}},{"start":{"line":29,"column":12},"end":{"line":30,"column":137}}],"line":29},"6":{"loc":{"start":{"line":43,"column":8},"end":{"line":58,"column":9}},"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":58,"column":9}},{"start":{"line":43,"column":8},"end":{"line":58,"column":9}}],"line":43},"7":{"loc":{"start":{"line":45,"column":12},"end":{"line":46,"column":110}},"type":"if","locations":[{"start":{"line":45,"column":12},"end":{"line":46,"column":110}},{"start":{"line":45,"column":12},"end":{"line":46,"column":110}}],"line":45},"8":{"loc":{"start":{"line":50,"column":12},"end":{"line":51,"column":133}},"type":"if","locations":[{"start":{"line":50,"column":12},"end":{"line":51,"column":133}},{"start":{"line":50,"column":12},"end":{"line":51,"column":133}}],"line":50},"9":{"loc":{"start":{"line":55,"column":12},"end":{"line":56,"column":92}},"type":"if","locations":[{"start":{"line":55,"column":12},"end":{"line":56,"column":92}},{"start":{"line":55,"column":12},"end":{"line":56,"column":92}}],"line":55},"10":{"loc":{"start":{"line":63,"column":4},"end":{"line":66,"column":62}},"type":"if","locations":[{"start":{"line":63,"column":4},"end":{"line":66,"column":62}},{"start":{"line":63,"column":4},"end":{"line":66,"column":62}}],"line":63},"11":{"loc":{"start":{"line":75,"column":8},"end":{"line":76,"column":21}},"type":"if","locations":[{"start":{"line":75,"column":8},"end":{"line":76,"column":21}},{"start":{"line":75,"column":8},"end":{"line":76,"column":21}}],"line":75},"12":{"loc":{"start":{"line":78,"column":8},"end":{"line":79,"column":21}},"type":"if","locations":[{"start":{"line":78,"column":8},"end":{"line":79,"column":21}},{"start":{"line":78,"column":8},"end":{"line":79,"column":21}}],"line":78},"13":{"loc":{"start":{"line":82,"column":8},"end":{"line":122,"column":9}},"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":122,"column":9}},{"start":{"line":82,"column":8},"end":{"line":122,"column":9}}],"line":82},"14":{"loc":{"start":{"line":85,"column":12},"end":{"line":86,"column":25}},"type":"if","locations":[{"start":{"line":85,"column":12},"end":{"line":86,"column":25}},{"start":{"line":85,"column":12},"end":{"line":86,"column":25}}],"line":85},"15":{"loc":{"start":{"line":88,"column":12},"end":{"line":98,"column":13}},"type":"if","locations":[{"start":{"line":88,"column":12},"end":{"line":98,"column":13}},{"start":{"line":88,"column":12},"end":{"line":98,"column":13}}],"line":88},"16":{"loc":{"start":{"line":90,"column":16},"end":{"line":91,"column":29}},"type":"if","locations":[{"start":{"line":90,"column":16},"end":{"line":91,"column":29}},{"start":{"line":90,"column":16},"end":{"line":91,"column":29}}],"line":90},"17":{"loc":{"start":{"line":95,"column":16},"end":{"line":96,"column":29}},"type":"if","locations":[{"start":{"line":95,"column":16},"end":{"line":96,"column":29}},{"start":{"line":95,"column":16},"end":{"line":96,"column":29}}],"line":95},"18":{"loc":{"start":{"line":102,"column":12},"end":{"line":103,"column":115}},"type":"if","locations":[{"start":{"line":102,"column":12},"end":{"line":103,"column":115}},{"start":{"line":102,"column":12},"end":{"line":103,"column":115}}],"line":102},"19":{"loc":{"start":{"line":106,"column":12},"end":{"line":107,"column":137}},"type":"if","locations":[{"start":{"line":106,"column":12},"end":{"line":107,"column":137}},{"start":{"line":106,"column":12},"end":{"line":107,"column":137}}],"line":106},"20":{"loc":{"start":{"line":109,"column":12},"end":{"line":121,"column":13}},"type":"if","locations":[{"start":{"line":109,"column":12},"end":{"line":121,"column":13}},{"start":{"line":109,"column":12},"end":{"line":121,"column":13}}],"line":109},"21":{"loc":{"start":{"line":111,"column":16},"end":{"line":112,"column":125}},"type":"if","locations":[{"start":{"line":111,"column":16},"end":{"line":112,"column":125}},{"start":{"line":111,"column":16},"end":{"line":112,"column":125}}],"line":111},"22":{"loc":{"start":{"line":114,"column":16},"end":{"line":115,"column":123}},"type":"if","locations":[{"start":{"line":114,"column":16},"end":{"line":115,"column":123}},{"start":{"line":114,"column":16},"end":{"line":115,"column":123}}],"line":114},"23":{"loc":{"start":{"line":118,"column":16},"end":{"line":119,"column":145}},"type":"if","locations":[{"start":{"line":118,"column":16},"end":{"line":119,"column":145}},{"start":{"line":118,"column":16},"end":{"line":119,"column":145}}],"line":118},"24":{"loc":{"start":{"line":164,"column":8},"end":{"line":165,"column":79}},"type":"if","locations":[{"start":{"line":164,"column":8},"end":{"line":165,"column":79}},{"start":{"line":164,"column":8},"end":{"line":165,"column":79}}],"line":164},"25":{"loc":{"start":{"line":201,"column":47},"end":{"line":201,"column":118}},"type":"cond-expr","locations":[{"start":{"line":201,"column":112},"end":{"line":201,"column":114}},{"start":{"line":201,"column":117},"end":{"line":201,"column":118}}],"line":201},"26":{"loc":{"start":{"line":201,"column":47},"end":{"line":201,"column":109}},"type":"binary-expr","locations":[{"start":{"line":201,"column":47},"end":{"line":201,"column":92}},{"start":{"line":201,"column":96},"end":{"line":201,"column":109}}],"line":201},"27":{"loc":{"start":{"line":202,"column":65},"end":{"line":202,"column":136}},"type":"cond-expr","locations":[{"start":{"line":202,"column":130},"end":{"line":202,"column":132}},{"start":{"line":202,"column":135},"end":{"line":202,"column":136}}],"line":202},"28":{"loc":{"start":{"line":202,"column":65},"end":{"line":202,"column":127}},"type":"binary-expr","locations":[{"start":{"line":202,"column":65},"end":{"line":202,"column":110}},{"start":{"line":202,"column":114},"end":{"line":202,"column":127}}],"line":202},"29":{"loc":{"start":{"line":213,"column":24},"end":{"line":214,"column":35}},"type":"if","locations":[{"start":{"line":213,"column":24},"end":{"line":214,"column":35}},{"start":{"line":213,"column":24},"end":{"line":214,"column":35}}],"line":213},"30":{"loc":{"start":{"line":217,"column":24},"end":{"line":225,"column":25}},"type":"if","locations":[{"start":{"line":217,"column":24},"end":{"line":225,"column":25}},{"start":{"line":217,"column":24},"end":{"line":225,"column":25}}],"line":217},"31":{"loc":{"start":{"line":219,"column":28},"end":{"line":224,"column":29}},"type":"if","locations":[{"start":{"line":219,"column":28},"end":{"line":224,"column":29}},{"start":{"line":219,"column":28},"end":{"line":224,"column":29}}],"line":219},"32":{"loc":{"start":{"line":221,"column":32},"end":{"line":222,"column":65}},"type":"if","locations":[{"start":{"line":221,"column":32},"end":{"line":222,"column":65}},{"start":{"line":221,"column":32},"end":{"line":222,"column":65}}],"line":221},"33":{"loc":{"start":{"line":230,"column":16},"end":{"line":243,"column":17}},"type":"if","locations":[{"start":{"line":230,"column":16},"end":{"line":243,"column":17}},{"start":{"line":230,"column":16},"end":{"line":243,"column":17}}],"line":230},"34":{"loc":{"start":{"line":231,"column":20},"end":{"line":234,"column":95}},"type":"if","locations":[{"start":{"line":231,"column":20},"end":{"line":234,"column":95}},{"start":{"line":231,"column":20},"end":{"line":234,"column":95}}],"line":231},"35":{"loc":{"start":{"line":233,"column":25},"end":{"line":234,"column":95}},"type":"if","locations":[{"start":{"line":233,"column":25},"end":{"line":234,"column":95}},{"start":{"line":233,"column":25},"end":{"line":234,"column":95}}],"line":233},"36":{"loc":{"start":{"line":283,"column":12},"end":{"line":288,"column":13}},"type":"if","locations":[{"start":{"line":283,"column":12},"end":{"line":288,"column":13}},{"start":{"line":283,"column":12},"end":{"line":288,"column":13}}],"line":283},"37":{"loc":{"start":{"line":284,"column":16},"end":{"line":285,"column":121}},"type":"if","locations":[{"start":{"line":284,"column":16},"end":{"line":285,"column":121}},{"start":{"line":284,"column":16},"end":{"line":285,"column":121}}],"line":284},"38":{"loc":{"start":{"line":286,"column":16},"end":{"line":287,"column":90}},"type":"if","locations":[{"start":{"line":286,"column":16},"end":{"line":287,"column":90}},{"start":{"line":286,"column":16},"end":{"line":287,"column":90}}],"line":286},"39":{"loc":{"start":{"line":309,"column":24},"end":{"line":310,"column":35}},"type":"if","locations":[{"start":{"line":309,"column":24},"end":{"line":310,"column":35}},{"start":{"line":309,"column":24},"end":{"line":310,"column":35}}],"line":309},"40":{"loc":{"start":{"line":313,"column":24},"end":{"line":321,"column":25}},"type":"if","locations":[{"start":{"line":313,"column":24},"end":{"line":321,"column":25}},{"start":{"line":313,"column":24},"end":{"line":321,"column":25}}],"line":313},"41":{"loc":{"start":{"line":315,"column":28},"end":{"line":320,"column":29}},"type":"if","locations":[{"start":{"line":315,"column":28},"end":{"line":320,"column":29}},{"start":{"line":315,"column":28},"end":{"line":320,"column":29}}],"line":315},"42":{"loc":{"start":{"line":317,"column":32},"end":{"line":318,"column":65}},"type":"if","locations":[{"start":{"line":317,"column":32},"end":{"line":318,"column":65}},{"start":{"line":317,"column":32},"end":{"line":318,"column":65}}],"line":317},"43":{"loc":{"start":{"line":325,"column":16},"end":{"line":328,"column":93}},"type":"if","locations":[{"start":{"line":325,"column":16},"end":{"line":328,"column":93}},{"start":{"line":325,"column":16},"end":{"line":328,"column":93}}],"line":325},"44":{"loc":{"start":{"line":325,"column":20},"end":{"line":325,"column":148}},"type":"binary-expr","locations":[{"start":{"line":325,"column":20},"end":{"line":325,"column":34}},{"start":{"line":325,"column":39},"end":{"line":325,"column":90}},{"start":{"line":325,"column":94},"end":{"line":325,"column":147}}],"line":325},"45":{"loc":{"start":{"line":330,"column":16},"end":{"line":331,"column":146}},"type":"if","locations":[{"start":{"line":330,"column":16},"end":{"line":331,"column":146}},{"start":{"line":330,"column":16},"end":{"line":331,"column":146}}],"line":330},"46":{"loc":{"start":{"line":336,"column":12},"end":{"line":337,"column":26}},"type":"if","locations":[{"start":{"line":336,"column":12},"end":{"line":337,"column":26}},{"start":{"line":336,"column":12},"end":{"line":337,"column":26}}],"line":336}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":1,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0,0],"45":[0,0],"46":[0,0]},"inputSourceMap":{"version":3,"file":"RealityDataTransferBrowser.js","sourceRoot":"","sources":["../../src/utils/RealityDataTransferBrowser.ts"],"names":[],"mappings":"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","sourcesContent":["import { ContainerClient, BlobDownloadOptions, BlockBlobParallelUploadOptions, BlobUploadCommonResponse } from \"@azure/storage-blob\";\r\nimport { AuthorizationClient } from \"@itwin/core-common\";\r\nimport { RealityDataClientOptions, RealityDataAccessClient, ITwinRealityData } from \"@itwin/reality-data-client\";\r\nimport { RealityDataType } from \"../CommonData\";\r\nimport { ReferenceTableBrowser } from \"./ReferenceTableBrowser\";\r\n\r\ninterface FileInfo {\r\n    name: string;\r\n    size: number;\r\n}\r\n\r\ninterface DataTransferInfo {\r\n    files: FileInfo[];\r\n    totalFilesSize: number; // In bytes\r\n    processedFilesSize: number; // In bytes\r\n}\r\n\r\nasync function replaceXMLScene(file: File | Blob, references: ReferenceTableBrowser, localToCloud: boolean): Promise<void> {\r\n    const text = await file.text();\r\n    const xmlDoc = new DOMParser().parseFromString(text, \"text/xml\");\r\n    const sceneReferences = xmlDoc.getElementsByTagName(\"Reference\");\r\n    for (let i = 0; i < sceneReferences.length; i++) {\r\n        const referencePath = sceneReferences[i].getElementsByTagName(\"Path\");\r\n        if (!referencePath.length)\r\n            return Promise.reject(Error(\r\n                \"Invalid context scene, the reference \" + sceneReferences[i] + \" has no path.\"));\r\n\r\n        const pathValue = referencePath[0].textContent;\r\n        if (!pathValue)\r\n            return Promise.reject(Error(\r\n                \"Invalid context scene, the reference \" + sceneReferences[i] + \" has no path content.\"));\r\n\r\n        if (localToCloud) {\r\n            const cloudId = references.getCloudIdFromLocalPath(pathValue);\r\n            if (!cloudId)\r\n                return Promise.reject(Error(\"Can't replace local path with cloud id \"));\r\n\r\n            referencePath[0].textContent = \"rds:\" + cloudId;\r\n        }\r\n        else {\r\n            if (pathValue.substring(0, 4) !== \"rds:\")\r\n                return Promise.reject(Error(\r\n                    \"Invalid context scene, the reference \" + pathValue + \"doesn't start with 'rds:'.\"));\r\n\r\n            const cloudId = pathValue.substring(4);\r\n            const localPath = references.getLocalPathFromCloudId(cloudId);\r\n            if (!localPath)\r\n                return Promise.reject(Error(\r\n                    \"Can't replace cloud id \" + cloudId + \"path with local path, does not exist in references\"));\r\n\r\n            referencePath[0].textContent = localPath;\r\n        }\r\n    }\r\n\r\n    const newXmlStr = new XMLSerializer().serializeToString(xmlDoc);\r\n    localStorage.setItem(\"tmpPatchedFile\", newXmlStr);\r\n}\r\n\r\nasync function replaceJSONScene(file: File | Blob, references: ReferenceTableBrowser, localToCloud: boolean): Promise<void> {\r\n    const text = await file.text();\r\n    const json = JSON.parse(text);\r\n    for (const referenceId in json.References) {\r\n        let referencePath = json.References[referenceId].Path;\r\n        referencePath = referencePath.replace(/\\//g, \"\\\\\");\r\n\r\n        if (localToCloud) {\r\n            const cloudId = references.getCloudIdFromLocalPath(referencePath);\r\n            if (!cloudId)\r\n                return Promise.reject(Error(\"Can't replace local path \" + referencePath + \" with cloud id \"));\r\n\r\n            json.References[referenceId].Path = \"rds:\" + cloudId;\r\n        }\r\n        else {\r\n            if (referencePath.substring(0, 4) !== \"rds:\")\r\n                return Promise.reject(Error(\r\n                    \"Invalid context scene, the reference \" + referencePath + \"doesn't start with 'rds:'.\"));\r\n\r\n            const id = referencePath.substring(4);\r\n            const localPath = references.getLocalPathFromCloudId(id);\r\n            referencePath = referencePath.replace(/\\//g, \"\\\\\");\r\n            if (!localPath)\r\n                return Promise.reject(Error(\"Can't replace cloud id path with local path\"));\r\n\r\n            json.References[referenceId].Path = localPath;\r\n        }\r\n    }\r\n\r\n    localStorage.setItem(\"tmpPatchedFile\", JSON.stringify(json));\r\n}\r\n\r\nasync function replaceContextSceneReferences(file: File | Blob, references: ReferenceTableBrowser, localToCloud: boolean, isJson: boolean): Promise<void> {\r\n    if (isJson)\r\n        await replaceJSONScene(file, references, localToCloud);\r\n    else\r\n        await replaceXMLScene(file, references, localToCloud);\r\n}\r\n\r\nasync function replaceCCOrientationsReferences(file: File | Blob, references: ReferenceTableBrowser, localToCloud: boolean): Promise<void> {\r\n    const text = await file.text();\r\n    const xmlDoc = new DOMParser().parseFromString(text, \"text/xml\");\r\n    const photos = xmlDoc.getElementsByTagName(\"Photo\");\r\n    for (let i = 0; i < photos.length; i++) {\r\n        const imagePath = photos[i].getElementsByTagName(\"ImagePath\");\r\n        const maskPath = photos[i].getElementsByTagName(\"MaskPath\");\r\n        if (!imagePath.length)\r\n            continue;\r\n\r\n        let pathValue = imagePath[0].textContent;\r\n        if (!pathValue)\r\n            continue;\r\n\r\n        pathValue = pathValue.replace(/\\\\/g, \"/\");\r\n        const dirName = pathValue.substring(0, pathValue.lastIndexOf(\"/\"));\r\n        if (localToCloud) {\r\n            const cloudId = references.getCloudIdFromLocalPath(dirName);\r\n            const fileName = pathValue.split(\"/\").pop();\r\n            if (!cloudId)\r\n                continue;\r\n\r\n            imagePath[0].textContent = cloudId + \"/\" + fileName;\r\n            if (maskPath.length) {\r\n                const maskPathValue = maskPath[0].textContent;\r\n                if (!maskPathValue)\r\n                    continue;\r\n\r\n                const maskDirName = maskPathValue.substring(0, maskPathValue.lastIndexOf(\"/\"));\r\n                const maskFileName = maskPathValue.split(\"/\").pop();\r\n                const maskCloudId = references.getCloudIdFromLocalPath(maskDirName);\r\n                if (!maskCloudId)\r\n                    continue;\r\n\r\n                maskPath[0].textContent = maskCloudId + \"/\" + maskFileName;\r\n            }\r\n        }\r\n        else {\r\n            const splittedImagePath = pathValue.split(/\\//);\r\n            if (!splittedImagePath.length)\r\n                return Promise.reject(Error(\r\n                    \"Invalid image path, the reference \" + pathValue + \" is not a path.\"));\r\n\r\n            const cloudId = splittedImagePath[0];\r\n            const localPath = references.getLocalPathFromCloudId(cloudId);\r\n            if (!localPath)\r\n                return Promise.reject(Error(\r\n                    \"Can't replace cloud id \" + cloudId + \"path with local path, does not exist in references\"));\r\n\r\n            imagePath[0].textContent = localPath;\r\n            if (maskPath.length) {\r\n                const maskPathValue = maskPath[0].textContent;\r\n                if (!maskPathValue)\r\n                    return Promise.reject(Error(\r\n                        \"Invalid cc orientations, the mask \" + photos[i] + \" has no path content.\"));\r\n\r\n                const splittedMaskPath = maskPathValue.split(/\\//);\r\n                if (!splittedMaskPath.length)\r\n                    return Promise.reject(Error(\r\n                        \"Invalid image path, the reference \" + maskPathValue + \" is not a path.\"));\r\n\r\n                const maskCloudId = splittedMaskPath[0];\r\n                const maskLocalPath = references.getLocalPathFromCloudId(maskCloudId);\r\n                if (!maskLocalPath)\r\n                    return Promise.reject(Error(\r\n                        \"Can't replace cloud id \" + maskCloudId + \"path with local path, does not exist in references\"));\r\n\r\n                maskPath[0].textContent = maskLocalPath;\r\n            }\r\n        }\r\n    }\r\n\r\n    const newXmlStr = new XMLSerializer().serializeToString(xmlDoc);\r\n    localStorage.setItem(\"tmpPatchedFile\", newXmlStr);\r\n}\r\n\r\n/**\r\n * Default hook to display progress.\r\n * @param {number} progress current progress (percentage).\r\n * @returns {boolean} false if the upload/download has been cancelled.\r\n */\r\nexport function defaultProgressHook(progress: number): boolean {\r\n    console.log(\"Current progress : \" + progress + \"%.\");\r\n    return true;\r\n}\r\n\r\n/**\r\n * Utility class to upload and download reality data in ContextShare.\r\n */\r\nexport class RealityDataTransferBrowser {\r\n    /** Authorization client to generate access token. */\r\n    private authorizationClient: AuthorizationClient;\r\n\r\n    /** Target service url. */\r\n    private serviceUrl = \"https://api.bentley.com/realitydata\";\r\n    \r\n    /** Abort controller to stop the upload when the upload has been cancelled. */\r\n    private abortController: AbortController;\r\n\r\n    /** \r\n     * On upload progress hook. Displays the upload progress and returns false when the upload is cancelled.\r\n     * Create your own function or use {@link defaultProgressHook}.\r\n     * @param {number} progress upload progress, usually a percentage.\r\n     */\r\n    private onUploadProgress?: (progress: number) => boolean;\r\n\r\n    /** \r\n     * On download progress hook. Displays the download progress and returns false when the download is cancelled.\r\n     * Create your own function or use {@link defaultProgressHook}.\r\n     * @param {number} progress download progress, usually a percentage.\r\n     */\r\n    private onDownloadProgress?: (progress: number) => boolean;\r\n\r\n    /**\r\n     * Set the upload progress hook.\r\n     * @param {number} onProgress function to display the progress, should returns a boolean (cancelled).\r\n     */\r\n    public setUploadHook(onProgress: (progress: number) => boolean): void {\r\n        this.onUploadProgress = onProgress;\r\n    }\r\n\r\n    /**\r\n     * Set the download progress hook.\r\n     * @param {number} onProgress function to display the progress, should returns a boolean (cancelled).\r\n     */\r\n    public setDownloadHook(onProgress: (progress: number) => boolean): void {\r\n        this.onDownloadProgress = onProgress;\r\n    }\r\n\r\n    /**\r\n     * Create a new RealityDataTransferService.\r\n     * @param {AuthorizationClient} authorizationClient Authorization client to generate access token.\r\n     * @param {string} env (optional) Target environment.\r\n     */\r\n    constructor(authorizationClient: AuthorizationClient, env?: string) {\r\n        this.authorizationClient = authorizationClient;\r\n        if(env)\r\n            this.serviceUrl = \"https://\" + env + \"api.bentley.com/realitydata\";\r\n        \r\n        this.abortController = new AbortController();\r\n    }\r\n\r\n    /**\r\n     * Get scopes required for this service.\r\n     * @returns {Set<string>} Set of required minimal scopes.\r\n     */\r\n    public static getScopes(): Set<string> {\r\n        return new Set([\"realitydata:modify\", \"realitydata:read\"]);\r\n    }\r\n\r\n    /**\r\n     * Download reality data from ProjectWise ContextShare.\r\n     * This function should not be used for ContextScenes that contain dependencies to data you have locally as the\r\n     * paths will point to ids in the ProjectWise ContextShare.\r\n     * Use downloadContextScene instead.\r\n     * @param {string} realityDataId The ID of the reality data to download.\r\n     * @param {string} iTwinId iTwin project associated to the reality data.\r\n     * @param {ReferenceTableBrowser} referenceTable (optional) A table mapping local path of dependencies to their ID.\r\n     */\r\n    public async downloadRealityDataBrowser(realityDataId: string, iTwinId: string, referenceTable?: ReferenceTableBrowser): Promise<void> {\r\n        try {\r\n            const realityDataClientOptions: RealityDataClientOptions = {\r\n                baseUrl: this.serviceUrl,\r\n            };\r\n            const rdaClient = new RealityDataAccessClient(realityDataClientOptions);\r\n            const iTwinRealityData: ITwinRealityData = await rdaClient.getRealityData(await this.authorizationClient.getAccessToken(),\r\n                iTwinId, realityDataId);\r\n            const azureBlobUrl = await iTwinRealityData.getBlobUrl(await this.authorizationClient.getAccessToken(), \"\", false);\r\n            const containerClient = new ContainerClient(azureBlobUrl.toString());\r\n            let iter = await containerClient.listBlobsFlat();\r\n\r\n            const downloadInfo: DataTransferInfo = {\r\n                files: [],\r\n                totalFilesSize: 0,\r\n                processedFilesSize: 0\r\n            };\r\n\r\n            for await (const blob of iter) {\r\n                downloadInfo.totalFilesSize += blob.properties.contentLength ?? 0;\r\n                downloadInfo.files.push({ name: blob.name, size: blob.properties.contentLength ?? 0 });\r\n            }\r\n\r\n            const dirHandle = await window.showDirectoryPicker({ writable: true });\r\n            let currentPercentage = -1;\r\n            iter = await containerClient.listBlobsFlat(); // rewind iterator\r\n            for (let i = 0; i < downloadInfo.files.length; i++) {\r\n                const filehandle = await dirHandle.getFileHandle(downloadInfo.files[i].name, { create: true });\r\n                const writableStream = await filehandle.createWritable();\r\n\r\n                const options: BlobDownloadOptions = {\r\n                    abortSignal: this.abortController.signal,\r\n                    onProgress: async (env) => {\r\n                        if (this.abortController.signal.aborted)\r\n                            return;\r\n\r\n                        const newPercentage = Math.round(((env.loadedBytes + downloadInfo.processedFilesSize)\r\n                            / downloadInfo.totalFilesSize * 100));\r\n                        if (newPercentage !== currentPercentage) {\r\n                            currentPercentage = newPercentage;\r\n                            if (this.onDownloadProgress) {\r\n                                const isCancelled = !this.onDownloadProgress(currentPercentage);\r\n                                if (isCancelled)\r\n                                    this.abortController.abort();\r\n\r\n                                // TODO : what to do if no provided hook?\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                const blobContent = await containerClient.getBlockBlobClient(downloadInfo.files[i].name).download(0, undefined, options);\r\n                const blobBody = await blobContent.blobBody;\r\n\r\n                if (referenceTable) {\r\n                    if (downloadInfo.files[i].name === \"ContextScene.xml\")\r\n                        await replaceContextSceneReferences(blobBody!, referenceTable, false, downloadInfo.files[i].name.endsWith(\".json\"));\r\n                    else if (downloadInfo.files[i].name === \"Orientations.xml\")\r\n                        await replaceCCOrientationsReferences(blobBody!, referenceTable, false);\r\n\r\n                    const text = localStorage.getItem(\"tmpPatchedFile\")!;\r\n                    const byteArray = new TextEncoder().encode(text);\r\n                    const buffer = byteArray.buffer;\r\n                    await writableStream.write(buffer);\r\n                }\r\n                else {\r\n                    const buffer = await blobBody!.arrayBuffer();\r\n                    await writableStream.write(buffer);\r\n                }\r\n\r\n                downloadInfo.processedFilesSize += downloadInfo.files[i].size;\r\n                await writableStream.close();\r\n            }\r\n        }\r\n        catch (error: any) {\r\n            return Promise.reject(error);\r\n        }\r\n    }\r\n\r\n    private async createRealityData(type: string, name: string, iTwinId: string, rootFile?: string): Promise<ITwinRealityData> {\r\n        const realityDataClientOptions: RealityDataClientOptions = {\r\n            baseUrl: this.serviceUrl,\r\n        };\r\n        const rdaClient = new RealityDataAccessClient(realityDataClientOptions);\r\n        const realityData = new ITwinRealityData(rdaClient, undefined, iTwinId);\r\n        realityData.displayName = name;\r\n        realityData.type = type;\r\n        realityData.description = \"\";\r\n        realityData.classification = \"Undefined\";\r\n        realityData.rootDocument = rootFile;\r\n        const iTwinRealityData: ITwinRealityData = await rdaClient.createRealityData(\r\n            await this.authorizationClient.getAccessToken(), iTwinId, realityData);\r\n        return iTwinRealityData;\r\n    }\r\n\r\n    /**\r\n     * Upload reality data to ProjectWise ContextShare.\r\n     * This function should not be used for ContextScenes or CCOrientations that contain dependencies to other data\r\n     * unless those dependencies are already uploaded and the file you want to upload points to their id. \r\n     * Use uploadContextScene or uploadCCOrientation instead.\r\n     * @param {File[]} files Files to upload.\r\n     * @param {RealityDataType} type RealityDataType of the data.\r\n     * @param {string} name Name of the created entry on ProjectWise ContextShare.\r\n     * @param {string} iTwinId ID of the iTwin project the reality data will be linked to. It is also used to choose the \r\n     * data center where the reality data is stored.\r\n     * @param {string} rootFile (optional) Used to indicate the root document of the reality data. The root document can be in a \r\n     * subfolder and is then specified as “Tile_Root.json” or “Folder1/SubFolder1/File.json” for example, with \r\n     * a relative path to the root folder of the data.\r\n     * @returns {string} The ID of the uploaded data.\r\n     */\r\n    public async uploadRealityDataBrowser(files: File[], type: string, name: string, iTwinId: string, rootFile?: string,\r\n        referenceTable?: ReferenceTableBrowser): Promise<string> {\r\n        try {\r\n            if(referenceTable) {\r\n                if (type === RealityDataType.CONTEXT_SCENE)\r\n                    await replaceContextSceneReferences(files[0], referenceTable, true, files[0].name.endsWith(\".json\"));\r\n\r\n                if (type === RealityDataType.CC_ORIENTATIONS)\r\n                    await replaceCCOrientationsReferences(files[0], referenceTable, true);\r\n            }\r\n\r\n            const iTwinRealityData = await this.createRealityData(type, name, iTwinId, rootFile);\r\n            const azureBlobUrl: URL = await iTwinRealityData.getBlobUrl(await this.authorizationClient.getAccessToken(), \"\", true);\r\n            const containerClient = new ContainerClient(azureBlobUrl.toString());\r\n            const uploadInfo: DataTransferInfo = {\r\n                files: [],\r\n                totalFilesSize: 0,\r\n                processedFilesSize: 0\r\n            };\r\n\r\n            for (let i = 0; i < files.length; i++) {\r\n                uploadInfo.totalFilesSize += files[i].size;\r\n                uploadInfo.files.push({ name: files[i].webkitRelativePath.substring(files[i].webkitRelativePath.indexOf(\"/\") + 1), size: files[i].size });\r\n            }\r\n\r\n            let currentPercentage = -1;\r\n            for (let i = 0; i < uploadInfo.files.length; i++) {\r\n                const blockBlobClient = containerClient.getBlockBlobClient(uploadInfo.files[i].name);\r\n                const options: BlockBlobParallelUploadOptions = {\r\n                    abortSignal: this.abortController.signal,\r\n                    maxSingleShotSize: 100 * 1024 * 1024, // 100MB\r\n                    concurrency: 20,\r\n                    onProgress: async (env) => {\r\n                        if (this.abortController.signal.aborted)\r\n                            return;\r\n\r\n                        const newPercentage = Math.round(((env.loadedBytes + uploadInfo.processedFilesSize)\r\n                            / uploadInfo.totalFilesSize * 100));\r\n                        if (newPercentage !== currentPercentage) {\r\n                            currentPercentage = newPercentage;\r\n                            if (this.onUploadProgress) {\r\n                                const isCancelled = !this.onUploadProgress(currentPercentage);\r\n                                if (isCancelled)\r\n                                    this.abortController.abort();\r\n\r\n                                // TODO : what to do if no provided hook?\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                let uploadBlobResponse: BlobUploadCommonResponse;\r\n                if (referenceTable && (type === RealityDataType.CONTEXT_SCENE || type === RealityDataType.CC_ORIENTATIONS))\r\n                    uploadBlobResponse = await blockBlobClient.uploadData(new TextEncoder().encode(localStorage.getItem(\"tmpPatchedFile\")!), options);\r\n                else\r\n                    uploadBlobResponse = await blockBlobClient.uploadData(files[i], options);\r\n\r\n                uploadInfo.processedFilesSize += uploadInfo.files[i].size;\r\n                if (uploadBlobResponse.errorCode)\r\n                    return Promise.reject(Error(\r\n                        \"Can't upload reality data : \" + iTwinRealityData + \", error : \" + uploadBlobResponse.errorCode));\r\n            }\r\n            return iTwinRealityData.id;\r\n        }\r\n        catch (error: any) {\r\n            if (error.name === \"AbortError\")\r\n                return \"\"; // TODO : what to do if aborted?\r\n\r\n            return Promise.reject(error);\r\n        }\r\n    }\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6966a56fadb2f717a3243e5703eb4ebb1c1a45ba","contentHash":"ef321cd6fc2aba76eabe756c46241d160f1dc14ddf22967bd89edafd79c09a91"},"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\CommonData.js":{"path":"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\CommonData.js","statementMap":{"0":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":52}},"2":{"start":{"line":10,"column":0},"end":{"line":21,"column":59}},"3":{"start":{"line":11,"column":4},"end":{"line":11,"column":34}},"4":{"start":{"line":12,"column":4},"end":{"line":12,"column":40}},"5":{"start":{"line":13,"column":4},"end":{"line":13,"column":38}},"6":{"start":{"line":14,"column":4},"end":{"line":14,"column":34}},"7":{"start":{"line":15,"column":4},"end":{"line":15,"column":30}},"8":{"start":{"line":16,"column":4},"end":{"line":16,"column":36}},"9":{"start":{"line":17,"column":4},"end":{"line":17,"column":35}},"10":{"start":{"line":18,"column":4},"end":{"line":18,"column":36}},"11":{"start":{"line":19,"column":4},"end":{"line":19,"column":36}},"12":{"start":{"line":20,"column":4},"end":{"line":20,"column":44}},"13":{"start":{"line":26,"column":0},"end":{"line":43,"column":80}},"14":{"start":{"line":27,"column":4},"end":{"line":27,"column":65}},"15":{"start":{"line":28,"column":4},"end":{"line":28,"column":58}},"16":{"start":{"line":29,"column":4},"end":{"line":29,"column":60}},"17":{"start":{"line":30,"column":4},"end":{"line":30,"column":54}},"18":{"start":{"line":31,"column":4},"end":{"line":31,"column":35}},"19":{"start":{"line":32,"column":4},"end":{"line":32,"column":35}},"20":{"start":{"line":33,"column":4},"end":{"line":33,"column":35}},"21":{"start":{"line":34,"column":4},"end":{"line":34,"column":35}},"22":{"start":{"line":35,"column":4},"end":{"line":35,"column":35}},"23":{"start":{"line":36,"column":4},"end":{"line":36,"column":35}},"24":{"start":{"line":37,"column":4},"end":{"line":37,"column":49}},"25":{"start":{"line":38,"column":4},"end":{"line":38,"column":58}},"26":{"start":{"line":39,"column":4},"end":{"line":39,"column":35}},"27":{"start":{"line":40,"column":4},"end":{"line":40,"column":39}},"28":{"start":{"line":41,"column":4},"end":{"line":41,"column":39}},"29":{"start":{"line":42,"column":4},"end":{"line":42,"column":53}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":1},"end":{"line":10,"column":2}},"loc":{"start":{"line":10,"column":21},"end":{"line":21,"column":1}},"line":10},"1":{"name":"(anonymous_1)","decl":{"start":{"line":26,"column":1},"end":{"line":26,"column":2}},"loc":{"start":{"line":26,"column":28},"end":{"line":43,"column":1}},"line":26}},"branchMap":{"0":{"loc":{"start":{"line":21,"column":14},"end":{"line":21,"column":57}},"type":"binary-expr","locations":[{"start":{"line":21,"column":14},"end":{"line":21,"column":30}},{"start":{"line":21,"column":35},"end":{"line":21,"column":56}}],"line":21},"1":{"loc":{"start":{"line":43,"column":21},"end":{"line":43,"column":78}},"type":"binary-expr","locations":[{"start":{"line":43,"column":21},"end":{"line":43,"column":44}},{"start":{"line":43,"column":49},"end":{"line":43,"column":77}}],"line":43}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1},"f":{"0":1,"1":1},"b":{"0":[1,1],"1":[1,1]},"inputSourceMap":{"version":3,"file":"CommonData.js","sourceRoot":"","sources":["../src/CommonData.ts"],"names":[],"mappings":";AAAA;;;+FAG+F;;;AAE/F,uBAAuB;AACvB,IAAY,QAWX;AAXD,WAAY,QAAQ;IAChB,6BAAiB,CAAA;IACjB,mCAAuB,CAAA;IACvB,iCAAqB,CAAA;IACrB,6BAAiB,CAAA;IACjB,yBAAa,CAAA;IACb,+BAAmB,CAAA;IACnB,8BAAkB,CAAA;IAClB,+BAAmB,CAAA;IACnB,+BAAmB,CAAA;IACnB,uCAA2B,CAAA;AAC/B,CAAC,EAXW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAWnB;AAsBD;;GAEG;AACH,IAAY,eAiBX;AAjBD,WAAY,eAAe;IACvB,4DAAyC,CAAA;IACzC,qDAAkC,CAAA;IAClC,uDAAoC,CAAA;IACpC,iDAA8B,CAAA;IAC9B,8BAAW,CAAA;IACX,8BAAW,CAAA;IACX,8BAAW,CAAA;IACX,8BAAW,CAAA;IACX,8BAAW,CAAA;IACX,8BAAW,CAAA;IACX,4CAAyB,CAAA;IACzB,qDAAkC,CAAA;IAClC,8BAAW,CAAA;IACX,kCAAe,CAAA;IACf,kCAAe,CAAA;IACf,gDAA6B,CAAA;AACjC,CAAC,EAjBW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAiB1B","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\n/** Status of a job. */\r\nexport enum JobState {\r\n    ACTIVE = \"active\",\r\n    CANCELLED = \"cancelled\",\r\n    COMPLETED = \"success\",\r\n    FAILED = \"failed\",\r\n    OVER = \"over\",\r\n    PENDING = \"pending\",\r\n    RUNNING = \"active\",\r\n    SUCCESS = \"success\",\r\n    UNKNOWN = \"unknown\",\r\n    UNSUBMITTED = \"unsubmitted\",\r\n}\r\n\r\n/**\r\n * Job creation, submission, start and end dates.\r\n */\r\nexport interface JobDates {\r\n    createdDateTime?: string;\r\n    submissionDateTime?: string;\r\n    startedDateTime?: string;\r\n    endedDateTime?: string;\r\n}\r\n\r\n/** \r\n * Progress for the job. \r\n * Contains the status for the job, and it's percentage progression as an integer value between 0 and 100\r\n */\r\nexport interface JobProgress {\r\n    state: JobState\r\n    progress: number;\r\n    step: string;\r\n}\r\n\r\n/**\r\n * Data types used in ProjectWise ContextShare.\r\n */\r\nexport enum RealityDataType {\r\n    CC_IMAGE_COLLECTION = \"CCImageCollection\",\r\n    CC_ORIENTATIONS = \"CCOrientations\",\r\n    CONTEXT_DETECTOR = \"ContextDetector\",\r\n    CONTEXT_SCENE = \"ContextScene\",\r\n    DGN = \"DGN\",\r\n    LAS = \"LAS\",\r\n    LAZ = \"LAZ\",\r\n    OPC = \"OPC\",\r\n    PLY = \"PLY\",\r\n    POD = \"POD\",\r\n    POINTCLOUD = \"PointCloud\",\r\n    SCAN_COLLECTION = \"ScanCollection\",\r\n    SHP = \"SHP\",\r\n    THREEMX = \"3MX\",\r\n    THREESM = \"3SM\",\r\n    UNSTRUCTURED = \"Unstructured\"\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0304fe9e7c02811dff507f21070d4edc40b34184","contentHash":"8c863305bae2a1f106244d86ef4e3d1adb7acfcb1577918955a63f04d98cc3f0"},"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\utils\\ReferenceTableBrowser.js":{"path":"C:\\Users\\Denis.Biguenet\\Documents\\Acute3D\\reality-capture\\typescript\\sdk\\lib\\utils\\ReferenceTableBrowser.js","statementMap":{"0":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":39}},"2":{"start":{"line":13,"column":8},"end":{"line":13,"column":33}},"3":{"start":{"line":16,"column":8},"end":{"line":16,"column":38}},"4":{"start":{"line":17,"column":8},"end":{"line":17,"column":38}},"5":{"start":{"line":24,"column":26},"end":{"line":24,"column":59}},"6":{"start":{"line":25,"column":31},"end":{"line":25,"column":63}},"7":{"start":{"line":26,"column":22},"end":{"line":26,"column":24}},"8":{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},"9":{"start":{"line":28,"column":12},"end":{"line":28,"column":48}},"10":{"start":{"line":30,"column":8},"end":{"line":30,"column":44}},"11":{"start":{"line":31,"column":8},"end":{"line":31,"column":37}},"12":{"start":{"line":37,"column":27},"end":{"line":48,"column":9}},"13":{"start":{"line":49,"column":24},"end":{"line":49,"column":67}},"14":{"start":{"line":50,"column":8},"end":{"line":51,"column":19}},"15":{"start":{"line":51,"column":12},"end":{"line":51,"column":19}},"16":{"start":{"line":52,"column":21},"end":{"line":52,"column":47}},"17":{"start":{"line":53,"column":24},"end":{"line":53,"column":41}},"18":{"start":{"line":54,"column":22},"end":{"line":54,"column":75}},"19":{"start":{"line":55,"column":8},"end":{"line":60,"column":9}},"20":{"start":{"line":56,"column":41},"end":{"line":56,"column":56}},"21":{"start":{"line":57,"column":12},"end":{"line":58,"column":25}},"22":{"start":{"line":58,"column":16},"end":{"line":58,"column":25}},"23":{"start":{"line":59,"column":12},"end":{"line":59,"column":50}},"24":{"start":{"line":69,"column":8},"end":{"line":73,"column":9}},"25":{"start":{"line":70,"column":12},"end":{"line":71,"column":130}},"26":{"start":{"line":71,"column":16},"end":{"line":71,"column":130}},"27":{"start":{"line":72,"column":12},"end":{"line":72,"column":25}},"28":{"start":{"line":74,"column":8},"end":{"line":74,"column":50}},"29":{"start":{"line":75,"column":8},"end":{"line":75,"column":50}},"30":{"start":{"line":76,"column":8},"end":{"line":76,"column":20}},"31":{"start":{"line":85,"column":8},"end":{"line":85,"column":88}},"32":{"start":{"line":93,"column":8},"end":{"line":93,"column":48}},"33":{"start":{"line":101,"column":8},"end":{"line":101,"column":46}},"34":{"start":{"line":109,"column":8},"end":{"line":112,"column":9}},"35":{"start":{"line":110,"column":12},"end":{"line":110,"column":79}},"36":{"start":{"line":111,"column":12},"end":{"line":111,"column":22}},"37":{"start":{"line":113,"column":8},"end":{"line":113,"column":48}},"38":{"start":{"line":121,"column":8},"end":{"line":124,"column":9}},"39":{"start":{"line":122,"column":12},"end":{"line":122,"column":77}},"40":{"start":{"line":123,"column":12},"end":{"line":123,"column":22}},"41":{"start":{"line":125,"column":8},"end":{"line":125,"column":46}},"42":{"start":{"line":133,"column":8},"end":{"line":134,"column":22}},"43":{"start":{"line":134,"column":12},"end":{"line":134,"column":22}},"44":{"start":{"line":135,"column":8},"end":{"line":135,"column":55}},"45":{"start":{"line":138,"column":0},"end":{"line":138,"column":54}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":18},"end":{"line":14,"column":5}},"line":12},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":18},"end":{"line":18,"column":5}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":17},"end":{"line":32,"column":5}},"line":23},"3":{"name":"(anonymous_3)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":17},"end":{"line":61,"column":5}},"line":36},"4":{"name":"(anonymous_4)","decl":{"start":{"line":68,"column":4},"end":{"line":68,"column":5}},"loc":{"start":{"line":68,"column":37},"end":{"line":77,"column":5}},"line":68},"5":{"name":"(anonymous_5)","decl":{"start":{"line":84,"column":4},"end":{"line":84,"column":5}},"loc":{"start":{"line":84,"column":40},"end":{"line":86,"column":5}},"line":84},"6":{"name":"(anonymous_6)","decl":{"start":{"line":92,"column":4},"end":{"line":92,"column":5}},"loc":{"start":{"line":92,"column":28},"end":{"line":94,"column":5}},"line":92},"7":{"name":"(anonymous_7)","decl":{"start":{"line":100,"column":4},"end":{"line":100,"column":5}},"loc":{"start":{"line":100,"column":24},"end":{"line":102,"column":5}},"line":100},"8":{"name":"(anonymous_8)","decl":{"start":{"line":108,"column":4},"end":{"line":108,"column":5}},"loc":{"start":{"line":108,"column":39},"end":{"line":114,"column":5}},"line":108},"9":{"name":"(anonymous_9)","decl":{"start":{"line":120,"column":4},"end":{"line":120,"column":5}},"loc":{"start":{"line":120,"column":37},"end":{"line":126,"column":5}},"line":120},"10":{"name":"(anonymous_10)","decl":{"start":{"line":132,"column":4},"end":{"line":132,"column":5}},"loc":{"start":{"line":132,"column":34},"end":{"line":136,"column":5}},"line":132}},"branchMap":{"0":{"loc":{"start":{"line":50,"column":8},"end":{"line":51,"column":19}},"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":51,"column":19}},{"start":{"line":50,"column":8},"end":{"line":51,"column":19}}],"line":50},"1":{"loc":{"start":{"line":57,"column":12},"end":{"line":58,"column":25}},"type":"if","locations":[{"start":{"line":57,"column":12},"end":{"line":58,"column":25}},{"start":{"line":57,"column":12},"end":{"line":58,"column":25}}],"line":57},"2":{"loc":{"start":{"line":57,"column":16},"end":{"line":57,"column":38}},"type":"binary-expr","locations":[{"start":{"line":57,"column":16},"end":{"line":57,"column":26}},{"start":{"line":57,"column":30},"end":{"line":57,"column":38}}],"line":57},"3":{"loc":{"start":{"line":69,"column":8},"end":{"line":73,"column":9}},"type":"if","locations":[{"start":{"line":69,"column":8},"end":{"line":73,"column":9}},{"start":{"line":69,"column":8},"end":{"line":73,"column":9}}],"line":69},"4":{"loc":{"start":{"line":69,"column":12},"end":{"line":69,"column":78}},"type":"binary-expr","locations":[{"start":{"line":69,"column":12},"end":{"line":69,"column":44}},{"start":{"line":69,"column":48},"end":{"line":69,"column":78}}],"line":69},"5":{"loc":{"start":{"line":70,"column":12},"end":{"line":71,"column":130}},"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":71,"column":130}},{"start":{"line":70,"column":12},"end":{"line":71,"column":130}}],"line":70},"6":{"loc":{"start":{"line":70,"column":16},"end":{"line":70,"column":108}},"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":60}},{"start":{"line":70,"column":64},"end":{"line":70,"column":108}}],"line":70},"7":{"loc":{"start":{"line":85,"column":15},"end":{"line":85,"column":87}},"type":"binary-expr","locations":[{"start":{"line":85,"column":15},"end":{"line":85,"column":50}},{"start":{"line":85,"column":54},"end":{"line":85,"column":87}}],"line":85},"8":{"loc":{"start":{"line":109,"column":8},"end":{"line":112,"column":9}},"type":"if","locations":[{"start":{"line":109,"column":8},"end":{"line":112,"column":9}},{"start":{"line":109,"column":8},"end":{"line":112,"column":9}}],"line":109},"9":{"loc":{"start":{"line":121,"column":8},"end":{"line":124,"column":9}},"type":"if","locations":[{"start":{"line":121,"column":8},"end":{"line":124,"column":9}},{"start":{"line":121,"column":8},"end":{"line":124,"column":9}}],"line":121},"10":{"loc":{"start":{"line":133,"column":8},"end":{"line":134,"column":22}},"type":"if","locations":[{"start":{"line":133,"column":8},"end":{"line":134,"column":22}},{"start":{"line":133,"column":8},"end":{"line":134,"column":22}}],"line":133}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"inputSourceMap":{"version":3,"file":"ReferenceTableBrowser.js","sourceRoot":"","sources":["../../src/utils/ReferenceTableBrowser.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * A bi-directional map of local data paths and their corresponding cloud ID.\r\n */\r\nexport class ReferenceTableBrowser {\r\n    /** Local path to cloud id. */\r\n    private localToCloud: Map<string, string>;\r\n    /** Cloud id to local path. */\r\n    private cloudToLocal: Map<string, string>;\r\n\r\n    public get entries() {\r\n        return this.localToCloud;\r\n    }\r\n\r\n    constructor() {\r\n        this.localToCloud = new Map();\r\n        this.cloudToLocal = new Map();\r\n    }\r\n\r\n    /**\r\n     * Open a file picker and save references as txt file. \r\n     * This file will be loaded next time to prevent reuploading the same data, see {@link load}.\r\n     */\r\n    public async save(): Promise<void> {\r\n        const newHandle = await window.showSaveFilePicker();\r\n        const writableStream = await newHandle.createWritable();\r\n        let content = \"\";\r\n        for (const [key, value] of this.localToCloud) {\r\n            content += key + \",\" + value + \"\\n\";\r\n        }\r\n        await writableStream.write(content);\r\n        await writableStream.close();\r\n    }\r\n\r\n    /**\r\n     * Load references from selected file. Open a file picker to select the reference file.\r\n     */\r\n    public async load(): Promise<void> {\r\n        const pickerOpts = {\r\n            types: [\r\n                {\r\n                    description: \"Text\",\r\n                    accept: {\r\n                        \"text/*\": [\".txt\"]\r\n                    }\r\n                },\r\n            ],\r\n            excludeAcceptAllOption: true,\r\n            multiple: false\r\n        };\r\n\r\n        const handles = await window.showOpenFilePicker(pickerOpts);\r\n        if(!handles.length)\r\n            return;\r\n            \r\n        const file = await handles[0].getFile();\r\n        const content = await file.text();\r\n        const lines = content.toString().replace(/\\r\\n/g, \"\\n\").split(\"\\n\");\r\n        for (const line of lines) {\r\n            const [localPath, cloudId] = line.split(\",\");\r\n            if (!localPath || !cloudId)\r\n                continue;\r\n\r\n            this.addReference(localPath, cloudId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a new entry in the table.\r\n     * @param {string} localPath new entry local path.\r\n     * @param {string} cloudId new entry cloud id.\r\n     * @returns {boolean} true if the entry has been added successfully.\r\n     */\r\n    public addReference(localPath: string, cloudId: string): boolean {\r\n        if (this.localToCloud.has(localPath) && this.cloudToLocal.has(cloudId)) {\r\n            if (this.localToCloud.get(localPath) === cloudId && this.cloudToLocal.get(cloudId) === localPath)\r\n                console.log(\"Both \" + localPath + \" and \" + cloudId + \" already exist in table and are not mapped to each other\");\r\n\r\n            return false;\r\n        }\r\n\r\n        this.localToCloud.set(localPath, cloudId);\r\n        this.cloudToLocal.set(cloudId, localPath);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Remove reference from the reference table.\r\n     * @param {string} localPath local path entry to remove.\r\n     * @param {string} cloudId cloud id entry to remove.\r\n     * @returns {boolean} true if the entry has been removed successfully in both maps.\r\n     */\r\n    public removeReference(localPath: string, cloudId: string): boolean {\r\n        return this.localToCloud.delete(localPath) && this.cloudToLocal.delete(cloudId);\r\n    }\r\n\r\n    /**\r\n     * Check if {@link localPath} exists in {@link localToCloud}.\r\n     * @param {string} localPath local path to search in the reference table.\r\n     * @returns {boolean} true if {@link localPath} exists in {@link localToCloud}.\r\n     */\r\n    public hasLocalPath(localPath: string): boolean {\r\n        return this.localToCloud.has(localPath);\r\n    }\r\n\r\n    /**\r\n     * Check if {@link cloudId} exists in {@link cloudToLocal}.\r\n     * @param {string} cloudId local path to search in the reference table.\r\n     * @returns {boolean} true if {@link cloudId} exists in {@link cloudToLocal}.\r\n     */\r\n    public hasCloudId(cloudId: string): boolean {\r\n        return this.cloudToLocal.has(cloudId);\r\n    }\r\n\r\n    /**\r\n     * Get cloud id from local path.\r\n     * @param {string} localPath local path.\r\n     * @returns {string} cloud id associated to {@link localPath}.\r\n     */\r\n    public getCloudIdFromLocalPath(localPath: string): string {\r\n        if (!this.hasLocalPath(localPath)) {\r\n            console.log(\"Could not find \" + localPath + \" in reference table\");\r\n            return \"\";\r\n        }\r\n        return this.localToCloud.get(localPath)!;\r\n    }\r\n\r\n    /**\r\n     * Get local path from cloud id.\r\n     * @param {string} cloudId cloud id.\r\n     * @returns {string} local path associated to {@link cloudId}.\r\n     */\r\n    public getLocalPathFromCloudId(cloudId: string): string {\r\n        if (!this.hasCloudId(cloudId)) {\r\n            console.log(\"Could not find \" + cloudId + \" in reference table\");\r\n            return \"\";\r\n        }\r\n        return this.cloudToLocal.get(cloudId)!;\r\n    }\r\n\r\n    /**\r\n     * Translate input path to cloud id.\r\n     * @param {string} inputPath input path to translate.\r\n     * @returns {string} input as cloud id.\r\n     */\r\n    public translateInputPath(inputPath: string): string {\r\n        if (!inputPath.length)\r\n            return \"\";\r\n\r\n        return this.getCloudIdFromLocalPath(inputPath);\r\n    }\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f17a95e66494574a5dc14218c9d75783af869137","contentHash":"dedbd50e1f9aa515b2f27db136a7da7cc95a21cc618ee0bda9f2dd0c14b20e38"}}